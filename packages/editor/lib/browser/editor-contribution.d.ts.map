{"version":3,"sources":["browser/editor-contribution.ts"],"names":[],"mappings":"AACA,OAAO,EAAW,+BAA+B,EAAE,sBAAsB,EAAE,kBAAkB,EAAC,MAAM,YAAY,CAAC;AACjH,OAAO,EAAC,OAAO,EAAE,mBAAmB,EAAE,eAAe,EAAE,oBAAoB,EAAC,MAAM,uBAAuB,CAAC;AAC1G,OAAO,EAAC,iBAAiB,EAAC,MAAM,4CAA4C,CAAC;AAC7E,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAC,UAAU,EAAC,MAAM,UAAU,CAAC;AACpC,OAAO,EAAC,SAAS,EAAqB,MAAM,mCAAmC,CAAC;AAChF,OAAO,EAAC,eAAe,EAAC,MAAM,yCAAyC,CAAC;AAGxE,OAAO,EAAC,iBAAiB,EAAC,MAAM,0CAA0C,CAAC;AAE3E,eAAO,MAAM,IAAI,SAIf,CAAC;AAEH,qBACa,kBAAmB,YAAW,+BAA+B,EAAE,sBAAsB,EAAE,mBAAmB;IAElG,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC;IACpC,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC;IAC9C,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,eAAe,CAAC;IAGvE,SAAS,CAAC,QAAQ,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;IAGxD,SAAS,CAAC,QAAQ,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;IACxD,SAAS,CAAC,QAAQ,CAAC,+BAA+B,uBAA8B;IAEhF,OAAO,IAAI,IAAI;IAOf,gBAAgB,CAAC,QAAQ,EAAE,eAAe;IAM1C,mBAAmB,CAAC,WAAW,EAAE,kBAAkB;IAOnD,SAAS,CAAC,qBAAqB,IAAI,IAAI;IAkBvC,SAAS,CAAC,eAAe,IAAI,IAAI;IAiBjC,SAAS,CAAC,oBAAoB,CAAC,MAAM,EAAE,UAAU,GAAG,SAAS,GAAG,IAAI;IAgBpE,SAAS,CAAC,oBAAoB,CAAC,MAAM,EAAE,UAAU,GAAG,SAAS,GAAG,IAAI;IAcpE,SAAS,CAAC,uBAAuB,CAAC,MAAM,EAAE,UAAU,GAAG,SAAS,GAAG,IAAI;CAcxE","file":"../../src/browser/editor-contribution.d.ts","sourcesContent":["import {inject, injectable, optional} from 'inversify';\r\nimport {DiffUris, FrontendApplicationContribution, KeybindingContribution, KeybindingRegistry} from '@tart/core';\r\nimport {Command, CommandContribution, CommandRegistry, DisposableCollection} from '@tart/core/lib/common';\r\nimport {ContextKeyService} from '@tart/core/lib/browser/context-key-service';\r\nimport {EditorManager} from './editor-manager';\r\nimport {TextEditor} from './editor';\r\nimport {StatusBar, StatusBarAlignment} from '@tart/core/lib/browser/status-bar';\r\nimport {LanguageService} from '@tart/core/lib/browser/language-service';\r\nimport {EditorCommands} from './editor-command';\r\nimport {SUPPORTED_ENCODINGS} from '@tart/core/lib/browser/supported-encodings';\r\nimport {QuickInputService} from '@tart/core/lib/common/quick-pick-service';\r\n\r\nexport const TEST = Command.toDefaultLocalizedCommand({\r\n  id: 'textEditor.commands.configEol',\r\n  category: 'EDITOR_CATEGORY',\r\n  label: 'Change End of Line Sequence'\r\n});\r\n\r\n@injectable()\r\nexport class EditorContribution implements FrontendApplicationContribution, KeybindingContribution, CommandContribution {\r\n\r\n  @inject(StatusBar) protected readonly statusBar: StatusBar;\r\n  @inject(EditorManager) protected readonly editorManager: EditorManager;\r\n  @inject(LanguageService) protected readonly languages: LanguageService;\r\n\r\n  @inject(ContextKeyService)\r\n  protected readonly contextKeyService: ContextKeyService;\r\n\r\n  @inject(QuickInputService) @optional()\r\n  protected readonly quickInputService: QuickInputService;\r\n  protected readonly toDisposeOnCurrentEditorChanged = new DisposableCollection();\r\n\r\n  onStart(): void {\r\n    this.initEditorContextKeys();\r\n\r\n    this.updateStatusBar();\r\n    this.editorManager.onCurrentEditorChanged(() => this.updateStatusBar());\r\n  }\r\n\r\n  registerCommands(commands: CommandRegistry) {\r\n    commands.registerCommand(EditorCommands.SHOW_ALL_OPENED_EDITORS, {\r\n      execute: () => this.quickInputService?.open('edt ')\r\n    });\r\n  }\r\n\r\n  registerKeybindings(keybindings: KeybindingRegistry) {\r\n    keybindings.registerKeybinding({\r\n      command: EditorCommands.SHOW_ALL_OPENED_EDITORS.id,\r\n      keybinding: 'ctrlcmd+k ctrlcmd+p'\r\n    });\r\n  }\r\n\r\n  protected initEditorContextKeys(): void {\r\n    const editorIsOpen = this.contextKeyService.createKey<boolean>('editorIsOpen', false);\r\n    const textCompareEditorVisible = this.contextKeyService.createKey<boolean>('textCompareEditor', false);\r\n    const updateContextKeys = () => {\r\n      const widgets = this.editorManager.all;\r\n      editorIsOpen.set(!!widgets.length);\r\n      textCompareEditorVisible.set(widgets.some(widget => DiffUris.isDiffUri(widget.editor.uri)));\r\n    }\r\n    updateContextKeys();\r\n    for (const widget of this.editorManager.all) {\r\n      widget.disposed.connect(updateContextKeys);\r\n    }\r\n    this.editorManager.onCreated(widget => {\r\n      updateContextKeys();\r\n      widget.disposed.connect(updateContextKeys);\r\n    });\r\n  }\r\n\r\n  protected updateStatusBar(): void {\r\n    this.toDisposeOnCurrentEditorChanged.dispose();\r\n\r\n    const widget = this.editorManager.currentEditor;\r\n    const editor = widget && widget.editor;\r\n    this.updateLanguageStatus(editor);\r\n    this.updateEncodingStatus(editor);\r\n    this.setCursorPositionStatus(editor);\r\n    if (editor) {\r\n      this.toDisposeOnCurrentEditorChanged.pushAll([\r\n        editor.onLanguageChanged(() => this.updateLanguageStatus(editor)),\r\n        editor.onEncodingChanged(() => this.updateEncodingStatus(editor)),\r\n        editor.onEncodingChanged(() => this.setCursorPositionStatus(editor)),\r\n      ]);\r\n    }\r\n  }\r\n\r\n  protected updateLanguageStatus(editor: TextEditor | undefined): void {\r\n    if (!editor) {\r\n      this.statusBar.removeElement('editor-status-language');\r\n      return;\r\n    }\r\n    const language = this.languages.getLanguage(editor.document.languageId);\r\n    const languageName = language ? language.name : '';\r\n    this.statusBar.setElement('editor-status-language', {\r\n      text: languageName,\r\n      alignment: StatusBarAlignment.RIGHT,\r\n      priority: 1,\r\n      command: EditorCommands.CHANGE_LANGUAGE.id,\r\n      tooltip: 'Select Language Mode'\r\n    });\r\n  }\r\n\r\n  protected updateEncodingStatus(editor: TextEditor | undefined): void {\r\n    if (!editor) {\r\n      this.statusBar.removeElement('editor-status-encoding');\r\n      return;\r\n    }\r\n    this.statusBar.setElement('editor-status-encoding', {\r\n      text: SUPPORTED_ENCODINGS[editor.getEncoding()].labelShort,\r\n      alignment: StatusBarAlignment.RIGHT,\r\n      priority: 10,\r\n      command: EditorCommands.CHANGE_ENCODING.id,\r\n      tooltip: 'Select Encoding'\r\n    });\r\n  }\r\n\r\n  protected setCursorPositionStatus(editor: TextEditor | undefined): void {\r\n    if (!editor) {\r\n      this.statusBar.removeElement('editor-status-cursor-position');\r\n      return;\r\n    }\r\n    const {cursor} = editor;\r\n    this.statusBar.setElement('editor-status-cursor-position', {\r\n      text: 'Ln {' + (cursor.line + 1) + '}, Col {' + editor.getVisibleColumn(cursor) + '}',\r\n      alignment: StatusBarAlignment.RIGHT,\r\n      priority: 100,\r\n      tooltip: EditorCommands.GOTO_LINE_COLUMN.label,\r\n      command: EditorCommands.GOTO_LINE_COLUMN.id\r\n    });\r\n  }\r\n}\r\n"]}