{"version":3,"sources":["browser/editor-widget-factory.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,aAAa,EAAC,MAAM,uCAAuC,CAAC;AACpE,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,EAAC,aAAa,EAAE,wBAAwB,EAAC,MAAM,YAAY,CAAC;AACnE,OAAO,EAAC,kBAAkB,EAAC,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAC,gBAAgB,EAAC,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAE7C,qBACa,mBAAoB,YAAW,aAAa;IAEvD,MAAM,CAAC,EAAE,SAAwB;IACjC,QAAQ,CAAC,EAAE,SAA0B;IAErC,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC;IAEhD,SAAS,CAAC,QAAQ,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAEtD,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;IAEtD,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,MAAM,GAAG,MAAM;IAMnD,YAAY,CAAC,OAAO,EAAE,wBAAwB,GAAG,OAAO,CAAC,YAAY,CAAC;cAKtD,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,wBAAwB,GAAG,OAAO,CAAC,YAAY,CAAC;cAiBjF,eAAe,CAAC,GAAG,EAAE,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC;IAMhE,OAAO,CAAC,SAAS;CAMlB","file":"../../src/browser/editor-widget-factory.d.ts","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport {WidgetFactory} from '@tart/core/lib/browser/widget-manager';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {LabelProvider, NavigatableWidgetOptions} from '@tart/core';\r\nimport {TextEditorProvider} from './editor';\r\nimport {SelectionService} from '@tart/core/lib/common';\r\nimport {EditorWidget} from './editor-widget';\r\n\r\n@injectable()\r\nexport class EditorWidgetFactory implements WidgetFactory {\r\n\r\n  static ID = 'code-editor-opener';\r\n  readonly id = EditorWidgetFactory.ID;\r\n  @inject(LabelProvider)\r\n  protected readonly labelProvider: LabelProvider;\r\n  @inject(TextEditorProvider)\r\n  protected readonly editorProvider: TextEditorProvider;\r\n  @inject(SelectionService)\r\n  protected readonly selectionService: SelectionService;\r\n\r\n  static createID(uri: URI, counter?: number): string {\r\n    return EditorWidgetFactory.ID\r\n        + `:${uri.toString()}`\r\n        + (counter !== undefined ? `:${counter}` : '');\r\n  }\r\n\r\n  createWidget(options: NavigatableWidgetOptions): Promise<EditorWidget> {\r\n    const uri = new URI(options.uri);\r\n    return this.createEditor(uri, options);\r\n  }\r\n\r\n  protected async createEditor(uri: URI, options?: NavigatableWidgetOptions): Promise<EditorWidget> {\r\n    const newEditor = await this.constructEditor(uri);\r\n\r\n    this.setLabels(newEditor, uri);\r\n    const labelListener = this.labelProvider.onDidChange(event => {\r\n      if (event.affects(uri)) {\r\n        this.setLabels(newEditor, uri);\r\n      }\r\n    });\r\n    newEditor.onDispose(() => labelListener.dispose());\r\n\r\n    newEditor.id = EditorWidgetFactory.createID(uri, options?.counter);\r\n\r\n    newEditor.title.closable = true;\r\n    return newEditor;\r\n  }\r\n\r\n  protected async constructEditor(uri: URI): Promise<EditorWidget> {\r\n    console.log('constructEditor');\r\n    const textEditor = await this.editorProvider(uri);\r\n    return new EditorWidget(textEditor, this.selectionService);\r\n  }\r\n\r\n  private setLabels(editor: EditorWidget, uri: URI): void {\r\n    editor.title.caption = uri.path.toString();\r\n    const icon = this.labelProvider.getIcon(uri);\r\n    editor.title.label = this.labelProvider.getName(uri);\r\n    editor.title.iconClass = icon + ' file-icon';\r\n  }\r\n}\r\n"]}