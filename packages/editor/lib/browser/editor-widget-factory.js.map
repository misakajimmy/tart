{"version":3,"sources":["browser/editor-widget-factory.ts"],"names":[],"mappings":"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","file":"../../src/browser/editor-widget-factory.js","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport {WidgetFactory} from '@tart/core/lib/browser/widget-manager';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {LabelProvider, NavigatableWidgetOptions} from '@tart/core';\r\nimport {TextEditorProvider} from './editor';\r\nimport {SelectionService} from '@tart/core/lib/common';\r\nimport {EditorWidget} from './editor-widget';\r\n\r\n@injectable()\r\nexport class EditorWidgetFactory implements WidgetFactory {\r\n\r\n  static ID = 'code-editor-opener';\r\n  readonly id = EditorWidgetFactory.ID;\r\n  @inject(LabelProvider)\r\n  protected readonly labelProvider: LabelProvider;\r\n  @inject(TextEditorProvider)\r\n  protected readonly editorProvider: TextEditorProvider;\r\n  @inject(SelectionService)\r\n  protected readonly selectionService: SelectionService;\r\n\r\n  static createID(uri: URI, counter?: number): string {\r\n    return EditorWidgetFactory.ID\r\n        + `:${uri.toString()}`\r\n        + (counter !== undefined ? `:${counter}` : '');\r\n  }\r\n\r\n  createWidget(options: NavigatableWidgetOptions): Promise<EditorWidget> {\r\n    const uri = new URI(options.uri);\r\n    return this.createEditor(uri, options);\r\n  }\r\n\r\n  protected async createEditor(uri: URI, options?: NavigatableWidgetOptions): Promise<EditorWidget> {\r\n    const newEditor = await this.constructEditor(uri);\r\n\r\n    this.setLabels(newEditor, uri);\r\n    const labelListener = this.labelProvider.onDidChange(event => {\r\n      if (event.affects(uri)) {\r\n        this.setLabels(newEditor, uri);\r\n      }\r\n    });\r\n    newEditor.onDispose(() => labelListener.dispose());\r\n\r\n    newEditor.id = EditorWidgetFactory.createID(uri, options?.counter);\r\n\r\n    newEditor.title.closable = true;\r\n    return newEditor;\r\n  }\r\n\r\n  protected async constructEditor(uri: URI): Promise<EditorWidget> {\r\n    console.log('constructEditor');\r\n    const textEditor = await this.editorProvider(uri);\r\n    return new EditorWidget(textEditor, this.selectionService);\r\n  }\r\n\r\n  private setLabels(editor: EditorWidget, uri: URI): void {\r\n    editor.title.caption = uri.path.toString();\r\n    const icon = this.labelProvider.getIcon(uri);\r\n    editor.title.label = this.labelProvider.getName(uri);\r\n    editor.title.iconClass = icon + ' file-icon';\r\n  }\r\n}\r\n"]}