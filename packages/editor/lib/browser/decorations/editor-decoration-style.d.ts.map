{"version":3,"sources":["browser/decorations/editor-decoration-style.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAClF,OAAO,EAAC,UAAU,EAAC,MAAM,uBAAuB,CAAC;AAGjD,qBAAa,qBAAsB,YAAW,UAAU;IAGlD,QAAQ,CAAC,QAAQ,EAAE,MAAM;gBAAhB,QAAQ,EAAE,MAAM,EACzB,aAAa,EAAE,CAAC,KAAK,EAAE,mBAAmB,KAAK,IAAI;IAKvD,IAAI,SAAS,IAAI,MAAM,CAEtB;IAED,OAAO,IAAI,IAAI;CAIhB;AAED,yBAAiB,qBAAqB,CAAC;IAErC,SAAgB,SAAS,CAAC,IAAI,EAAE,mBAAmB,EAAE,EAAE,EAAE,mBAAmB,GAAG,IAAI,CAKlF;IAED,SAAgB,gBAAgB,CAAC,SAAS,GAAE,WAAsD,GAAG,aAAa,GAAG,SAAS,CAW7H;IAID,SAAgB,UAAU,CAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,KAAK,EAAE,mBAAmB,KAAK,IAAI,EACrE,UAAU,GAAE,aAAa,GAAG,SAAuC,GAC3F,IAAI,CAWN;IAED,SAAgB,UAAU,CAAC,QAAQ,EAAE,MAAM,EAAE,UAAU,GAAE,aAAa,GAAG,SAAuC,GAAG,IAAI,CAYtH;CAEF","file":"../../../src/browser/decorations/editor-decoration-style.d.ts","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2018 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\nimport {Disposable} from '@tart/core/lib/common';\r\n\r\n\r\nexport class EditorDecorationStyle implements Disposable {\r\n\r\n  constructor(\r\n      readonly selector: string,\r\n      styleProvider: (style: CSSStyleDeclaration) => void,\r\n  ) {\r\n    EditorDecorationStyle.createRule(selector, styleProvider);\r\n  }\r\n\r\n  get className(): string {\r\n    return this.selector.split('::')[0];\r\n  }\r\n\r\n  dispose(): void {\r\n    EditorDecorationStyle.deleteRule(this.selector);\r\n  }\r\n\r\n}\r\n\r\nexport namespace EditorDecorationStyle {\r\n\r\n  export function copyStyle(from: CSSStyleDeclaration, to: CSSStyleDeclaration): void {\r\n    Object.keys(from).forEach(key => {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (<any>to)[key] = (<any>from)[key];\r\n    });\r\n  }\r\n\r\n  export function createStyleSheet(container: HTMLElement = document.getElementsByTagName('head')[0]): CSSStyleSheet | undefined {\r\n    if (!container) {\r\n      return undefined;\r\n    }\r\n    const style = document.createElement('style');\r\n    style.id = 'editorDecorationsStyle';\r\n    style.type = 'text/css';\r\n    style.media = 'screen';\r\n    style.appendChild(document.createTextNode('')); // trick for webkit\r\n    container.appendChild(style);\r\n    return <CSSStyleSheet>style.sheet;\r\n  }\r\n\r\n  const editorDecorationsStyleSheet: CSSStyleSheet | undefined = createStyleSheet();\r\n\r\n  export function createRule(selector: string, styleProvider: (style: CSSStyleDeclaration) => void,\r\n                             styleSheet: CSSStyleSheet | undefined = editorDecorationsStyleSheet\r\n  ): void {\r\n    if (!styleSheet) {\r\n      return;\r\n    }\r\n    const index = styleSheet.insertRule('.' + selector + '{}', 0);\r\n    const rules = styleSheet.cssRules || styleSheet.rules;\r\n    const rule = rules[index];\r\n    if (rule && rule.type === CSSRule.STYLE_RULE) {\r\n      const styleRule = rule as CSSStyleRule;\r\n      styleProvider(styleRule.style);\r\n    }\r\n  }\r\n\r\n  export function deleteRule(selector: string, styleSheet: CSSStyleSheet | undefined = editorDecorationsStyleSheet): void {\r\n    if (!styleSheet) {\r\n      return;\r\n    }\r\n    const rules = styleSheet.cssRules || styleSheet.rules;\r\n    for (let i = 0; i < rules.length; i++) {\r\n      if (rules[i].type === CSSRule.STYLE_RULE) {\r\n        if ((rules[i] as CSSStyleRule).selectorText === selector) {\r\n          styleSheet.removeRule(i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"]}