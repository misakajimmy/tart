{"version":3,"sources":["browser/monaco-editor-provider.ts"],"names":[],"mappings":"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","file":"../../src/browser/monaco-editor-provider.js","sourcesContent":["import {inject, injectable, named} from 'inversify';\r\nimport {MonacoEditorService} from './monaco-editor-service';\r\nimport {MonacoEditor, MonacoEditorServices} from './monaco-editor';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {MonacoCommandServiceFactory} from './monaco-command-service';\r\nimport {ContributionProvider, deepClone, Disposable, DisposableCollection} from '@tart/core/lib/common';\r\nimport {DiffUris, FormatType, KeybindingRegistry, open, OpenerService, WidgetOpenerOptions} from '@tart/core';\r\nimport {MonacoTextModelService} from './monaco-text-model-service';\r\nimport {MonacoContextMenuService} from './monaco-context-menu';\r\nimport {MonacoBulkEditService} from './monaco-bulk-edit-service';\r\nimport {HttpOpenHandlerOptions} from '@tart/core/lib/browser/http-open-handler';\r\nimport {DiffNavigator, EditorPreferenceChange, EditorPreferences, TextEditor} from '@tart/editor';\r\nimport {MonacoQuickInputImplementation} from './monaco-quick-input-service';\r\nimport {MonacoResolvedKeybinding} from './monaco-resolved-keybinding';\r\nimport {MonacoEditorModel, WillSaveMonacoModelEvent} from './monaco-editor-model';\r\nimport {TextDocumentSaveReason} from 'vscode-languageserver-protocol';\r\nimport {MonacoDiffEditor} from './monaco-diff-editor';\r\nimport {MonacoDiffNavigatorFactory} from './monaco-diff-navigator-factory';\r\nimport {MonacoToProtocolConverter} from './monaco-to-protocol-converter';\r\nimport {ProtocolToMonacoConverter} from './protocol-to-monaco-converter';\r\nimport IEditorOverrideServices = monaco.editor.IEditorOverrideServices;\r\n\r\nexport const MonacoEditorFactory = Symbol('MonacoEditorFactory');\r\n\r\nexport interface MonacoEditorFactory {\r\n    readonly scheme: string;\r\n\r\n    create(model: MonacoEditorModel, defaultOptions: MonacoEditor.IOptions, defaultOverrides: IEditorOverrideServices): MonacoEditor;\r\n}\r\n\r\n\r\n@injectable()\r\nexport class MonacoEditorProvider {\r\n    @inject(ContributionProvider)\r\n    @named(MonacoEditorFactory)\r\n    protected readonly factories: ContributionProvider<MonacoEditorFactory>;\r\n\r\n    @inject(MonacoBulkEditService)\r\n    protected readonly bulkEditService: MonacoBulkEditService;\r\n\r\n    @inject(MonacoEditorServices)\r\n    protected readonly services: MonacoEditorServices;\r\n\r\n    @inject(OpenerService)\r\n    protected readonly openerService: OpenerService;\r\n\r\n    @inject(MonacoQuickInputImplementation)\r\n    protected readonly quickInputService: MonacoQuickInputImplementation;\r\n\r\n    @inject(KeybindingRegistry)\r\n    protected readonly keybindingRegistry: KeybindingRegistry;\r\n\r\n    constructor(\r\n        @inject(MonacoEditorService) protected readonly codeEditorService: MonacoEditorService,\r\n        @inject(MonacoTextModelService) protected readonly textModelService: MonacoTextModelService,\r\n        @inject(MonacoContextMenuService) protected readonly contextMenuService: MonacoContextMenuService,\r\n        @inject(MonacoToProtocolConverter) protected readonly m2p: MonacoToProtocolConverter,\r\n        @inject(ProtocolToMonacoConverter) protected readonly p2m: ProtocolToMonacoConverter,\r\n        @inject(MonacoDiffNavigatorFactory) protected readonly diffNavigatorFactory: MonacoDiffNavigatorFactory,\r\n        @inject(EditorPreferences) protected readonly editorPreferences: EditorPreferences,\r\n        @inject(MonacoCommandServiceFactory) protected readonly commandServiceFactory: MonacoCommandServiceFactory,\r\n        @inject(monaco.contextKeyService.ContextKeyService) protected readonly contextKeyService: monaco.contextKeyService.ContextKeyService\r\n    ) {\r\n        const staticServices = monaco.services.StaticServices;\r\n        const init = staticServices.init.bind(monaco.services.StaticServices);\r\n\r\n        monaco.services.StaticServices.init = o => {\r\n            const result = init(o);\r\n            result[0].set(monaco.services.ICodeEditorService, codeEditorService);\r\n            return result;\r\n        };\r\n    }\r\n\r\n    protected _current: MonacoEditor | undefined;\r\n\r\n    /**\r\n     * Returns the last focused MonacoEditor.\r\n     * It takes into account inline editors as well.\r\n     * If you are interested only in standalone editors then use `MonacoEditor.getCurrent(EditorManager)`\r\n     */\r\n    get current(): MonacoEditor | undefined {\r\n        return this._current;\r\n    }\r\n\r\n    protected get preferencePrefixes(): string[] {\r\n        return ['editor.'];\r\n    }\r\n\r\n    protected get diffPreferencePrefixes(): string[] {\r\n        return [...this.preferencePrefixes, 'diffEditor.'];\r\n    }\r\n\r\n    async get(uri: URI): Promise<MonacoEditor> {\r\n        await this.editorPreferences.ready;\r\n        return this.doCreateEditor(uri, (override, toDispose) => this.createEditor(uri, override, toDispose));\r\n    }\r\n\r\n    getDiffNavigator(editor: TextEditor): DiffNavigator {\r\n        if (editor instanceof MonacoDiffEditor) {\r\n            return editor.diffNavigator;\r\n        }\r\n        return MonacoDiffNavigatorFactory.nullNavigator;\r\n    }\r\n\r\n    protected async doCreateEditor(uri: URI, factory: (override: IEditorOverrideServices, toDispose: DisposableCollection) => Promise<MonacoEditor>): Promise<MonacoEditor> {\r\n        const commandService = this.commandServiceFactory();\r\n        const domNode = document.createElement('div');\r\n        const contextKeyService = this.contextKeyService.createScoped(domNode);\r\n        const {codeEditorService, textModelService, contextMenuService} = this;\r\n        const IWorkspaceEditService = this.bulkEditService;\r\n        const toDispose = new DisposableCollection(commandService);\r\n        const openerService = new monaco.services.OpenerService(codeEditorService, commandService);\r\n        openerService.registerOpener({\r\n            open: (u, options) => this.interceptOpen(u, options)\r\n        });\r\n        const editor = await factory({\r\n            codeEditorService,\r\n            textModelService,\r\n            contextMenuService,\r\n            commandService,\r\n            IWorkspaceEditService,\r\n            contextKeyService,\r\n            openerService,\r\n            quickInputService: this.quickInputService\r\n        }, toDispose);\r\n        editor.onDispose(() => toDispose.dispose());\r\n\r\n        this.suppressMonacoKeybindingListener(editor);\r\n        this.injectKeybindingResolver(editor);\r\n\r\n        const standaloneCommandService = new monaco.services.StandaloneCommandService(editor.instantiationService);\r\n        commandService.setDelegate(standaloneCommandService);\r\n        toDispose.push(this.installReferencesController(editor));\r\n\r\n        toDispose.push(editor.onFocusChanged(focused => {\r\n            if (focused) {\r\n                this._current = editor;\r\n            }\r\n        }));\r\n        toDispose.push(Disposable.create(() => {\r\n            if (this._current === editor) {\r\n                this._current = undefined;\r\n            }\r\n        }));\r\n\r\n        return editor;\r\n    }\r\n\r\n    protected injectKeybindingResolver(editor: MonacoEditor): void {\r\n        const keybindingService = editor.getControl()._standaloneKeybindingService;\r\n        keybindingService.resolveKeybinding = keybinding => [new MonacoResolvedKeybinding(MonacoResolvedKeybinding.keySequence(keybinding), this.keybindingRegistry)];\r\n        keybindingService.resolveKeyboardEvent = keyboardEvent => {\r\n            const keybinding = new monaco.keybindings.SimpleKeybinding(\r\n                keyboardEvent.ctrlKey,\r\n                keyboardEvent.shiftKey,\r\n                keyboardEvent.altKey,\r\n                keyboardEvent.metaKey,\r\n                keyboardEvent.keyCode\r\n            ).toChord();\r\n            return new MonacoResolvedKeybinding(MonacoResolvedKeybinding.keySequence(keybinding), this.keybindingRegistry);\r\n        };\r\n    }\r\n\r\n    protected createEditor(uri: URI, override: IEditorOverrideServices, toDispose: DisposableCollection): Promise<MonacoEditor> {\r\n        if (DiffUris.isDiffUri(uri)) {\r\n            return this.createMonacoDiffEditor(uri, override, toDispose);\r\n        }\r\n        return this.createMonacoEditor(uri, override, toDispose);\r\n    }\r\n\r\n    protected async createMonacoEditor(uri: URI, override: IEditorOverrideServices, toDispose: DisposableCollection): Promise<MonacoEditor> {\r\n        const model = await this.getModel(uri, toDispose);\r\n        const options = this.createMonacoEditorOptions(model);\r\n        const factory = this.factories.getContributions().find(({scheme}) => uri.scheme === scheme);\r\n        const editor = factory\r\n            ? factory.create(model, options, override)\r\n            : new MonacoEditor(uri, model, document.createElement('div'), this.services, options, override);\r\n        toDispose.push(this.editorPreferences.onPreferenceChanged(event => {\r\n            if (event.affects(uri.toString(), model.languageId)) {\r\n                this.updateMonacoEditorOptions(editor, event);\r\n            }\r\n        }));\r\n        toDispose.push(editor.onLanguageChanged(() => this.updateMonacoEditorOptions(editor)));\r\n        editor.document.onWillSaveModel(event => event.waitUntil(this.formatOnSave(editor, event)));\r\n        return editor;\r\n    }\r\n\r\n    protected createMonacoEditorOptions(model: MonacoEditorModel): MonacoEditor.IOptions {\r\n        const options = this.createOptions(this.preferencePrefixes, model.uri, model.languageId);\r\n        options.model = model.textEditorModel;\r\n        options.readOnly = model.readOnly;\r\n        options.lineNumbersMinChars = model.lineNumbersMinChars;\r\n        return options;\r\n    }\r\n\r\n    protected updateMonacoEditorOptions(editor: MonacoEditor, event?: EditorPreferenceChange): void {\r\n        if (event) {\r\n            const preferenceName = event.preferenceName;\r\n            const overrideIdentifier = editor.document.languageId;\r\n            const newValue = this.editorPreferences.get({\r\n                preferenceName,\r\n                overrideIdentifier\r\n            }, undefined, editor.uri.toString());\r\n            editor.getControl().updateOptions(this.setOption(preferenceName, newValue, this.preferencePrefixes));\r\n        } else {\r\n            const options = this.createMonacoEditorOptions(editor.document);\r\n            delete options.model;\r\n            editor.getControl().updateOptions(options);\r\n        }\r\n    }\r\n\r\n    protected shouldFormat(editor: MonacoEditor, event: WillSaveMonacoModelEvent): boolean {\r\n        if (event.reason !== TextDocumentSaveReason.Manual) {\r\n            return false;\r\n        }\r\n        if (event.options?.formatType) {\r\n            switch (event.options.formatType) {\r\n                case FormatType.ON:\r\n                    return true;\r\n                case FormatType.OFF:\r\n                    return false;\r\n                case FormatType.DIRTY:\r\n                    return editor.document.dirty;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    protected async formatOnSave(editor: MonacoEditor, event: WillSaveMonacoModelEvent): Promise<monaco.editor.IIdentifiedSingleEditOperation[]> {\r\n        if (!this.shouldFormat(editor, event)) {\r\n            return [];\r\n        }\r\n        const overrideIdentifier = editor.document.languageId;\r\n        const uri = editor.uri.toString();\r\n        const formatOnSave = this.editorPreferences.get({\r\n            preferenceName: 'editor.formatOnSave',\r\n            overrideIdentifier\r\n        }, undefined, uri)!;\r\n        if (formatOnSave) {\r\n            const formatOnSaveTimeout = this.editorPreferences.get({\r\n                preferenceName: 'editor.formatOnSaveTimeout',\r\n                overrideIdentifier\r\n            }, undefined, uri)!;\r\n            await Promise.race([\r\n                new Promise((_, reject) => setTimeout(() => reject(new Error(`Aborted format on save after ${formatOnSaveTimeout}ms`)), formatOnSaveTimeout)),\r\n                editor.runAction('editor.action.formatDocument')\r\n            ]);\r\n        }\r\n        // const shouldRemoveWhiteSpace = this.filePreferences.get({ preferenceName: 'files.trimTrailingWhitespace', overrideIdentifier }, undefined, uri);\r\n        // if (shouldRemoveWhiteSpace) {\r\n        //     await editor.runAction('editor.action.trimTrailingWhitespace');\r\n        // }\r\n        return [];\r\n    }\r\n\r\n    protected async getModel(uri: URI, toDispose: DisposableCollection): Promise<MonacoEditorModel> {\r\n        const reference = await this.textModelService.createModelReference(uri);\r\n        // if document is invalid makes sure that all events from underlying resource are processed before throwing invalid model\r\n        if (!reference.object.valid) {\r\n            await reference.object.sync();\r\n        }\r\n        if (!reference.object.valid) {\r\n            reference.dispose();\r\n            throw Object.assign(new Error(`'${uri.toString()}' is invalid`), {code: 'MODEL_IS_INVALID'});\r\n        }\r\n        toDispose.push(reference);\r\n        return reference.object;\r\n    }\r\n\r\n    protected async createMonacoDiffEditor(uri: URI, override: IEditorOverrideServices, toDispose: DisposableCollection): Promise<MonacoDiffEditor> {\r\n        const [original, modified] = DiffUris.decode(uri);\r\n\r\n        const [originalModel, modifiedModel] = await Promise.all([this.getModel(original, toDispose), this.getModel(modified, toDispose)]);\r\n\r\n        const options = this.createMonacoDiffEditorOptions(originalModel, modifiedModel);\r\n        const editor = new MonacoDiffEditor(\r\n            uri,\r\n            document.createElement('div'),\r\n            originalModel, modifiedModel,\r\n            this.services,\r\n            this.diffNavigatorFactory,\r\n            options,\r\n            override);\r\n        toDispose.push(this.editorPreferences.onPreferenceChanged(event => {\r\n            const originalFileUri = original.withoutQuery().withScheme('file').toString();\r\n            if (event.affects(originalFileUri, editor.document.languageId)) {\r\n                this.updateMonacoDiffEditorOptions(editor, event, originalFileUri);\r\n            }\r\n        }));\r\n        toDispose.push(editor.onLanguageChanged(() => this.updateMonacoDiffEditorOptions(editor)));\r\n        return editor;\r\n    }\r\n\r\n    protected createMonacoDiffEditorOptions(original: MonacoEditorModel, modified: MonacoEditorModel): MonacoDiffEditor.IOptions {\r\n        const options = this.createOptions(this.diffPreferencePrefixes, modified.uri, modified.languageId);\r\n        options.originalEditable = !original.readOnly;\r\n        options.readOnly = modified.readOnly;\r\n        return options;\r\n    }\r\n\r\n    protected updateMonacoDiffEditorOptions(editor: MonacoDiffEditor, event?: EditorPreferenceChange, resourceUri?: string): void {\r\n        if (event) {\r\n            const preferenceName = event.preferenceName;\r\n            const overrideIdentifier = editor.document.languageId;\r\n            const newValue = this.editorPreferences.get({preferenceName, overrideIdentifier}, undefined, resourceUri);\r\n            editor.diffEditor.updateOptions(this.setOption(preferenceName, newValue, this.diffPreferencePrefixes));\r\n        } else {\r\n            const options = this.createMonacoDiffEditorOptions(editor.originalModel, editor.modifiedModel);\r\n            editor.diffEditor.updateOptions(options);\r\n        }\r\n    }\r\n\r\n\r\n    /** @deprecated always pass a language as an overrideIdentifier */\r\n    protected createOptions(prefixes: string[], uri: string): { [name: string]: any };\r\n    protected createOptions(prefixes: string[], uri: string, overrideIdentifier: string): { [name: string]: any };\r\n    protected createOptions(prefixes: string[], uri: string, overrideIdentifier?: string): { [name: string]: any } {\r\n        return Object.keys(this.editorPreferences).reduce((options, preferenceName) => {\r\n            const value = (<any>this.editorPreferences).get({preferenceName, overrideIdentifier}, undefined, uri);\r\n            return this.setOption(preferenceName, deepClone(value), prefixes, options);\r\n        }, {});\r\n    }\r\n\r\n    protected setOption(preferenceName: string, value: any, prefixes: string[], options: { [name: string]: any } = {}): {\r\n        [name: string]: any;\r\n    } {\r\n        const optionName = this.toOptionName(preferenceName, prefixes);\r\n        this.doSetOption(options, value, optionName.split('.'));\r\n        return options;\r\n    }\r\n\r\n    protected toOptionName(preferenceName: string, prefixes: string[]): string {\r\n        for (const prefix of prefixes) {\r\n            if (preferenceName.startsWith(prefix)) {\r\n                return preferenceName.substr(prefix.length);\r\n            }\r\n        }\r\n        return preferenceName;\r\n    }\r\n\r\n    protected doSetOption(obj: { [name: string]: any }, value: any, names: string[], idx: number = 0): void {\r\n        const name = names[idx];\r\n        if (!obj[name]) {\r\n            if (names.length > (idx + 1)) {\r\n                obj[name] = {};\r\n                this.doSetOption(obj[name], value, names, (idx + 1));\r\n            } else {\r\n                obj[name] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Suppresses Monaco keydown listener to avoid triggering default Monaco keybindings\r\n     * if they are overridden by a user. Monaco keybindings should be registered as Wm keybindings\r\n     * to allow a user to customize them.\r\n     */\r\n    protected suppressMonacoKeybindingListener(editor: MonacoEditor): void {\r\n        let keydownListener: monaco.IDisposable | undefined;\r\n        const keybindingService = editor.getControl()._standaloneKeybindingService;\r\n        for (const listener of keybindingService._store._toDispose) {\r\n            if ('_type' in listener && listener['_type'] === 'keydown') {\r\n                keydownListener = listener;\r\n                break;\r\n            }\r\n        }\r\n        if (keydownListener) {\r\n            keydownListener.dispose();\r\n        }\r\n    }\r\n\r\n    protected installReferencesController(editor: MonacoEditor): Disposable {\r\n        const control = editor.getControl();\r\n        const referencesController = control._contributions['editor.contrib.referencesController'];\r\n        const originalGotoReference = referencesController._gotoReference;\r\n        referencesController._gotoReference = async ref => {\r\n            if (referencesController._widget) {\r\n                referencesController._widget.hide();\r\n            }\r\n\r\n            referencesController._ignoreModelChangeEvent = true;\r\n            const range = monaco.Range.lift(ref.range).collapseToStart();\r\n\r\n            // preserve the model that it does not get disposed if an editor preview replaces an editor\r\n            const model = referencesController._model;\r\n            referencesController._model = undefined;\r\n\r\n            referencesController._editorService.openCodeEditor({\r\n                resource: ref.uri,\r\n                options: {selection: range}\r\n            }, control).then(openedEditor => {\r\n                referencesController._model = model;\r\n                referencesController._ignoreModelChangeEvent = false;\r\n                if (!openedEditor) {\r\n                    referencesController.closeWidget();\r\n                    return;\r\n                }\r\n                if (openedEditor !== control) {\r\n                    // preserve the model that it does not get disposed in `referencesController.closeWidget`\r\n                    referencesController._model = undefined;\r\n\r\n                    // to preserve the active editor\r\n                    const focus = control.focus;\r\n                    control.focus = () => {\r\n                    };\r\n                    referencesController.closeWidget();\r\n                    control.focus = focus;\r\n\r\n                    const modelPromise = Promise.resolve(model) as any;\r\n                    modelPromise.cancel = () => {\r\n                    };\r\n                    openedEditor._contributions['editor.contrib.referencesController'].toggleWidget(range, modelPromise, true);\r\n                    return;\r\n                }\r\n\r\n                if (referencesController._widget) {\r\n                    referencesController._widget.show(range);\r\n                    referencesController._widget.focusOnReferenceTree();\r\n                }\r\n\r\n            }, (e: any) => {\r\n                referencesController._ignoreModelChangeEvent = false;\r\n                monaco.error.onUnexpectedError(e);\r\n            });\r\n        };\r\n        return Disposable.create(() => referencesController._gotoReference = originalGotoReference);\r\n    }\r\n\r\n    /**\r\n     * Intercept internal Monaco open calls and delegate to OpenerService.\r\n     */\r\n    protected async interceptOpen(monacoUri: monaco.Uri | string, monacoOptions?: monaco.services.OpenInternalOptions | monaco.services.OpenExternalOptions): Promise<boolean> {\r\n        let options = undefined;\r\n        if (monacoOptions) {\r\n            if ('openToSide' in monacoOptions && monacoOptions.openToSide) {\r\n                options = Object.assign(options || {}, <WidgetOpenerOptions>{\r\n                    widgetOptions: {\r\n                        mode: 'split-right'\r\n                    }\r\n                });\r\n            }\r\n            if ('openExternal' in monacoOptions && monacoOptions.openExternal) {\r\n                options = Object.assign(options || {}, <HttpOpenHandlerOptions>{\r\n                    openExternal: true\r\n                });\r\n            }\r\n        }\r\n        const uri = new URI(monacoUri.toString());\r\n        try {\r\n            await open(this.openerService, uri, options);\r\n            return true;\r\n        } catch (e) {\r\n            console.error(`Fail to open '${uri.toString()}':`, e);\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"]}