{"version":3,"sources":["browser/monaco-text-model-service.ts"],"names":[],"mappings":"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","file":"../../src/browser/monaco-text-model-service.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2018 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {inject, injectable, named, postConstruct} from 'inversify';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {\r\n    ContributionProvider,\r\n    Event,\r\n    MaybePromise,\r\n    ReferenceCollection,\r\n    Resource,\r\n    ResourceProvider,\r\n} from '@tart/core/lib/common';\r\nimport {EditorPreferenceChange, EditorPreferences} from '@tart/editor';\r\nimport {MonacoEditorModel} from './monaco-editor-model';\r\nimport {MonacoToProtocolConverter} from './monaco-to-protocol-converter';\r\nimport {ProtocolToMonacoConverter} from './protocol-to-monaco-converter';\r\n// import { ApplicationServer } from '@wm/core/lib/common/application-protocol';\r\nimport {Deferred} from '@tart/core/lib/common/promise-util';\r\nimport IReference = monaco.editor.IReference;\r\n\r\nexport {IReference};\r\n\r\nexport const MonacoEditorModelFactory = Symbol('MonacoEditorModelFactory');\r\n\r\nexport interface MonacoEditorModelFactory {\r\n\r\n    readonly scheme: string;\r\n\r\n    createModel(\r\n        resource: Resource\r\n    ): MaybePromise<MonacoEditorModel>;\r\n\r\n}\r\n\r\n@injectable()\r\nexport class MonacoTextModelService implements monaco.editor.ITextModelService {\r\n\r\n    protected readonly _ready = new Deferred<void>();\r\n    /**\r\n     * This component does some asynchronous work before being fully initialized.\r\n     */\r\n    readonly ready: Promise<void> = this._ready.promise;\r\n\r\n    protected readonly _models = new ReferenceCollection<string, MonacoEditorModel>(\r\n        uri => this.loadModel(new URI(uri))\r\n    );\r\n\r\n    @inject(ResourceProvider)\r\n    protected readonly resourceProvider: ResourceProvider;\r\n\r\n    @inject(EditorPreferences)\r\n    protected readonly editorPreferences: EditorPreferences;\r\n\r\n    @inject(MonacoToProtocolConverter)\r\n    protected readonly m2p: MonacoToProtocolConverter;\r\n\r\n    @inject(ProtocolToMonacoConverter)\r\n    protected readonly p2m: ProtocolToMonacoConverter;\r\n\r\n    @inject(ContributionProvider)\r\n    @named(MonacoEditorModelFactory)\r\n    protected readonly factories: ContributionProvider<MonacoEditorModelFactory>;\r\n    protected readonly modelOptions: { [name: string]: (keyof monaco.editor.ITextModelUpdateOptions | undefined) } = {\r\n        'editor.tabSize': 'tabSize',\r\n        'editor.insertSpaces': 'insertSpaces'\r\n    };\r\n\r\n    get models(): MonacoEditorModel[] {\r\n        return this._models.values();\r\n    }\r\n\r\n    get onDidCreate(): Event<MonacoEditorModel> {\r\n        return this._models.onDidCreate;\r\n    }\r\n\r\n    @postConstruct()\r\n    public init(): void {\r\n        let isWindowsBackend = false;\r\n\r\n        // this.applicationServer.getBackendOS().then(os => {\r\n        //     isWindowsBackend = os === OS.Type.Windows;\r\n        // }, () => undefined).then(() => this._ready.resolve());\r\n\r\n        this._ready.resolve();\r\n\r\n        const staticServices = monaco.services.StaticServices;\r\n\r\n        if (staticServices.resourcePropertiesService) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const original = staticServices.resourcePropertiesService.get() as any;\r\n            original.getEOL = () => {\r\n                const eol = this.editorPreferences['files.eol'];\r\n                if (eol) {\r\n                    if (eol !== 'auto') {\r\n                        return eol;\r\n                    }\r\n                }\r\n                return isWindowsBackend ? '\\r\\n' : '\\n';\r\n            };\r\n        }\r\n    }\r\n\r\n    get(uri: string): MonacoEditorModel | undefined {\r\n        return this._models.get(uri);\r\n    }\r\n\r\n    createModelReference(raw: monaco.Uri | URI): Promise<IReference<MonacoEditorModel>> {\r\n        return this._models.acquire(raw.toString());\r\n    }\r\n\r\n    registerTextModelContentProvider(scheme: string, provider: monaco.editor.ITextModelContentProvider): monaco.IDisposable {\r\n        return {\r\n            dispose(): void {\r\n                // no-op\r\n            }\r\n        };\r\n    }\r\n\r\n    protected async loadModel(uri: URI): Promise<MonacoEditorModel> {\r\n        await this.ready;\r\n        await this.editorPreferences.ready;\r\n        const resource = await this.resourceProvider(uri);\r\n        const model = await (await this.createModel(resource)).load();\r\n        this.updateModel(model);\r\n        model.textEditorModel.onDidChangeLanguage(() => this.updateModel(model));\r\n        const disposable = this.editorPreferences.onPreferenceChanged(change => this.updateModel(model, change));\r\n        model.onDispose(() => disposable.dispose());\r\n        return model;\r\n    }\r\n\r\n    protected createModel(resource: Resource): MaybePromise<MonacoEditorModel> {\r\n        const factory = this.factories.getContributions().find(({scheme}) => resource.uri.scheme === scheme);\r\n        return factory ? factory.createModel(resource) : new MonacoEditorModel(resource, this.m2p, this.p2m, this.editorPreferences);\r\n    }\r\n\r\n    protected updateModel(model: MonacoEditorModel, change?: EditorPreferenceChange): void {\r\n        if (change) {\r\n            if (!change.affects(model.uri, model.languageId)) {\r\n                return;\r\n            }\r\n            if (change.preferenceName === 'editor.autoSave') {\r\n                model.autoSave = this.editorPreferences.get('editor.autoSave', undefined, model.uri);\r\n            }\r\n            if (change.preferenceName === 'editor.autoSaveDelay') {\r\n                model.autoSaveDelay = this.editorPreferences.get('editor.autoSaveDelay', undefined, model.uri);\r\n            }\r\n            const modelOption = this.modelOptions[change.preferenceName];\r\n            if (modelOption) {\r\n                const options: monaco.editor.ITextModelUpdateOptions = {};\r\n                // @ts-ignore\r\n                options[modelOption] = change.newValue as any;\r\n                model.textEditorModel.updateOptions(options);\r\n            }\r\n        } else {\r\n            model.autoSave = this.editorPreferences.get('editor.autoSave', undefined, model.uri);\r\n            model.autoSaveDelay = this.editorPreferences.get('editor.autoSaveDelay', undefined, model.uri);\r\n            model.textEditorModel.updateOptions(this.getModelOptions(model));\r\n        }\r\n    }\r\n\r\n    /** @deprecated pass MonacoEditorModel instead  */\r\n    protected getModelOptions(uri: string): monaco.editor.ITextModelUpdateOptions;\r\n\r\n    protected getModelOptions(model: MonacoEditorModel): monaco.editor.ITextModelUpdateOptions;\r\n\r\n    protected getModelOptions(arg: string | MonacoEditorModel): monaco.editor.ITextModelUpdateOptions {\r\n        const uri = typeof arg === 'string' ? arg : arg.uri;\r\n        const overrideIdentifier = typeof arg === 'string' ? undefined : arg.languageId;\r\n        return {\r\n            tabSize: this.editorPreferences.get({preferenceName: 'editor.tabSize', overrideIdentifier}, undefined, uri),\r\n            insertSpaces: this.editorPreferences.get({\r\n                preferenceName: 'editor.insertSpaces',\r\n                overrideIdentifier\r\n            }, undefined, uri)\r\n        };\r\n    }\r\n}\r\n"]}