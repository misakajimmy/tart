{"version":3,"sources":["browser/monaco-languages.ts"],"names":[],"mappings":"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","file":"../../src/browser/monaco-languages.js","sourcesContent":["import {WorkspaceSymbolParams} from 'vscode-languageserver-protocol';\r\nimport {CancellationToken, Disposable, MaybePromise, Mutable} from '@tart/core/lib/common';\r\nimport {Diagnostic, SymbolInformation} from 'vscode-languageserver-types';\r\nimport {inject, injectable, postConstruct} from 'inversify';\r\nimport {Language, LanguageService} from '@tart/core/lib/browser/language-service';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {MonacoDiagnosticCollection} from './monaco-diagnostic-collection';\r\nimport {ProtocolToMonacoConverter} from './protocol-to-monaco-converter';\r\n\r\nexport interface WorkspaceSymbolProvider {\r\n    provideWorkspaceSymbols(params: WorkspaceSymbolParams, token: CancellationToken): MaybePromise<SymbolInformation[] | undefined>;\r\n\r\n    resolveWorkspaceSymbol?(symbol: SymbolInformation, token: CancellationToken): Thenable<SymbolInformation | undefined>\r\n}\r\n\r\n@injectable()\r\nexport class MonacoLanguages implements LanguageService {\r\n\r\n    readonly workspaceSymbolProviders: WorkspaceSymbolProvider[] = [];\r\n\r\n    protected readonly makers = new Map<string, MonacoDiagnosticCollection>();\r\n\r\n    // @inject(ProblemManager) protected readonly problemManager: ProblemManager;\r\n    @inject(ProtocolToMonacoConverter) protected readonly p2m: ProtocolToMonacoConverter;\r\n\r\n    get languages(): Language[] {\r\n        return [...this.mergeLanguages(monaco.languages.getLanguages()).values()];\r\n    }\r\n\r\n    registerWorkspaceSymbolProvider(provider: WorkspaceSymbolProvider): Disposable {\r\n        this.workspaceSymbolProviders.push(provider);\r\n        return Disposable.create(() => {\r\n            const index = this.workspaceSymbolProviders.indexOf(provider);\r\n            if (index !== -1) {\r\n                this.workspaceSymbolProviders.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    getLanguage(languageId: string): Language | undefined {\r\n        return this.mergeLanguages(monaco.languages.getLanguages().filter(language => language.id === languageId)).get(languageId);\r\n    }\r\n\r\n    @postConstruct()\r\n    protected init(): void {\r\n        // for (const uri of this.problemManager.getUris()) {\r\n        //     this.updateMarkers(new URI(uri));\r\n        // }\r\n        // this.problemManager.onDidChangeMarkers(uri => this.updateMarkers(uri));\r\n    }\r\n\r\n    protected updateMarkers(uri: URI): void {\r\n        const uriString = uri.toString();\r\n        const owners = new Map<string, Diagnostic[]>();\r\n        // for (const marker of this.problemManager.findMarkers({ uri })) {\r\n        //     const diagnostics = owners.get(marker.owner) || [];\r\n        //     diagnostics.push(marker.data);\r\n        //     owners.set(marker.owner, diagnostics);\r\n        // }\r\n        const toClean = new Set<string>(this.makers.keys());\r\n        for (const [owner, diagnostics] of owners) {\r\n            toClean.delete(owner);\r\n            const collection = this.makers.get(owner) || new MonacoDiagnosticCollection(owner, this.p2m);\r\n            collection.set(uriString, diagnostics);\r\n            this.makers.set(owner, collection);\r\n        }\r\n        for (const owner of toClean) {\r\n            const collection = this.makers.get(owner);\r\n            if (collection) {\r\n                collection.set(uriString, []);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected mergeLanguages(registered: monaco.languages.ILanguageExtensionPoint[]): Map<string, Mutable<Language>> {\r\n        const languages = new Map<string, Mutable<Language>>();\r\n        for (const {id, aliases, extensions, filenames} of registered) {\r\n            const merged = languages.get(id) || {\r\n                id,\r\n                name: '',\r\n                extensions: new Set(),\r\n                filenames: new Set()\r\n            };\r\n            if (!merged.name && aliases && aliases.length) {\r\n                merged.name = aliases[0];\r\n            }\r\n            if (extensions && extensions.length) {\r\n                for (const extension of extensions) {\r\n                    merged.extensions.add(extension);\r\n                }\r\n            }\r\n            if (filenames && filenames.length) {\r\n                for (const filename of filenames) {\r\n                    merged.filenames.add(filename);\r\n                }\r\n            }\r\n            languages.set(id, merged);\r\n        }\r\n        for (const [id, language] of languages) {\r\n            if (!language.name) {\r\n                language.name = id;\r\n            }\r\n        }\r\n        return languages;\r\n    }\r\n\r\n}\r\n"]}