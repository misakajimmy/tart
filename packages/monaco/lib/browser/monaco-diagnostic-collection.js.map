{"version":3,"sources":["browser/monaco-diagnostic-collection.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,UAAU,EAAE,oBAAoB,EAAC,MAAM,kCAAkC,CAAC;AAKlF,MAAM,OAAO,0BAA0B;IAKnC,YACuB,IAAY,EACZ,GAA8B;QAD9B,SAAI,GAAJ,IAAI,CAAQ;QACZ,QAAG,GAAH,GAAG,CAA2B;QALlC,gBAAW,GAAG,IAAI,GAAG,EAA8C,CAAC;QACpE,cAAS,GAAG,IAAI,oBAAoB,EAAE,CAAC;IAK1D,CAAC;IAED,OAAO;QACH,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,GAAG,CAAC,GAAW;QACX,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC9C,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;IACxD,CAAC;IAED,GAAG,CAAC,GAAW,EAAE,WAAyB;QACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,QAAQ,EAAE;YACV,QAAQ,CAAC,WAAW,GAAG,WAAW,CAAC;SACtC;aAAM;YACH,MAAM,gBAAgB,GAAG,IAAI,sBAAsB,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAC3F,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;YAC5C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE;gBACvC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC7B,gBAAgB,CAAC,OAAO,EAAE,CAAC;YAC/B,CAAC,CAAC,CAAC,CAAC;SACP;IACL,CAAC;CAEJ;AAED,MAAM,OAAO,sBAAsB;IAG/B,YACI,GAAW,EACX,WAAyB,EAChB,KAAa,EACH,GAA8B;QADxC,UAAK,GAAL,KAAK,CAAQ;QACH,QAAG,GAAH,GAAG,CAA2B;QAO3C,aAAQ,GAAkB,EAAE,CAAC;QAM7B,iBAAY,GAAiB,EAAE,CAAC;QAXtC,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC9E,CAAC;IAID,IAAI,OAAO;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAID,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,IAAI,WAAW,CAAC,WAAyB;QACrC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAED,OAAO;QACH,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAED,kBAAkB;QACd,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/C,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IACzD,CAAC;IAES,oBAAoB,CAAC,KAAyB;QACpD,IAAI,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE;YACvD,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SACnE;IACL,CAAC;CACJ","file":"../../src/browser/monaco-diagnostic-collection.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2020 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {Diagnostic} from 'vscode-languageserver-types';\r\nimport {Disposable, DisposableCollection} from '@tart/core/lib/common/disposable';\r\nimport {ProtocolToMonacoConverter} from './protocol-to-monaco-converter';\r\nimport IModel = monaco.editor.IModel;\r\nimport IMarkerData = monaco.editor.IMarkerData;\r\n\r\nexport class MonacoDiagnosticCollection implements Disposable {\r\n\r\n    protected readonly diagnostics = new Map<string, MonacoModelDiagnostics | undefined>();\r\n    protected readonly toDispose = new DisposableCollection();\r\n\r\n    constructor(\r\n        protected readonly name: string,\r\n        protected readonly p2m: ProtocolToMonacoConverter) {\r\n    }\r\n\r\n    dispose(): void {\r\n        this.toDispose.dispose();\r\n    }\r\n\r\n    get(uri: string): Diagnostic[] {\r\n        const diagnostics = this.diagnostics.get(uri);\r\n        return !!diagnostics ? diagnostics.diagnostics : [];\r\n    }\r\n\r\n    set(uri: string, diagnostics: Diagnostic[]): void {\r\n        const existing = this.diagnostics.get(uri);\r\n        if (existing) {\r\n            existing.diagnostics = diagnostics;\r\n        } else {\r\n            const modelDiagnostics = new MonacoModelDiagnostics(uri, diagnostics, this.name, this.p2m);\r\n            this.diagnostics.set(uri, modelDiagnostics);\r\n            this.toDispose.push(Disposable.create(() => {\r\n                this.diagnostics.delete(uri);\r\n                modelDiagnostics.dispose();\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport class MonacoModelDiagnostics implements Disposable {\r\n    readonly uri: monaco.Uri;\r\n\r\n    constructor(\r\n        uri: string,\r\n        diagnostics: Diagnostic[],\r\n        readonly owner: string,\r\n        protected readonly p2m: ProtocolToMonacoConverter\r\n    ) {\r\n        this.uri = monaco.Uri.parse(uri);\r\n        this.diagnostics = diagnostics;\r\n        monaco.editor.onDidCreateModel(model => this.doUpdateModelMarkers(model));\r\n    }\r\n\r\n    protected _markers: IMarkerData[] = [];\r\n\r\n    get markers(): ReadonlyArray<IMarkerData> {\r\n        return this._markers;\r\n    }\r\n\r\n    protected _diagnostics: Diagnostic[] = [];\r\n\r\n    get diagnostics(): Diagnostic[] {\r\n        return this._diagnostics;\r\n    }\r\n\r\n    set diagnostics(diagnostics: Diagnostic[]) {\r\n        this._diagnostics = diagnostics;\r\n        this._markers = this.p2m.asDiagnostics(diagnostics);\r\n        this.updateModelMarkers();\r\n    }\r\n\r\n    dispose(): void {\r\n        this._markers = [];\r\n        this.updateModelMarkers();\r\n    }\r\n\r\n    updateModelMarkers(): void {\r\n        const model = monaco.editor.getModel(this.uri);\r\n        this.doUpdateModelMarkers(model ? model : undefined);\r\n    }\r\n\r\n    protected doUpdateModelMarkers(model: IModel | undefined): void {\r\n        if (model && this.uri.toString() === model.uri.toString()) {\r\n            monaco.editor.setModelMarkers(model, this.owner, this._markers);\r\n        }\r\n    }\r\n}\r\n"]}