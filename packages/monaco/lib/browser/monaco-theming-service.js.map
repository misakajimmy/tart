{"version":3,"sources":["browser/monaco-theming-service.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAAC,UAAU,EAAE,oBAAoB,EAAC,MAAM,uBAAuB,CAAC;AACvE,OAAO,EAAC,oBAAoB,EAAE,YAAY,EAAC,MAAM,gCAAgC,CAAC;AAClF,OAAO,EAAC,SAAS,EAAoB,QAAQ,EAAE,YAAY,EAAC,MAAM,qBAAqB,CAAC;AACxF,OAAO,EAAC,mBAAmB,EAAC,MAAM,kCAAkC,CAAC;AAErE,MAAM,CAAC,MAAM,kBAAkB,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;AAGzD,IAAa,oBAAoB,4BAAjC,MAAa,oBAAoB;IAI7B,MAAM,CAAC,GAAG;QACN,MAAM,MAAM,GAAG,MAAa,CAAC,CAAC,yDAAyD;QACvF,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE;YAC7B,MAAM,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;YACxC,YAAY,CAAC,QAAQ,CAAC,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC;YACtD,YAAY,CAAC,YAAY,EAAE,CAAC;YAC5B,MAAM,CAAC,kBAAkB,CAAC,GAAG,YAAY,CAAC;SAC7C;QACD,OAAO,MAAM,CAAC,kBAAkB,CAAC,CAAC;IACtC,CAAC;IAED,MAAM,CAAC,IAAI;QACP,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,YAAY,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;QACzE,IAAI,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAES,MAAM,CAAC,UAAU,CAAC,KAAuB;QAC/C,OAAO,IAAI,oBAAoB,CAC3B,YAAY,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAChD,QAAQ,CAAC,KAAK,CAAC,CAClB,CAAC;IACN,CAAC;IAES,MAAM,CAAC,KAAK,CAAC,OAAO;QAC1B,IAAI;YACA,MAAM,MAAM,GAAG,MAAM,SAAS,EAAE,CAAC;YACjC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;gBACxB,mBAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAK,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;gBACrE,sBAAoB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aAC1C;SACJ;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,CAAC,CAAC,CAAC;SACvD;IACL,CAAC;IAES,MAAM,CAAC,iBAAiB;QAC9B,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;QAC/B,MAAM,IAAI,GAAG,YAAY,CAAC,GAAG,EAAE,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC;QACvD,MAAM,OAAO,GAA+B,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;QAC7G,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAChG,CAAC;CACJ,CAAA;AA7CoB,oCAAe,GAAG,IAAI,oBAAoB,EAAG,CAAA;AAFrD,oBAAoB;IADhC,UAAU,EAAE;GACA,oBAAoB,CA+ChC;SA/CY,oBAAoB","file":"../../src/browser/monaco-theming-service.js","sourcesContent":["import {injectable} from 'inversify';\r\nimport {Disposable, DisposableCollection} from '@tart/core/lib/common';\r\nimport {BuiltinThemeProvider, ThemeService} from '@tart/core/lib/browser/theming';\r\nimport {getThemes, MonacoThemeState, putTheme, stateToTheme} from './monaco-indexed-db';\r\nimport {MonacoThemeRegistry} from './textmate/monaco-theme-registry';\r\n\r\nexport const ThemeServiceSymbol = Symbol('ThemeService');\r\n\r\n@injectable()\r\nexport class MonacoThemingService {\r\n\r\n    protected static toUpdateUiTheme = new DisposableCollection();\r\n\r\n    static get(): ThemeService {\r\n        const global = window as any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n        if (!global[ThemeServiceSymbol]) {\r\n            const themeService = new ThemeService();\r\n            themeService.register(...BuiltinThemeProvider.themes);\r\n            themeService.startupTheme();\r\n            global[ThemeServiceSymbol] = themeService;\r\n        }\r\n        return global[ThemeServiceSymbol];\r\n    }\r\n\r\n    static init(): void {\r\n        this.updateBodyUiTheme();\r\n        ThemeService.get().onDidColorThemeChange(() => this.updateBodyUiTheme());\r\n        this.restore();\r\n    }\r\n\r\n    protected static doRegister(state: MonacoThemeState): Disposable {\r\n        return new DisposableCollection(\r\n            ThemeService.get().register(stateToTheme(state)),\r\n            putTheme(state)\r\n        );\r\n    }\r\n\r\n    protected static async restore(): Promise<void> {\r\n        try {\r\n            const themes = await getThemes();\r\n            for (const state of themes) {\r\n                MonacoThemeRegistry.SINGLETON.setTheme(state.data.name!, state.data);\r\n                MonacoThemingService.doRegister(state);\r\n            }\r\n        } catch (e) {\r\n            console.error('Failed to restore monaco themes', e);\r\n        }\r\n    }\r\n\r\n    protected static updateBodyUiTheme(): void {\r\n        this.toUpdateUiTheme.dispose();\r\n        const type = ThemeService.get().getCurrentTheme().type;\r\n        const uiTheme: monaco.editor.BuiltinTheme = type === 'hc' ? 'hc-black' : type === 'light' ? 'vs' : 'vs-dark';\r\n        document.body.classList.add(uiTheme);\r\n        this.toUpdateUiTheme.push(Disposable.create(() => document.body.classList.remove(uiTheme)));\r\n    }\r\n}\r\n"]}