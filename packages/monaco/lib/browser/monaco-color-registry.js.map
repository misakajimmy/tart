{"version":3,"sources":["browser/monaco-color-registry.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAAQ,aAAa,EAAC,MAAM,uCAAuC,CAAC;AAE3E,OAAO,EAAC,UAAU,EAAC,MAAM,uBAAuB,CAAC;AAGjD,IAAa,mBAAmB,GAAhC,MAAa,mBAAoB,SAAQ,aAAa;IAAtD;;QAEuB,uBAAkB,GAAG,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAC;QACjF,wBAAmB,GAAG,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;IAwC7E,CAAC;IAtCG,CAAE,SAAS;QACP,KAAK,MAAM,EAAC,EAAE,EAAC,IAAI,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,EAAE;YACrD,MAAM,EAAE,CAAC;SACZ;IACL,CAAC;IAED,eAAe,CAAC,EAAU;QACtB,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACnE,OAAO,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;IACrC,CAAC;IAES,UAAU,CAAC,UAA2B;QAC5C,IAAI,QAAgD,CAAC;QACrD,IAAI,UAAU,CAAC,QAAQ,EAAE;YACrB,QAAQ,GAAG,EAAE,CAAC;YACd,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACvD,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACzD,QAAQ,CAAC,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SACtD;QACD,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,EAAE,QAAQ,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC;QAC3G,OAAO,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;IACzF,CAAC;IAES,OAAO,CAAC,KAAwB;QACtC,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACrC,aAAa;YACb,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,MAAM,IAAI,KAAK,EAAE;YACjB,OAAO,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;SACrD;aAAM,IAAI,GAAG,IAAI,KAAK,EAAE;YACrB,MAAM,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,GAAG,KAAK,CAAC;YAC3B,OAAO,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACpE;aAAM;YACH,MAAM,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,GAAG,KAAK,CAAC;YAC3B,OAAO,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACpE;IACL,CAAC;CACJ,CAAA;AA3CY,mBAAmB;IAD/B,UAAU,EAAE;GACA,mBAAmB,CA2C/B;SA3CY,mBAAmB","file":"../../src/browser/monaco-color-registry.js","sourcesContent":["import {injectable} from 'inversify';\r\nimport {Color, ColorRegistry} from '@tart/core/lib/browser/color-registry';\r\nimport {ColorDefinition} from '@tart/core/lib/common/color';\r\nimport {Disposable} from '@tart/core/lib/common';\r\n\r\n@injectable()\r\nexport class MonacoColorRegistry extends ColorRegistry {\r\n\r\n    protected readonly monacoThemeService = monaco.services.StaticServices.standaloneThemeService.get();\r\n    protected readonly monacoColorRegistry = monaco.color.getColorRegistry();\r\n\r\n    * getColors(): IterableIterator<string> {\r\n        for (const {id} of this.monacoColorRegistry.getColors()) {\r\n            yield id;\r\n        }\r\n    }\r\n\r\n    getCurrentColor(id: string): string | undefined {\r\n        const color = this.monacoThemeService.getColorTheme().getColor(id);\r\n        return color && color.toString();\r\n    }\r\n\r\n    protected doRegister(definition: ColorDefinition): Disposable {\r\n        let defaults: monaco.color.ColorDefaults | undefined;\r\n        if (definition.defaults) {\r\n            defaults = {};\r\n            defaults.dark = this.toColor(definition.defaults.dark);\r\n            defaults.light = this.toColor(definition.defaults.light);\r\n            defaults.hc = this.toColor(definition.defaults.hc);\r\n        }\r\n        const identifier = this.monacoColorRegistry.registerColor(definition.id, defaults, definition.description);\r\n        return Disposable.create(() => this.monacoColorRegistry.deregisterColor(identifier));\r\n    }\r\n\r\n    protected toColor(value: Color | undefined): monaco.color.ColorValue | undefined {\r\n        if (!value || typeof value === 'string') {\r\n            // @ts-ignore\r\n            return value;\r\n        }\r\n        if ('kind' in value) {\r\n            return monaco.color[value.kind](value.v, value.f);\r\n        } else if ('r' in value) {\r\n            const {r, g, b, a} = value;\r\n            return new monaco.color.Color(new monaco.color.RGBA(r, g, b, a));\r\n        } else {\r\n            const {h, s, l, a} = value;\r\n            return new monaco.color.Color(new monaco.color.HSLA(h, s, l, a));\r\n        }\r\n    }\r\n}\r\n"]}