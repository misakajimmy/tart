{"version":3,"sources":["browser/monaco-command-registry.ts"],"names":[],"mappings":";;;;;;AACA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,WAAW,CAAC;AAC7C,OAAO,EAAC,oBAAoB,EAAC,MAAM,0BAA0B,CAAC;AAC9D,OAAO,EAA0B,eAAe,EAAE,gBAAgB,EAAC,MAAM,uBAAuB,CAAC;AACjG,OAAO,EAAC,mBAAmB,EAAC,MAAM,cAAc,CAAC;AAWjD,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;IAS9B,QAAQ,CAAC,OAAe;QACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;IAClF,CAAC;IAED,eAAe,CAAC,OAAgB,EAAE,OAAmC;QACjE,IAAI,CAAC,QAAQ,CAAC,eAAe,iCACtB,OAAO,KACV,EAAE,EAAE,OAAO,CAAC,EAAE,KACf,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IACjC,CAAC;IAED,eAAe,CAAC,OAAe,EAAE,OAAmC;QAChE,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IACrE,CAAC;IAES,UAAU,CAAC,aAAyC;QAC1D,OAAO;YACH,OAAO,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC;YAC1D,SAAS,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC;YAC9D,SAAS,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC;SACjE,CAAC;IACN,CAAC;IAED,8DAA8D;IACpD,OAAO,CAAC,aAAyC,EAAE,GAAG,IAAW;QACvE,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;QAC1C,IAAI,MAAM,EAAE;YACR,OAAO,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;SAClE;QACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,8DAA8D;IACpD,SAAS,CAAC,aAAyC,EAAE,GAAG,IAAW;QACzE,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;QAC1C,OAAO,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,aAAa,CAAC,SAAS,IAAI,aAAa,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IAC9F,CAAC;IAED,8DAA8D;IACpD,SAAS,CAAC,aAAyC,EAAE,GAAG,IAAW;QACzE,OAAO,mBAAmB,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;IACnE,CAAC;CAEJ,CAAA;AAjDG;IADC,MAAM,CAAC,oBAAoB,CAAC;4DAC0B;AAE9B;IAAxB,MAAM,CAAC,eAAe,CAAC;uDAA8C;AAE5C;IAAzB,MAAM,CAAC,gBAAgB,CAAC;+DAAuD;AAPvE,qBAAqB;IADjC,UAAU,EAAE;GACA,qBAAqB,CAoDjC;SApDY,qBAAqB","file":"../../src/browser/monaco-command-registry.js","sourcesContent":["import {MonacoEditor} from './monaco-editor';\r\nimport {inject, injectable} from 'inversify';\r\nimport {MonacoEditorProvider} from './monaco-editor-provider';\r\nimport {Command, CommandHandler, CommandRegistry, SelectionService} from '@tart/core/lib/common';\r\nimport {TextEditorSelection} from '@tart/editor';\r\n\r\nexport interface MonacoEditorCommandHandler {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    execute(editor: MonacoEditor, ...args: any[]): any;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    isEnabled?(editor: MonacoEditor, ...args: any[]): boolean;\r\n}\r\n\r\n@injectable()\r\nexport class MonacoCommandRegistry {\r\n\r\n    @inject(MonacoEditorProvider)\r\n    protected readonly monacoEditors: MonacoEditorProvider;\r\n\r\n    @inject(CommandRegistry) protected readonly commands: CommandRegistry;\r\n\r\n    @inject(SelectionService) protected readonly selectionService: SelectionService;\r\n\r\n    validate(command: string): string | undefined {\r\n        return this.commands.commandIds.indexOf(command) !== -1 ? command : undefined;\r\n    }\r\n\r\n    registerCommand(command: Command, handler: MonacoEditorCommandHandler): void {\r\n        this.commands.registerCommand({\r\n            ...command,\r\n            id: command.id\r\n        }, this.newHandler(handler));\r\n    }\r\n\r\n    registerHandler(command: string, handler: MonacoEditorCommandHandler): void {\r\n        this.commands.registerHandler(command, this.newHandler(handler));\r\n    }\r\n\r\n    protected newHandler(monacoHandler: MonacoEditorCommandHandler): CommandHandler {\r\n        return {\r\n            execute: (...args) => this.execute(monacoHandler, ...args),\r\n            isEnabled: (...args) => this.isEnabled(monacoHandler, ...args),\r\n            isVisible: (...args) => this.isVisible(monacoHandler, ...args)\r\n        };\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    protected execute(monacoHandler: MonacoEditorCommandHandler, ...args: any[]): any {\r\n        const editor = this.monacoEditors.current;\r\n        if (editor) {\r\n            return Promise.resolve(monacoHandler.execute(editor, ...args));\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    protected isEnabled(monacoHandler: MonacoEditorCommandHandler, ...args: any[]): boolean {\r\n        const editor = this.monacoEditors.current;\r\n        return !!editor && (!monacoHandler.isEnabled || monacoHandler.isEnabled(editor, ...args));\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    protected isVisible(monacoHandler: MonacoEditorCommandHandler, ...args: any[]): boolean {\r\n        return TextEditorSelection.is(this.selectionService.selection);\r\n    }\r\n\r\n}\r\n"]}