{"version":3,"sources":["browser/monaco-bulk-edit-service.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAErC,wDAAwD;AAGxD,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;IAO9B,KAAK,CAAC,KAAK,CAAC,KAAmC,EAAE,OAAwC;QACrF,IAAI,IAAI,CAAC,eAAe,IAAI,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,KAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,WAAC,OAAA,MAAA,KAAK,CAAC,QAAQ,0CAAE,iBAAiB,CAAA,EAAA,CAAC,CAAC,EAAE;YAC1G,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACnD,OAAO,EAAC,WAAW,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;SAC3C;aAAM;YACH,8CAA8C;SACjD;IACL,CAAC;IAED,iBAAiB;QACb,OAAO,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACzC,CAAC;IAED,iBAAiB,CAAC,OAA8C;QAC5D,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;QAE/B,MAAM,qBAAqB,GAAG,GAAG,EAAE;YAC/B,IAAI,IAAI,CAAC,eAAe,KAAK,OAAO,EAAE;gBAClC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;aACpC;QACL,CAAC,CAAC;QAEF,OAAO;YACH,OAAO;gBACH,qBAAqB,EAAE,CAAC;YAC5B,CAAC;SACJ,CAAC;IACN,CAAC;CACJ,CAAA;AAnCY,qBAAqB;IADjC,UAAU,EAAE;GACA,qBAAqB,CAmCjC;SAnCY,qBAAqB","file":"../../src/browser/monaco-bulk-edit-service.js","sourcesContent":["import {injectable} from 'inversify';\r\n\r\n// import { MonacoWorkspace } from './monaco-workspace';\r\n\r\n@injectable()\r\nexport class MonacoBulkEditService implements monaco.editor.IBulkEditService {\r\n\r\n    // @inject(MonacoWorkspace)\r\n    // protected readonly workspace: MonacoWorkspace;\r\n\r\n    private _previewHandler?: monaco.editor.IBulkEditPreviewHandler;\r\n\r\n    async apply(edits: monaco.editor.ResourceEdit[], options?: monaco.editor.IBulkEditOptions): Promise<monaco.editor.IBulkEditResult & { success: boolean }> {\r\n        if (this._previewHandler && (options?.showPreview || edits.some(value => value.metadata?.needsConfirmation))) {\r\n            edits = await this._previewHandler(edits, options);\r\n            return {ariaSummary: '', success: true};\r\n        } else {\r\n            // return this.workspace.applyBulkEdit(edits);\r\n        }\r\n    }\r\n\r\n    hasPreviewHandler(): boolean {\r\n        return Boolean(this._previewHandler);\r\n    }\r\n\r\n    setPreviewHandler(handler: monaco.editor.IBulkEditPreviewHandler): monaco.IDisposable {\r\n        this._previewHandler = handler;\r\n\r\n        const disposePreviewHandler = () => {\r\n            if (this._previewHandler === handler) {\r\n                this._previewHandler = undefined;\r\n            }\r\n        };\r\n\r\n        return {\r\n            dispose(): void {\r\n                disposePreviewHandler();\r\n            }\r\n        };\r\n    }\r\n}\r\n"]}