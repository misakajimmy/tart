{"version":3,"sources":["browser/monaco-resolved-keybinding.ts"],"names":[],"mappings":"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","file":"../../src/browser/monaco-resolved-keybinding.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2017 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {KeybindingRegistry} from '@tart/core/lib/browser/keybinding';\r\nimport {Key, KeyCode, KeyModifier, KeySequence, Keystroke} from '@tart/core/lib/browser/keys';\r\nimport {isOSX} from '@tart/core/lib/common/os';\r\nimport {KEY_CODE_MAP} from './monaco-keycode-map';\r\n\r\nexport class MonacoResolvedKeybinding extends monaco.keybindings.ResolvedKeybinding {\r\n\r\n    protected readonly parts: monaco.keybindings.ResolvedKeybindingPart[];\r\n\r\n    constructor(protected readonly keySequence: KeySequence, keybindingService: KeybindingRegistry) {\r\n        super();\r\n        this.parts = keySequence.map(keyCode => {\r\n            // eslint-disable-next-line no-null/no-null\r\n            const keyLabel = keyCode.key ? keybindingService.acceleratorForKey(keyCode.key) : null;\r\n            const keyAriaLabel = keyLabel;\r\n            return new monaco.keybindings.ResolvedKeybindingPart(\r\n                keyCode.ctrl,\r\n                keyCode.shift,\r\n                keyCode.alt,\r\n                keyCode.meta,\r\n                keyLabel,\r\n                keyAriaLabel\r\n            );\r\n        });\r\n    }\r\n\r\n    static toKeybinding(keybinding: monaco.keybindings.Keybinding): string {\r\n        return keybinding instanceof monaco.keybindings.SimpleKeybinding\r\n            ? this.keyCode(keybinding).toString()\r\n            : this.keySequence(keybinding as monaco.keybindings.ChordKeybinding).join(' ');\r\n    }\r\n\r\n    static keyCode(keybinding: monaco.keybindings.SimpleKeybinding): KeyCode {\r\n        const keyCode = keybinding.keyCode;\r\n        const sequence: Keystroke = {\r\n            first: Key.getKey(this.monaco2BrowserKeyCode(keyCode & 0xff)),\r\n            modifiers: []\r\n        };\r\n        if (keybinding.ctrlKey) {\r\n            if (isOSX) {\r\n                sequence.modifiers!.push(KeyModifier.MacCtrl);\r\n            } else {\r\n                sequence.modifiers!.push(KeyModifier.CtrlCmd);\r\n            }\r\n        }\r\n        if (keybinding.shiftKey) {\r\n            sequence.modifiers!.push(KeyModifier.Shift);\r\n        }\r\n        if (keybinding.altKey) {\r\n            sequence.modifiers!.push(KeyModifier.Alt);\r\n        }\r\n        if (keybinding.metaKey && sequence.modifiers!.indexOf(KeyModifier.CtrlCmd) === -1) {\r\n            sequence.modifiers!.push(KeyModifier.CtrlCmd);\r\n        }\r\n        return KeyCode.createKeyCode(sequence);\r\n    }\r\n\r\n    static keySequence(keybinding: monaco.keybindings.ChordKeybinding): KeySequence {\r\n        return keybinding.parts.map(part => this.keyCode(part));\r\n    }\r\n\r\n    private static monaco2BrowserKeyCode(keyCode: monaco.KeyCode): number {\r\n        for (let i = 0; i < KEY_CODE_MAP.length; i++) {\r\n            if (KEY_CODE_MAP[i] === keyCode) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public getLabel(): string | null {\r\n        return monaco.keybindings.UILabelProvider.toLabel(monaco.platform.OS, this.parts, p => p.keyLabel);\r\n    }\r\n\r\n    public getAriaLabel(): string | null {\r\n        return monaco.keybindings.UILabelProvider.toLabel(monaco.platform.OS, this.parts, p => p.keyAriaLabel);\r\n    }\r\n\r\n    public getElectronAccelerator(): string | null {\r\n        if (this.isChord()) {\r\n            // Electron cannot handle chords\r\n            // eslint-disable-next-line no-null/no-null\r\n            return null;\r\n        }\r\n        return monaco.keybindings.ElectronAcceleratorLabelProvider.toLabel(monaco.platform.OS, this.parts, p => p.keyLabel);\r\n    }\r\n\r\n    public getUserSettingsLabel(): string | null {\r\n        return monaco.keybindings.UserSettingsLabelProvider.toLabel(monaco.platform.OS, this.parts, p => p.keyLabel);\r\n    }\r\n\r\n    public isWYSIWYG(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public isChord(): boolean {\r\n        return this.parts.length > 1;\r\n    }\r\n\r\n    public getDispatchParts(): (string | null)[] {\r\n        return this.keySequence.map(keyCode => monaco.keybindings.USLayoutResolvedKeybinding.getDispatchStr(this.toKeybinding(keyCode)));\r\n    }\r\n\r\n    public getSingleModifierDispatchParts(): (string | null)[] {\r\n        return []; /* NOOP */\r\n    }\r\n\r\n    public getParts(): monaco.keybindings.ResolvedKeybindingPart[] {\r\n        return this.parts;\r\n    }\r\n\r\n    private toKeybinding(keyCode: KeyCode): monaco.keybindings.SimpleKeybinding {\r\n        return new monaco.keybindings.SimpleKeybinding(\r\n            keyCode.ctrl,\r\n            keyCode.shift,\r\n            keyCode.alt,\r\n            keyCode.meta,\r\n            KEY_CODE_MAP[keyCode.key!.keyCode]\r\n        );\r\n    }\r\n\r\n}\r\n"]}