{"version":3,"sources":["browser/monaco-to-protocol-converter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;AAElF,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAOpC,CAAC;AACF,MAAM,KAAW,kBAAkB,CAIlC;AAJD,WAAiB,kBAAkB;IAC/B,SAAgB,EAAE,CAAC,CAA8C;QAC7D,OAAQ,CAAwB,CAAC,MAAM,KAAK,SAAS,CAAC;IAC1D,CAAC;IAFe,qBAAE,KAEjB,CAAA;AACL,CAAC,EAJgB,kBAAkB,KAAlB,kBAAkB,QAIlC;AAGD,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;IAOlC,UAAU,CAAC,UAAqC,EAAE,MAAiC;QAC/E,MAAM,IAAI,GAAG,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC;QACzE,MAAM,SAAS,GAAG,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QACtE,OAAO;YACH,IAAI,EAAE,SAAS;SAClB,CAAC;IACN,CAAC;IAQD,OAAO,CAAC,KAA8D;QAClE,IAAI,KAAK,KAAK,SAAS,EAAE;YACrB,OAAO,SAAS,CAAC;SACpB;QAED,IAAI,kBAAkB,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;YAC9B,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAErC;aAAM;YACH,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;YACxE,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;YAClE,OAAO;gBACH,KAAK,EAAE,GAAG;aACb,CAAC;SACL;IACL,CAAC;CAEJ,CAAA;AAtCY,yBAAyB;IADrC,UAAU,EAAE;GACA,yBAAyB,CAsCrC;SAtCY,yBAAyB","file":"../../src/browser/monaco-to-protocol-converter.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2020 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {injectable} from 'inversify';\r\nimport {Position, Range} from 'vscode-languageserver-types';\r\nimport {RecursivePartial} from '@tart/core/lib/common/types';\r\n\r\nexport interface MonacoRangeReplace {\r\n    insert: monaco.IRange;\r\n    replace: monaco.IRange\r\n};\r\nexport namespace MonacoRangeReplace {\r\n    export function is(v: Partial<monaco.IRange> | MonacoRangeReplace): v is MonacoRangeReplace {\r\n        return (v as MonacoRangeReplace).insert !== undefined;\r\n    }\r\n}\r\n\r\n@injectable()\r\nexport class MonacoToProtocolConverter {\r\n\r\n    asPosition(lineNumber: undefined | null, column: undefined | null): {};\r\n    asPosition(lineNumber: number, column: undefined | null): Pick<Position, 'line'>;\r\n    asPosition(lineNumber: undefined | null, column: number): Pick<Position, 'character'>;\r\n    asPosition(lineNumber: number, column: number): Position;\r\n    asPosition(lineNumber: number | undefined | null, column: number | undefined | null): Partial<Position>;\r\n    asPosition(lineNumber: number | undefined | null, column: number | undefined | null): Partial<Position> {\r\n        const line = typeof lineNumber !== 'number' ? undefined : lineNumber - 1;\r\n        const character = typeof column !== 'number' ? undefined : column - 1;\r\n        return {\r\n            line, character\r\n        };\r\n    }\r\n\r\n    asRange(range: undefined): undefined;\r\n    asRange(range: monaco.IRange): Range;\r\n    asRange(range: monaco.IRange | undefined): Range | undefined;\r\n    asRange(range: monaco.IRange | { insert: monaco.IRange; replace: monaco.IRange }): Range;\r\n    asRange(range: Partial<monaco.IRange>): RecursivePartial<Range>;\r\n    asRange(range: Partial<monaco.IRange> | undefined): RecursivePartial<Range> | undefined;\r\n    asRange(range: Partial<monaco.IRange> | undefined | MonacoRangeReplace): RecursivePartial<Range> | undefined {\r\n        if (range === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        if (MonacoRangeReplace.is(range)) {\r\n            return this.asRange(range.insert);\r\n\r\n        } else {\r\n            const start = this.asPosition(range.startLineNumber, range.startColumn);\r\n            const end = this.asPosition(range.endLineNumber, range.endColumn);\r\n            return {\r\n                start, end\r\n            };\r\n        }\r\n    }\r\n\r\n}\r\n"]}