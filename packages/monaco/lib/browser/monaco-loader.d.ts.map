{"version":3,"sources":["browser/monaco-loader.ts"],"names":[],"mappings":"AAAA,wBAAgB,UAAU,CAAC,SAAS,EAAE,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,CAoGxD;AAED,wBAAgB,+BAA+B,IAAI,IAAI,CAKtD;AAED,wBAAgB,aAAa,CAAC,OAAO,EAAE,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CA2BxD","file":"../../src/browser/monaco-loader.d.ts","sourcesContent":["export function loadMonaco(vsRequire: any): Promise<void> {\r\n  return new Promise<void>(resolve => {\r\n    vsRequire(['vs/editor/editor.main'], () => {\r\n      vsRequire([\r\n        'vs/platform/commands/common/commands',\r\n        'vs/platform/actions/common/actions',\r\n        'vs/platform/keybinding/common/keybindingsRegistry',\r\n        'vs/platform/keybinding/common/keybindingResolver',\r\n        'vs/platform/keybinding/common/usLayoutResolvedKeybinding',\r\n        'vs/base/common/keybindingLabels',\r\n        'vs/base/common/keyCodes',\r\n        'vs/base/common/mime',\r\n        'vs/editor/browser/editorExtensions',\r\n        'vs/editor/standalone/browser/simpleServices',\r\n        'vs/editor/standalone/browser/standaloneServices',\r\n        'vs/editor/standalone/browser/standaloneLanguages',\r\n        'vs/editor/standalone/browser/quickAccess/standaloneGotoLineQuickAccess',\r\n        'vs/editor/standalone/browser/quickAccess/standaloneGotoSymbolQuickAccess',\r\n        'vs/base/parts/quickinput/browser/quickInput',\r\n        'vs/platform/quickinput/browser/quickInput',\r\n        'vs/platform/quickinput/common/quickAccess',\r\n        'vs/platform/quickinput/browser/quickAccess',\r\n        'vs/platform/quickinput/browser/pickerQuickAccess',\r\n        'vs/base/browser/ui/list/listWidget',\r\n        'vs/platform/registry/common/platform',\r\n        'vs/base/common/filters',\r\n        'vs/platform/theme/common/themeService',\r\n        'vs/platform/theme/common/styler',\r\n        'vs/platform/theme/common/colorRegistry',\r\n        'vs/base/common/color',\r\n        'vs/base/common/platform',\r\n        'vs/editor/common/modes',\r\n        'vs/editor/contrib/suggest/suggest',\r\n        'vs/editor/contrib/snippet/snippetParser',\r\n        'vs/editor/contrib/format/format',\r\n        'vs/platform/configuration/common/configuration',\r\n        'vs/platform/configuration/common/configurationModels',\r\n        'vs/editor/common/services/resolverService',\r\n        'vs/editor/browser/services/codeEditorService',\r\n        'vs/editor/browser/services/codeEditorServiceImpl',\r\n        'vs/editor/browser/services/openerService',\r\n        'vs/platform/markers/common/markerService',\r\n        'vs/platform/contextkey/common/contextkey',\r\n        'vs/platform/contextkey/browser/contextKeyService',\r\n        'vs/editor/common/model/wordHelper',\r\n        'vs/base/common/errors',\r\n        'vs/base/common/path',\r\n        'vs/editor/common/model/textModel',\r\n        'vs/base/common/strings',\r\n        'vs/base/common/async'\r\n      ], (commands: any, actions: any,\r\n          keybindingsRegistry: any, keybindingResolver: any, resolvedKeybinding: any, keybindingLabels: any,\r\n          keyCodes: any, mime: any, editorExtensions: any, simpleServices: any,\r\n          standaloneServices: any, standaloneLanguages: any, standaloneGotoLineQuickAccess: any, standaloneGotoSymbolQuickAccess: any, quickInput: any,\r\n          quickInputPlatform: any, quickAccess: any, quickAccessBrowser: any, pickerQuickAccess: any, listWidget: any, // helpQuickAccess: any, commandsQuickAccess: any,\r\n          platformRegistry: any,\r\n          filters: any, themeService: any, styler: any, colorRegistry: any, color: any,\r\n          platform: any, modes: any, suggest: any, snippetParser: any,\r\n          format: any,\r\n          configuration: any, configurationModels: any,\r\n          resolverService: any,\r\n          codeEditorService: any, codeEditorServiceImpl: any, openerService: any,\r\n          markerService: any,\r\n          contextKey: any, contextKeyService: any,\r\n          wordHelper: any,\r\n          error: any, path: any,\r\n          textModel: any, strings: any, async: any) => {\r\n        const global: any = self;\r\n        global.monaco.commands = commands;\r\n        global.monaco.actions = actions;\r\n        global.monaco.keybindings = Object.assign({}, keybindingsRegistry, keybindingResolver, resolvedKeybinding, keybindingLabels, keyCodes);\r\n        global.monaco.services = Object.assign({}, simpleServices, standaloneServices,\r\n            standaloneLanguages, configuration, configurationModels,\r\n            resolverService, codeEditorService, codeEditorServiceImpl, markerService, openerService);\r\n        console.log(quickAccess);\r\n        global.monaco.quickInput = Object.assign({}, quickInput, quickAccess, quickAccessBrowser, quickInputPlatform,\r\n            pickerQuickAccess, standaloneGotoLineQuickAccess, standaloneGotoSymbolQuickAccess);\r\n        global.monaco.filters = filters;\r\n        global.monaco.theme = Object.assign({}, themeService, styler);\r\n        global.monaco.color = Object.assign({}, colorRegistry, color);\r\n        global.monaco.platform = Object.assign({}, platform, platformRegistry);\r\n        global.monaco.editorExtensions = editorExtensions;\r\n        global.monaco.modes = modes;\r\n        global.monaco.suggest = suggest;\r\n        global.monaco.snippetParser = snippetParser;\r\n        global.monaco.format = format;\r\n        global.monaco.contextkey = contextKey;\r\n        global.monaco.contextKeyService = contextKeyService;\r\n        global.monaco.mime = mime;\r\n        global.monaco.wordHelper = wordHelper;\r\n        global.monaco.error = error;\r\n        global.monaco.path = path;\r\n        global.monaco.textModel = textModel;\r\n        global.monaco.strings = strings;\r\n        global.monaco.async = async;\r\n        global.monaco.list = listWidget;\r\n        resolve();\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nexport function clearMonacoQuickAccessProviders(): void {\r\n  const registry = monaco.platform.Registry.as<monaco.quickInput.IQuickAccessRegistry>('workbench.contributions.quickaccess');\r\n\r\n  // Clear Monaco QuickAccessRegistry as it currently includes monaco internal providers and not Wm's providers\r\n  registry.clear();\r\n}\r\n\r\nexport function loadVsRequire(context: any): Promise<any> {\r\n  // Monaco uses a custom amd loader that over-rides node's require.\r\n  // Keep a reference to an original require so we can restore it after executing the amd loader file.\r\n  const originalRequire = context.require;\r\n  return new Promise(resolve => {\r\n    if (document.readyState === 'loading') {\r\n      window.addEventListener('load', attachVsLoader, {once: true});\r\n    } else {\r\n      attachVsLoader();\r\n    }\r\n\r\n    function attachVsLoader(): void {\r\n      const vsLoader = document.createElement('script');\r\n      vsLoader.type = 'text/javascript';\r\n      vsLoader.src = 'vs/loader.js';\r\n      vsLoader.charset = 'utf-8';\r\n      vsLoader.addEventListener('load', () => {\r\n        // Save Monaco's amd require and restore the original require\r\n        const amdRequire = context.require;\r\n        if (originalRequire) {\r\n          context.require = originalRequire;\r\n        }\r\n        resolve(amdRequire);\r\n      });\r\n      document.body.appendChild(vsLoader);\r\n    }\r\n  });\r\n}\r\n"]}