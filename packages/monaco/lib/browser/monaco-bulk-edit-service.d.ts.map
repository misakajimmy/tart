{"version":3,"sources":["browser/monaco-bulk-edit-service.ts"],"names":[],"mappings":";AAIA,qBACa,qBAAsB,YAAW,MAAM,CAAC,MAAM,CAAC,gBAAgB;IAKxE,OAAO,CAAC,eAAe,CAAC,CAAwC;IAE1D,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,OAAO,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,gBAAgB,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,GAAG;QAAE,OAAO,EAAE,OAAO,CAAA;KAAE,CAAC;IASzJ,iBAAiB,IAAI,OAAO;IAI5B,iBAAiB,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,uBAAuB,GAAG,MAAM,CAAC,WAAW;CAexF","file":"../../src/browser/monaco-bulk-edit-service.d.ts","sourcesContent":["import {injectable} from 'inversify';\r\n\r\n// import { MonacoWorkspace } from './monaco-workspace';\r\n\r\n@injectable()\r\nexport class MonacoBulkEditService implements monaco.editor.IBulkEditService {\r\n\r\n    // @inject(MonacoWorkspace)\r\n    // protected readonly workspace: MonacoWorkspace;\r\n\r\n    private _previewHandler?: monaco.editor.IBulkEditPreviewHandler;\r\n\r\n    async apply(edits: monaco.editor.ResourceEdit[], options?: monaco.editor.IBulkEditOptions): Promise<monaco.editor.IBulkEditResult & { success: boolean }> {\r\n        if (this._previewHandler && (options?.showPreview || edits.some(value => value.metadata?.needsConfirmation))) {\r\n            edits = await this._previewHandler(edits, options);\r\n            return {ariaSummary: '', success: true};\r\n        } else {\r\n            // return this.workspace.applyBulkEdit(edits);\r\n        }\r\n    }\r\n\r\n    hasPreviewHandler(): boolean {\r\n        return Boolean(this._previewHandler);\r\n    }\r\n\r\n    setPreviewHandler(handler: monaco.editor.IBulkEditPreviewHandler): monaco.IDisposable {\r\n        this._previewHandler = handler;\r\n\r\n        const disposePreviewHandler = () => {\r\n            if (this._previewHandler === handler) {\r\n                this._previewHandler = undefined;\r\n            }\r\n        };\r\n\r\n        return {\r\n            dispose(): void {\r\n                disposePreviewHandler();\r\n            }\r\n        };\r\n    }\r\n}\r\n"]}