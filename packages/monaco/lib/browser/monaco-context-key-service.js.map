{"version":3,"sources":["browser/monaco-context-key-service.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,aAAa,EAAC,MAAM,WAAW,CAAC;AAC5D,OAAO,EAAa,iBAAiB,EAAC,MAAM,YAAY,CAAC;AAGzD,IAAa,uBAAuB,GAApC,MAAa,uBAAwB,SAAQ,iBAAiB;IAA9D;;QAKuB,gBAAW,GAAG,IAAI,GAAG,EAAkD,CAAC;IA0C/F,CAAC;IAxCG,SAAS,CAAI,GAAW,EAAE,YAA2B;QACjD,OAAO,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,UAAkB,EAAE,OAAqB;QAC3C,MAAM,GAAG,GAAG,OAAO,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,YAAY,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAChJ,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACtC,IAAI,CAAC,GAAG,EAAE;YACN,OAAO,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;SAC7D;QACD,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC1D,OAAO,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzF,CAAC;IAED,SAAS,CAAC,UAAkB;QACxB,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QACtE,aAAa;QACb,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,CAAS,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACtD,CAAC;IAGS,IAAI;QACV,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAC1C,IAAI,CAAC,aAAa,CAAC;YACf,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC;SACvC,CAAC,CACL,CAAC;IACN,CAAC;IAES,KAAK,CAAC,IAAY;QACxB,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,UAAU,EAAE;YACb,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAChE,IAAI,UAAU,EAAE;gBACZ,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;aAC1C;SACJ;QACD,OAAO,UAAU,CAAC;IACtB,CAAC;CAEJ,CAAA;AA3CG;IADC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,iBAAiB,CAAC;kEAC8B;AAwBjF;IADC,aAAa,EAAE;mDAOf;AAlCQ,uBAAuB;IADnC,UAAU,EAAE;GACA,uBAAuB,CA+CnC;SA/CY,uBAAuB","file":"../../src/browser/monaco-context-key-service.js","sourcesContent":["import {inject, injectable, postConstruct} from 'inversify';\r\nimport {ContextKey, ContextKeyService} from '@tart/core';\r\n\r\n@injectable()\r\nexport class MonacoContextKeyService extends ContextKeyService {\r\n\r\n    activeContext?: HTMLElement;\r\n    @inject(monaco.contextKeyService.ContextKeyService)\r\n    protected readonly contextKeyService: monaco.contextKeyService.ContextKeyService;\r\n    protected readonly expressions = new Map<string, monaco.contextkey.ContextKeyExpression>();\r\n\r\n    createKey<T>(key: string, defaultValue: T | undefined): ContextKey<T> {\r\n        return this.contextKeyService.createKey(key, defaultValue);\r\n    }\r\n\r\n    match(expression: string, context?: HTMLElement): boolean {\r\n        const ctx = context || this.activeContext || (window.document.activeElement instanceof HTMLElement ? window.document.activeElement : undefined);\r\n        const parsed = this.parse(expression);\r\n        if (!ctx) {\r\n            return this.contextKeyService.contextMatchesRules(parsed);\r\n        }\r\n        const keyContext = this.contextKeyService.getContext(ctx);\r\n        return monaco.keybindings.KeybindingResolver.contextMatchesRules(keyContext, parsed);\r\n    }\r\n\r\n    parseKeys(expression: string): Set<string> | undefined {\r\n        const expr = monaco.contextkey.ContextKeyExpr.deserialize(expression);\r\n        // @ts-ignore\r\n        return expr ? new Set<string>(expr.keys()) : expr;\r\n    }\r\n\r\n    @postConstruct()\r\n    protected init(): void {\r\n        this.contextKeyService.onDidChangeContext(e =>\r\n            this.fireDidChange({\r\n                affects: keys => e.affectsSome(keys)\r\n            })\r\n        );\r\n    }\r\n\r\n    protected parse(when: string): monaco.contextkey.ContextKeyExpression | undefined {\r\n        let expression = this.expressions.get(when);\r\n        if (!expression) {\r\n            expression = monaco.contextkey.ContextKeyExpr.deserialize(when);\r\n            if (expression) {\r\n                this.expressions.set(when, expression);\r\n            }\r\n        }\r\n        return expression;\r\n    }\r\n\r\n}\r\n"]}