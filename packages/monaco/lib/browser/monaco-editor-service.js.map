{"version":3,"sources":["browser/monaco-editor-service.ts"],"names":[],"mappings":"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","file":"../../src/browser/monaco-editor-service.js","sourcesContent":["import ICodeEditor = monaco.editor.ICodeEditor;\r\nimport CommonCodeEditor = monaco.editor.CommonCodeEditor;\r\nimport IResourceEditorInput = monaco.editor.IResourceEditorInput;\r\nimport {MonacoEditor} from './monaco-editor';\r\nimport {decorate, inject, injectable} from 'inversify';\r\nimport {MonacoEditorModel} from './monaco-editor-model';\r\nimport {ApplicationShell, open, OpenerService, PreferenceService, WidgetOpenMode} from '@tart/core/lib/browser';\r\nimport {MonacoToProtocolConverter} from './monaco-to-protocol-converter';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {EditorManager, EditorOpenerOptions} from '@tart/editor/lib/browser/editor-manager';\r\nimport {CustomEditorWidget} from '@tart/editor/lib/browser/editor';\r\nimport {EditorWidget} from '@tart/editor/lib/browser/editor-widget';\r\n\r\n\r\n\r\ndecorate(injectable(), monaco.services.CodeEditorServiceImpl);\r\n\r\n@injectable()\r\nexport class MonacoEditorService extends monaco.services.CodeEditorServiceImpl {\r\n\r\n  public static readonly ENABLE_PREVIEW_PREFERENCE: string = 'editor.enablePreview';\r\n\r\n  @inject(OpenerService)\r\n  protected readonly openerService: OpenerService;\r\n\r\n  @inject(MonacoToProtocolConverter)\r\n  protected readonly m2p: MonacoToProtocolConverter;\r\n\r\n  @inject(ApplicationShell)\r\n  protected readonly shell: ApplicationShell;\r\n\r\n  @inject(EditorManager)\r\n  protected readonly editors: EditorManager;\r\n\r\n  @inject(PreferenceService)\r\n  protected readonly preferencesService: PreferenceService;\r\n\r\n  constructor() {\r\n    super(undefined, monaco.services.StaticServices.standaloneThemeService.get());\r\n  }\r\n\r\n  /**\r\n   * Monaco active editor is either focused or last focused editor.\r\n   */\r\n  getActiveCodeEditor(): monaco.editor.IStandaloneCodeEditor | undefined {\r\n    let editor = MonacoEditor.getCurrent(this.editors);\r\n    if (!editor && CustomEditorWidget.is(this.shell.activeWidget)) {\r\n      const model = this.shell.activeWidget.modelRef.object;\r\n      if (model.editorTextModel instanceof MonacoEditorModel) {\r\n        editor = MonacoEditor.findByDocument(this.editors, model.editorTextModel)[0];\r\n      }\r\n    }\r\n    return editor && editor.getControl();\r\n  }\r\n\r\n  async openCodeEditor(input: IResourceEditorInput, source?: ICodeEditor, sideBySide?: boolean): Promise<CommonCodeEditor | undefined> {\r\n    const uri = new URI(input.resource.toString());\r\n    const openerOptions = this.createEditorOpenerOptions(input, source, sideBySide);\r\n    const widget = await open(this.openerService, uri, openerOptions);\r\n    const editorWidget = await this.findEditorWidgetByUri(widget, uri.toString());\r\n    if (editorWidget && editorWidget.editor instanceof MonacoEditor) {\r\n      return editorWidget.editor.getControl();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  protected async findEditorWidgetByUri(widget: object | undefined, uriAsString: string): Promise<EditorWidget | undefined> {\r\n    if (widget instanceof EditorWidget) {\r\n      if (widget.editor.uri.toString() === uriAsString) {\r\n        return widget;\r\n      }\r\n      return undefined;\r\n    }\r\n    if (ApplicationShell.TrackableWidgetProvider.is(widget)) {\r\n      for (const childWidget of widget.getTrackableWidgets()) {\r\n        const editorWidget = await this.findEditorWidgetByUri(childWidget, uriAsString);\r\n        if (editorWidget) {\r\n          return editorWidget;\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  protected createEditorOpenerOptions(input: IResourceEditorInput, source?: ICodeEditor, sideBySide?: boolean): EditorOpenerOptions {\r\n    const mode = this.getEditorOpenMode(input);\r\n    const selection = input.options && this.m2p.asRange(input.options.selection);\r\n    const widgetOptions = this.getWidgetOptions(source, sideBySide);\r\n    const preview = !!this.preferencesService.get<boolean>(MonacoEditorService.ENABLE_PREVIEW_PREFERENCE, false);\r\n    return {mode: mode, selection, widgetOptions, preview};\r\n  }\r\n\r\n  protected getEditorOpenMode(input: IResourceEditorInput): WidgetOpenMode {\r\n    const options = {\r\n      preserveFocus: false,\r\n      revealIfVisible: true,\r\n      ...input.options\r\n    };\r\n    if (options.preserveFocus) {\r\n      return 'reveal';\r\n    }\r\n    return options.revealIfVisible ? 'activate' : 'open';\r\n  }\r\n\r\n  protected getWidgetOptions(source?: ICodeEditor, sideBySide?: boolean): ApplicationShell.WidgetOptions | undefined {\r\n    const ref = MonacoEditor.getWidgetFor(this.editors, source);\r\n    if (!ref) {\r\n      return undefined;\r\n    }\r\n    const area = (ref && this.shell.getAreaFor(ref)) || 'main';\r\n    const mode = ref && sideBySide ? 'split-right' : undefined;\r\n    return {area, mode, ref};\r\n  }\r\n\r\n}\r\n"]}