{"version":3,"sources":["browser/textmate/monaco-textmate-service.ts"],"names":[],"mappings":"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","file":"../../../src/browser/textmate/monaco-textmate-service.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2018 Redhat, Ericsson and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {inject, injectable, named} from 'inversify';\r\nimport {IOnigLib, IRawGrammar, parseRawGrammar, Registry} from 'vscode-textmate';\r\nimport {ContributionProvider, Disposable, DisposableCollection} from '@tart/core/lib/common';\r\nimport {FrontendApplicationContribution} from '@tart/core/lib/browser';\r\nimport {ThemeService} from '@tart/core/lib/browser/theming';\r\nimport {getEncodedLanguageId, LanguageGrammarDefinitionContribution} from './textmate-contribution';\r\nimport {createTextmateTokenizer, TokenizerOption} from './textmate-tokenizer';\r\nimport {TextmateRegistry} from './textmate-registry';\r\nimport {MonacoThemeRegistry} from './monaco-theme-registry';\r\n\r\nexport const OnigasmPromise = Symbol('OnigasmPromise');\r\nexport type OnigasmPromise = Promise<IOnigLib>;\r\n\r\n@injectable()\r\nexport class MonacoTextmateService implements FrontendApplicationContribution {\r\n\r\n    protected readonly tokenizerOption: TokenizerOption = {\r\n        lineLimit: 400\r\n    };\r\n\r\n    protected readonly _activatedLanguages = new Set<string>();\r\n\r\n    protected grammarRegistry: Registry;\r\n\r\n    @inject(ContributionProvider) @named(LanguageGrammarDefinitionContribution)\r\n    protected readonly grammarProviders: ContributionProvider<LanguageGrammarDefinitionContribution>;\r\n\r\n    @inject(TextmateRegistry)\r\n    protected readonly textmateRegistry: TextmateRegistry;\r\n\r\n    @inject(OnigasmPromise)\r\n    protected readonly onigasmPromise: OnigasmPromise;\r\n\r\n    @inject(ThemeService)\r\n    protected readonly themeService: ThemeService;\r\n\r\n    @inject(MonacoThemeRegistry)\r\n    protected readonly monacoThemeRegistry: MonacoThemeRegistry;\r\n    protected readonly toDisposeOnUpdateTheme = new DisposableCollection();\r\n\r\n    protected get currentEditorTheme(): string {\r\n        return this.themeService.getCurrentTheme().editorTheme || 'dark-wm';\r\n    }\r\n\r\n    initialize(): void {\r\n        // if (!isBasicWasmSupported) {\r\n        //     console.log('Textmate support deactivated because WebAssembly is not detected.');\r\n        //     return;\r\n        // }\r\n\r\n        for (const grammarProvider of this.grammarProviders.getContributions()) {\r\n            try {\r\n                grammarProvider.registerTextmateLanguage(this.textmateRegistry);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n\r\n        this.grammarRegistry = new Registry({\r\n            getOnigLib: () => this.onigasmPromise,\r\n            theme: this.monacoThemeRegistry.getThemeData(this.currentEditorTheme),\r\n            loadGrammar: async (scopeName: string) => {\r\n                const provider = this.textmateRegistry.getProvider(scopeName);\r\n                if (provider) {\r\n                    const definition = await provider.getGrammarDefinition();\r\n                    let rawGrammar: IRawGrammar;\r\n                    if (typeof definition.content === 'string') {\r\n                        rawGrammar = parseRawGrammar(definition.content, definition.format === 'json' ? 'grammar.json' : 'grammar.plist');\r\n                    } else {\r\n                        rawGrammar = definition.content as IRawGrammar;\r\n                    }\r\n                    return rawGrammar;\r\n                }\r\n                return undefined;\r\n            },\r\n            getInjections: (scopeName: string) => {\r\n                const provider = this.textmateRegistry.getProvider(scopeName);\r\n                if (provider && provider.getInjections) {\r\n                    return provider.getInjections(scopeName);\r\n                }\r\n                return [];\r\n            }\r\n        });\r\n\r\n        // this.tokenizerOption.lineLimit = this.preferences['editor.maxTokenizationLineLength'];\r\n        // this.preferences.onPreferenceChanged(e => {\r\n        //     if (e.preferenceName === 'editor.maxTokenizationLineLength') {\r\n        //         this.tokenizerOption.lineLimit = e.newValue;\r\n        //     }\r\n        // });\r\n\r\n        this.updateTheme();\r\n        this.themeService.onDidColorThemeChange(() => this.updateTheme());\r\n\r\n        for (const id of this.textmateRegistry.languages) {\r\n            this.activateLanguage(id);\r\n        }\r\n    }\r\n\r\n    activateLanguage(language: string): Disposable {\r\n        const toDispose = new DisposableCollection(\r\n            Disposable.create(() => { /* mark as not disposed */\r\n            })\r\n        );\r\n        toDispose.push(this.waitForLanguage(language, () =>\r\n            this.doActivateLanguage(language, toDispose)\r\n        ));\r\n        return toDispose;\r\n    }\r\n\r\n    protected updateTheme(): void {\r\n        this.toDisposeOnUpdateTheme.dispose();\r\n\r\n        const currentEditorTheme = this.currentEditorTheme;\r\n        document.body.classList.add(currentEditorTheme);\r\n        this.toDisposeOnUpdateTheme.push(Disposable.create(() => document.body.classList.remove(currentEditorTheme)));\r\n\r\n        // first update registry to run tokenization with the proper theme\r\n        const theme = this.monacoThemeRegistry.getThemeData(currentEditorTheme);\r\n        if (theme) {\r\n            this.grammarRegistry.setTheme(theme);\r\n        }\r\n\r\n        // then trigger tokenization by setting monaco theme\r\n        monaco.editor.setTheme(currentEditorTheme);\r\n        monaco.services.StaticServices.standaloneThemeService.get().setTheme(currentEditorTheme);\r\n    }\r\n\r\n    protected async doActivateLanguage(languageId: string, toDispose: DisposableCollection): Promise<void> {\r\n        if (this._activatedLanguages.has(languageId)) {\r\n            return;\r\n        }\r\n        this._activatedLanguages.add(languageId);\r\n        toDispose.push(Disposable.create(() => this._activatedLanguages.delete(languageId)));\r\n\r\n        const scopeName = this.textmateRegistry.getScope(languageId);\r\n        if (!scopeName) {\r\n            return;\r\n        }\r\n        const provider = this.textmateRegistry.getProvider(scopeName);\r\n        if (!provider) {\r\n            return;\r\n        }\r\n\r\n        const configuration = this.textmateRegistry.getGrammarConfiguration(languageId);\r\n        const initialLanguage = getEncodedLanguageId(languageId);\r\n\r\n        await this.onigasmPromise;\r\n        if (toDispose.disposed) {\r\n            return;\r\n        }\r\n        try {\r\n            const grammar = await this.grammarRegistry.loadGrammarWithConfiguration(scopeName, initialLanguage, configuration);\r\n            if (toDispose.disposed) {\r\n                return;\r\n            }\r\n            if (!grammar) {\r\n                throw new Error(`no grammar for ${scopeName}, ${initialLanguage}, ${JSON.stringify(configuration)}`);\r\n            }\r\n            const options = configuration.tokenizerOption ? configuration.tokenizerOption : this.tokenizerOption;\r\n            const tokenizer = createTextmateTokenizer(grammar, options);\r\n            toDispose.push(monaco.languages.setTokensProvider(languageId, tokenizer));\r\n            const support = monaco.modes.TokenizationRegistry.get(languageId);\r\n            const themeService = monaco.services.StaticServices.standaloneThemeService.get();\r\n            const languageIdentifier = monaco.services.StaticServices.modeService.get().getLanguageIdentifier(languageId);\r\n            const adapter = new monaco.services.TokenizationSupport2Adapter(themeService, languageIdentifier!, tokenizer);\r\n            support!.tokenize = adapter.tokenize.bind(adapter);\r\n        } catch (error) {\r\n            console.warn('No grammar for this language id', languageId, error);\r\n        }\r\n    }\r\n\r\n    protected waitForLanguage(language: string, cb: () => {}): Disposable {\r\n        const modeService = monaco.services.StaticServices.modeService.get();\r\n        for (const modeId of Object.keys(modeService['_instantiatedModes'])) {\r\n            const mode = modeService['_instantiatedModes'][modeId];\r\n            if (mode.getId() === language) {\r\n                cb();\r\n                return Disposable.NULL;\r\n            }\r\n        }\r\n        return monaco.languages.onLanguage(language, cb);\r\n    }\r\n\r\n}\r\n"]}