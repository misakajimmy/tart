{"version":3,"sources":["browser/textmate/monaco-theme-registry.ts"],"names":[],"mappings":";AACA,OAAO,EAAC,SAAS,EAA6B,MAAM,iBAAiB,CAAC;AAetE,MAAM,WAAW,QAAS,SAAQ,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,oBAAoB;CAC9E;AAED,MAAM,WAAW,kBAAmB,SAAQ,MAAM,CAAC,QAAQ,CAAC,gBAAgB;IACxE,SAAS,EAAE,QAAQ,CAAA;CACtB;AAED,qBACa,mBAAmB;IAE5B,YAAY,IAAI,QAAQ;IACxB,YAAY,CAAC,IAAI,EAAE,MAAM,GAAG,QAAQ,GAAG,SAAS;IAMhD,QAAQ,IAAI,kBAAkB;IAC9B,QAAQ,CAAC,IAAI,EAAE,MAAM,GAAG,kBAAkB,GAAG,SAAS;IAKtD,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,GAAG,IAAI;IAK5C;;OAEG;IACH,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE;QAAE,CAAC,WAAW,EAAE,MAAM,GAAG,GAAG,CAAA;KAAE,EAAE,SAAS,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,GAAG,QAAQ;IAkErI,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,GAAG,kBAAkB,GAAG,SAAS;IAM9E,SAAS,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,eAAe,KAAK,IAAI,GAAG,IAAI;IAcnG,SAAS,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,GAAG,MAAM,GAAG,SAAS;CAY/F;AAED,yBAAiB,mBAAmB,CAAC;IAC1B,MAAM,SAAS,qBAA4B,CAAC;IAE5C,MAAM,kBAAkB,EAAE,MAIH,CAAC;IACxB,MAAM,mBAAmB,EAAE,MAIR,CAAC;IACpB,MAAM,gBAAgB,EAAE,MAGF,CAAC;CACjC","file":"../../../src/browser/textmate/monaco-theme-registry.d.ts","sourcesContent":["import {injectable} from 'inversify';\r\nimport {IRawTheme, IRawThemeSetting, Registry} from 'vscode-textmate';\r\nimport darkTheme from '../../assets/data/monaco-themes/vscode/dark_wm.json';\r\nimport darkDefaults from '../../assets/data/monaco-themes/vscode/dark_defaults.json';\r\nimport darkVs from '../../assets/data/monaco-themes/vscode/dark_vs.json';\r\nimport darkPlus from '../../assets/data/monaco-themes/vscode/dark_plus.json';\r\n\r\nimport lightTheme from '../../assets/data/monaco-themes/vscode/light_wm.json';\r\nimport lightDefaults from '../../assets/data/monaco-themes/vscode/light_defaults.json';\r\nimport lightVs from '../../assets/data/monaco-themes/vscode/light_vs.json';\r\nimport lightPlus from '../../assets/data/monaco-themes/vscode/light_plus.json';\r\n\r\nimport hcTheme from '../../assets/data/monaco-themes/vscode/hc_wm.json';\r\nimport hcBlackDefault from '../../assets/data/monaco-themes/vscode/hc_black_defaults.json';\r\nimport hcBlack from '../../assets/data/monaco-themes/vscode/hc_black.json';\r\n\r\nexport interface ThemeMix extends IRawTheme, monaco.editor.IStandaloneThemeData {\r\n}\r\n\r\nexport interface MixStandaloneTheme extends monaco.services.IStandaloneTheme {\r\n    themeData: ThemeMix\r\n}\r\n\r\n@injectable()\r\nexport class MonacoThemeRegistry {\r\n\r\n    getThemeData(): ThemeMix;\r\n    getThemeData(name: string): ThemeMix | undefined;\r\n    getThemeData(name?: string): ThemeMix | undefined {\r\n        const theme = this.doGetTheme(name);\r\n        return theme && theme.themeData;\r\n    }\r\n\r\n    getTheme(): MixStandaloneTheme;\r\n    getTheme(name: string): MixStandaloneTheme | undefined;\r\n    getTheme(name?: string): MixStandaloneTheme | undefined {\r\n        return this.doGetTheme(name);\r\n    }\r\n\r\n    setTheme(name: string, data: ThemeMix): void {\r\n        // monaco auto refreshes a theme with new data\r\n        monaco.editor.defineTheme(name, data);\r\n    }\r\n\r\n    /**\r\n     * Register VS Code compatible themes\r\n     */\r\n    register(json: any, includes?: { [includePath: string]: any }, givenName?: string, monacoBase?: monaco.editor.BuiltinTheme): ThemeMix {\r\n        const name = givenName || json.name!;\r\n        const result: ThemeMix = {\r\n            name,\r\n            base: monacoBase || 'vs',\r\n            inherit: true,\r\n            colors: {},\r\n            rules: [],\r\n            settings: []\r\n        };\r\n        if (typeof json.include !== 'undefined') {\r\n            if (!includes || !includes[json.include]) {\r\n                console.error(`Couldn't resolve includes theme ${json.include}.`);\r\n            } else {\r\n                const parentTheme = this.register(includes[json.include], includes);\r\n                Object.assign(result.colors, parentTheme.colors);\r\n                result.rules.push(...parentTheme.rules);\r\n                result.settings.push(...parentTheme.settings);\r\n            }\r\n        }\r\n        const tokenColors: Array<IRawThemeSetting> = json.tokenColors;\r\n        if (Array.isArray(tokenColors)) {\r\n            for (const tokenColor of tokenColors) {\r\n                if (tokenColor.scope && tokenColor.settings) {\r\n                    result.settings.push({\r\n                        scope: tokenColor.scope,\r\n                        settings: {\r\n                            foreground: this.normalizeColor(tokenColor.settings.foreground),\r\n                            background: this.normalizeColor(tokenColor.settings.background),\r\n                            fontStyle: tokenColor.settings.fontStyle\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        if (json.colors) {\r\n            Object.assign(result.colors, json.colors);\r\n            result.encodedTokensColors = Object.keys(result.colors).map(key => result.colors[key]);\r\n        }\r\n        if (monacoBase && givenName) {\r\n            for (const setting of result.settings) {\r\n                this.transform(setting, rule => result.rules.push(rule));\r\n            }\r\n\r\n            // the default rule (scope empty) is always the first rule. Ignore all other default rules.\r\n            const defaultTheme = monaco.services.StaticServices.standaloneThemeService.get()._knownThemes.get(result.base)!;\r\n            const foreground = result.colors['editor.foreground'] || defaultTheme.getColor('editor.foreground');\r\n            const background = result.colors['editor.background'] || defaultTheme.getColor('editor.background');\r\n            result.settings.unshift({\r\n                settings: {\r\n                    foreground: this.normalizeColor(foreground),\r\n                    background: this.normalizeColor(background)\r\n                }\r\n            });\r\n\r\n            const reg = new Registry();\r\n            reg.setTheme(result);\r\n            result.encodedTokensColors = reg.getColorMap();\r\n            // index 0 has to be set to null as it is 'undefined' by default, but monaco code expects it to be null\r\n            // eslint-disable-next-line no-null/no-null\r\n            result.encodedTokensColors[0] = null!;\r\n            this.setTheme(givenName, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    protected doGetTheme(name: string | undefined): MixStandaloneTheme | undefined {\r\n        const standaloneThemeService = monaco.services.StaticServices.standaloneThemeService.get();\r\n        const theme = !name ? standaloneThemeService.getColorTheme() : standaloneThemeService._knownThemes.get(name);\r\n        return theme as MixStandaloneTheme | undefined;\r\n    }\r\n\r\n    protected transform(tokenColor: any, acceptor: (rule: monaco.editor.ITokenThemeRule) => void): void {\r\n        if (typeof tokenColor.scope === 'undefined') {\r\n            tokenColor.scope = [''];\r\n        } else if (typeof tokenColor.scope === 'string') {\r\n            tokenColor.scope = tokenColor.scope.split(',').map((scope: string) => scope.trim());\r\n        }\r\n\r\n        for (const scope of tokenColor.scope) {\r\n            acceptor({\r\n                ...tokenColor.settings, token: scope\r\n            });\r\n        }\r\n    }\r\n\r\n    protected normalizeColor(color: string | monaco.color.Color | undefined): string | undefined {\r\n        if (!color) {\r\n            return undefined;\r\n        }\r\n        const normalized = String(color).replace(/^\\#/, '').slice(0, 6);\r\n        if (normalized.length < 6 || !(normalized).match(/^[0-9A-Fa-f]{6}$/)) {\r\n            // ignoring not normalized colors to avoid breaking token color indexes between monaco and vscode-textmate\r\n            console.error(`Color '${normalized}' is NOT normalized, it must have 6 positions.`);\r\n            return undefined;\r\n        }\r\n        return '#' + normalized;\r\n    }\r\n}\r\n\r\nexport namespace MonacoThemeRegistry {\r\n    export const SINGLETON = new MonacoThemeRegistry();\r\n\r\n    export const DARK_DEFAULT_THEME: string = SINGLETON.register(darkTheme, {\r\n        './dark_defaults.json': darkDefaults,\r\n        './dark_vs.json': darkVs,\r\n        './dark_plus.json': darkPlus\r\n    }, 'dark-wm', 'vs-dark').name!;\r\n    export const LIGHT_DEFAULT_THEME: string = SINGLETON.register(lightTheme, {\r\n        './light_defaults.json': lightDefaults,\r\n        './light_vs.json': lightVs,\r\n        './light_plus.json': lightPlus,\r\n    }, 'light-wm', 'vs').name!;\r\n    export const HC_DEFAULT_THEME: string = SINGLETON.register(hcTheme, {\r\n        './hc_black_defaults.json': hcBlackDefault,\r\n        './hc_black.json': hcBlack\r\n    }, 'hc-wm', 'hc-black').name!;\r\n}\r\n"]}