{"version":3,"sources":["browser/textmate/textmate-registry.ts"],"names":[],"mappings":"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","file":"../../../src/browser/textmate/textmate-registry.js","sourcesContent":["import {IGrammarConfiguration} from 'vscode-textmate';\r\nimport {injectable} from 'inversify';\r\nimport {Disposable} from '@tart/core/lib/common';\r\nimport {TokenizerOption} from './textmate-tokenizer';\r\n\r\nexport interface TextmateGrammarConfiguration extends IGrammarConfiguration {\r\n\r\n    /**\r\n     * Optional options to further refine the tokenization of the grammar.\r\n     */\r\n    readonly tokenizerOption?: TokenizerOption;\r\n\r\n}\r\n\r\nexport interface GrammarDefinitionProvider {\r\n    getGrammarDefinition(): Promise<GrammarDefinition>;\r\n\r\n    getInjections?(scopeName: string): string[];\r\n}\r\n\r\nexport interface GrammarDefinition {\r\n    format: 'json' | 'plist';\r\n    content: object | string;\r\n    location?: string;\r\n}\r\n\r\n@injectable()\r\nexport class TextmateRegistry {\r\n\r\n    protected readonly scopeToProvider = new Map<string, GrammarDefinitionProvider[]>();\r\n    protected readonly languageToConfig = new Map<string, TextmateGrammarConfiguration[]>();\r\n    protected readonly languageIdToScope = new Map<string, string[]>();\r\n\r\n    get languages(): IterableIterator<string> {\r\n        return this.languageIdToScope.keys();\r\n    }\r\n\r\n    registerTextmateGrammarScope(scope: string, provider: GrammarDefinitionProvider): Disposable {\r\n        const providers = this.scopeToProvider.get(scope) || [];\r\n        const existingProvider = providers[0];\r\n        if (existingProvider) {\r\n            Promise.all([existingProvider.getGrammarDefinition(), provider.getGrammarDefinition()]).then(([a, b]) => {\r\n                if (a.location !== b.location || !a.location && !b.location) {\r\n                    console.warn(`a registered grammar provider for '${scope}' scope is overridden`);\r\n                }\r\n            });\r\n        }\r\n        providers.unshift(provider);\r\n        this.scopeToProvider.set(scope, providers);\r\n        return Disposable.create(() => {\r\n            const index = providers.indexOf(provider);\r\n            if (index !== -1) {\r\n                providers.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    getProvider(scope: string): GrammarDefinitionProvider | undefined {\r\n        const providers = this.scopeToProvider.get(scope);\r\n        return providers && providers[0];\r\n    }\r\n\r\n    mapLanguageIdToTextmateGrammar(languageId: string, scope: string): Disposable {\r\n        const scopes = this.languageIdToScope.get(languageId) || [];\r\n        const existingScope = scopes[0];\r\n        if (typeof existingScope === 'string') {\r\n            console.warn(`'${languageId}' language is remapped from '${existingScope}' to '${scope}' scope`);\r\n        }\r\n        scopes.unshift(scope);\r\n        this.languageIdToScope.set(languageId, scopes);\r\n        return Disposable.create(() => {\r\n            const index = scopes.indexOf(scope);\r\n            if (index !== -1) {\r\n                scopes.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    getScope(languageId: string): string | undefined {\r\n        const scopes = this.languageIdToScope.get(languageId);\r\n        return scopes && scopes[0];\r\n    }\r\n\r\n    getLanguageId(scope: string): string | undefined {\r\n        for (const languageId of this.languageIdToScope.keys()) {\r\n            if (this.getScope(languageId) === scope) {\r\n                return languageId;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    registerGrammarConfiguration(languageId: string, config: TextmateGrammarConfiguration): Disposable {\r\n        const configs = this.languageToConfig.get(languageId) || [];\r\n        const existingConfig = configs[0];\r\n        if (existingConfig) {\r\n            console.warn(`a registered grammar configuration for '${languageId}' language is overridden`);\r\n        }\r\n        configs.unshift(config);\r\n        this.languageToConfig.set(languageId, configs);\r\n        return Disposable.create(() => {\r\n            const index = configs.indexOf(config);\r\n            if (index !== -1) {\r\n                configs.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    getGrammarConfiguration(languageId: string): TextmateGrammarConfiguration {\r\n        const configs = this.languageToConfig.get(languageId);\r\n        return configs && configs[0] || {};\r\n    }\r\n\r\n}\r\n"]}