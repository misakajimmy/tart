{"version":3,"sources":["browser/monaco-keybinding.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,sBAAsB,EAAE,kBAAkB,EAAC,MAAM,YAAY,CAAC;AAEtE,OAAO,EAAC,qBAAqB,EAAC,MAAM,2BAA2B,CAAC;AAEhE,qBACa,4BAA6B,YAAW,sBAAsB;IAGvE,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,qBAAqB,CAAC;IAEnD,mBAAmB,CAAC,QAAQ,EAAE,kBAAkB,GAAG,IAAI;CAY1D","file":"../../src/browser/monaco-keybinding.d.ts","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport {KeybindingContribution, KeybindingRegistry} from '@tart/core';\r\nimport {MonacoResolvedKeybinding} from './monaco-resolved-keybinding';\r\nimport {MonacoCommandRegistry} from './monaco-command-registry';\r\n\r\n@injectable()\r\nexport class MonacoKeybindingContribution implements KeybindingContribution {\r\n\r\n    @inject(MonacoCommandRegistry)\r\n    protected readonly commands: MonacoCommandRegistry;\r\n\r\n    registerKeybindings(registry: KeybindingRegistry): void {\r\n        const defaultKeybindings = monaco.keybindings.KeybindingsRegistry.getDefaultKeybindings();\r\n        for (const item of defaultKeybindings) {\r\n            const command = this.commands.validate(item.command);\r\n            if (command) {\r\n                const when = item.when && item.when.serialize();\r\n                let keybinding;\r\n                keybinding = MonacoResolvedKeybinding.toKeybinding(item.keybinding);\r\n                registry.registerKeybinding({command, keybinding, when});\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}