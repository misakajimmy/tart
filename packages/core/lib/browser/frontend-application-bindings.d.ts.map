{"version":3,"sources":["browser/frontend-application-bindings.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAIrC,OAAO,EAIL,cAAc,EAIf,MAAM,WAAW,CAAC;AAGnB,wBAAgB,kBAAkB,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAIxG;AAED,wBAAgB,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,GAAG,IAAI,CAajE;AAED,wBAAgB,oBAAoB,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,GAAG,IAAI,CAIhE","file":"../../src/browser/frontend-application-bindings.d.ts","sourcesContent":["import {interfaces} from 'inversify';\nimport {bindPreferenceSchemaProvider, PreferenceSchemaProvider} from './preferences/preference-contribution';\nimport {PreferenceProvider} from './preferences/preference-provider';\nimport {PreferenceScope} from './preferences/preference-scope';\nimport {\n  bindContributionProvider,\n  DefaultResourceProvider,\n  MessageClient,\n  MessageService,\n  MessageServiceFactory,\n  ResourceProvider,\n  ResourceResolver\n} from '../common';\nimport {PreferenceProviderProvider, PreferenceService, PreferenceServiceImpl} from './preferences/preference-service';\n\nexport function bindMessageService(bind: interfaces.Bind): interfaces.BindingWhenOnSyntax<MessageService> {\n  bind(MessageClient).toSelf().inSingletonScope();\n  bind(MessageServiceFactory).toFactory(({container}) => () => container.get(MessageService));\n  return bind(MessageService).toSelf().inSingletonScope();\n}\n\nexport function bindPreferenceService(bind: interfaces.Bind): void {\n  // bind(PreferenceProvider).toSelf().inSingletonScope().whenTargetNamed(PreferenceScope.User);\n  // bind(PreferenceProvider).toSelf().inSingletonScope().whenTargetNamed(PreferenceScope.Workspace);\n  // bind(PreferenceProvider).toSelf().inSingletonScope().whenTargetNamed(PreferenceScope.Folder);\n  bind(PreferenceProviderProvider).toFactory(ctx => (scope: PreferenceScope) => {\n    if (scope === PreferenceScope.Default) {\n      return ctx.container.get(PreferenceSchemaProvider);\n    }\n    return ctx.container.getNamed(PreferenceProvider, scope);\n  });\n  bind(PreferenceServiceImpl).toSelf().inSingletonScope();\n  bind(PreferenceService).toService(PreferenceServiceImpl);\n  bindPreferenceSchemaProvider(bind);\n}\n\nexport function bindResourceProvider(bind: interfaces.Bind): void {\n  bind(DefaultResourceProvider).toSelf().inSingletonScope();\n  bind(ResourceProvider).toProvider(context => uri => context.container.get(DefaultResourceProvider).get(uri));\n  bindContributionProvider(bind, ResourceResolver);\n}\n"]}