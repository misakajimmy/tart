{"version":3,"sources":["browser/keyboard/keyboard-layout-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAKlF,OAAO,EAAC,oBAAoB,EAAE,MAAM,gDAAgD,CAAC;AACrF,OAAO,EAAC,OAAO,EAAE,KAAK,EAAC,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAC,GAAG,EAAE,OAAO,EAAC,MAAM,QAAQ,CAAC;AAEpC,MAAM,WAAW,cAAc;IAC7B;;;OAGG;IACH,QAAQ,CAAC,WAAW,EAAE,OAAO,EAAE,CAAC;IAChC;;;OAGG;IACH,QAAQ,CAAC,cAAc,EAAE;QAAE,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,CAAA;KAAE,CAAC;CACrD;AAED,qBACa,qBAAqB;IAWhC,SAAS,CAAC,qBAAqB,0BAAiC;IAChE,OAAO,CAAC,aAAa,CAAC,CAAiB;IAEvC,IAAI,uBAAuB,IAAI,KAAK,CAAC,cAAc,CAAC,CAEnD;IAEK,UAAU,IAAI,OAAO,CAAC,IAAI,CAAC;IAMjC;;;;OAIG;IACH,cAAc,CAAC,MAAM,EAAE,OAAO,GAAG,OAAO;IAiBxC;;;OAGG;IACH,oBAAoB,CAAC,GAAG,EAAE,GAAG,GAAG,MAAM;IAWtC;;;OAGG;IACH,eAAe,CAAC,OAAO,EAAE,OAAO,GAAG,IAAI;IAYvC,SAAS,CAAC,YAAY,CAAC,SAAS,EAAE,oBAAoB,GAAG,cAAc;IAOvE,SAAS,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,GAAG,OAAO,GAAG,SAAS;IAgB7G,SAAS,CAAC,qBAAqB,CAAC,YAAY,EAAE,oBAAoB,GAAG,cAAc;IAkCnF,SAAS,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,GAAG,OAAO;IAQjD,SAAS,CAAC,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,EAAE,OAAO,GAAG,MAAM;IAQ9D,OAAO,CAAC,aAAa;IAerB,OAAO,CAAC,oBAAoB;CAa7B","file":"../../../src/browser/keyboard/keyboard-layout-service.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport type {IWindowsKeyMapping} from 'native-keymap';\nimport {isWindows} from '../../common/os';\nimport {NativeKeyboardLayout,} from '../../common/keyboard/keyboard-layout-provider';\nimport {Emitter, Event} from '../../common';\nimport {Key, KeyCode} from './keys';\n\nexport interface KeyboardLayout {\n  /**\n   * Mapping of standard US keyboard keys to the actual key codes to use.\n   * See `KeyboardLayoutService.getCharacterIndex` for the index computation.\n   */\n  readonly key2KeyCode: KeyCode[];\n  /**\n   * Mapping of KeyboardEvent codes to the characters shown on the user's keyboard\n   * for the respective keys.\n   */\n  readonly code2Character: { [code: string]: string };\n}\n\n@injectable()\nexport class KeyboardLayoutService {\n\n  // @inject(KeyboardLayoutProvider)\n  // protected readonly layoutProvider: KeyboardLayoutProvider;\n  //\n  // @inject(KeyboardLayoutChangeNotifier)\n  // protected readonly layoutChangeNotifier: KeyboardLayoutChangeNotifier;\n  //\n  // @inject(KeyValidator) @optional()\n  // protected readonly keyValidator?: KeyValidator;\n\n  protected keyboardLayoutChanged = new Emitter<KeyboardLayout>();\n  private currentLayout?: KeyboardLayout;\n\n  get onKeyboardLayoutChanged(): Event<KeyboardLayout> {\n    return this.keyboardLayoutChanged.event;\n  }\n\n  async initialize(): Promise<void> {\n    // this.layoutChangeNotifier.onDidChangeNativeLayout(newLayout => this.updateLayout(newLayout));\n    // const initialLayout = await this.layoutProvider.getNativeLayout();\n    // this.updateLayout(initialLayout);\n  }\n\n  /**\n   * Resolve a KeyCode of a keybinding using the current keyboard layout.\n   * If no keyboard layout has been detected or the layout does not contain the\n   * key used in the KeyCode, the KeyCode is returned unchanged.\n   */\n  resolveKeyCode(inCode: KeyCode): KeyCode {\n    const layout = this.currentLayout;\n    if (layout && inCode.key) {\n      for (let shift = 0; shift <= 1; shift++) {\n        const index = this.getCharacterIndex(inCode.key, !!shift);\n        const mappedCode = layout.key2KeyCode[index];\n        if (mappedCode) {\n          const transformed = this.transformKeyCode(inCode, mappedCode, !!shift);\n          if (transformed) {\n            return transformed;\n          }\n        }\n      }\n    }\n    return inCode;\n  }\n\n  /**\n   * Return the character shown on the user's keyboard for the given key.\n   * Use this to determine UI representations of keybindings.\n   */\n  getKeyboardCharacter(key: Key): string {\n    const layout = this.currentLayout;\n    if (layout) {\n      const value = layout.code2Character[key.code];\n      if (value && value.replace(/[\\n\\r\\t]/g, '')) {\n        return value;\n      }\n    }\n    return key.easyString;\n  }\n\n  /**\n   * Called when a KeyboardEvent is processed by the KeybindingRegistry.\n   * The KeyValidator may trigger a keyboard layout change.\n   */\n  validateKeyCode(keyCode: KeyCode): void {\n    // if (this.keyValidator && keyCode.key && keyCode.character) {\n    //     this.keyValidator.validateKey({\n    //         code: keyCode.key.code,\n    //         character: keyCode.character,\n    //         shiftKey: keyCode.shift,\n    //         ctrlKey: keyCode.ctrl,\n    //         altKey: keyCode.alt\n    //     });\n    // }\n  }\n\n  protected updateLayout(newLayout: NativeKeyboardLayout): KeyboardLayout {\n    const transformed = this.transformNativeLayout(newLayout);\n    this.currentLayout = transformed;\n    this.keyboardLayoutChanged.fire(transformed);\n    return transformed;\n  }\n\n  protected transformKeyCode(inCode: KeyCode, mappedCode: KeyCode, keyNeedsShift: boolean): KeyCode | undefined {\n    if (!inCode.shift && keyNeedsShift) {\n      return undefined;\n    }\n    if (mappedCode.alt && (inCode.alt || inCode.ctrl || inCode.shift && !keyNeedsShift)) {\n      return undefined;\n    }\n    return new KeyCode({\n      key: mappedCode.key,\n      meta: inCode.meta,\n      ctrl: inCode.ctrl || mappedCode.alt,\n      shift: inCode.shift && !keyNeedsShift || mappedCode.shift,\n      alt: inCode.alt || mappedCode.alt\n    });\n  }\n\n  protected transformNativeLayout(nativeLayout: NativeKeyboardLayout): KeyboardLayout {\n    const key2KeyCode: KeyCode[] = new Array(2 * (Key.MAX_KEY_CODE + 1));\n    const code2Character: { [code: string]: string } = {};\n    const mapping = nativeLayout.mapping;\n    for (const code in mapping) {\n      if (mapping.hasOwnProperty(code)) {\n        const keyMapping = mapping[code];\n        const mappedKey = Key.getKey(code);\n        if (mappedKey && this.shouldIncludeKey(code)) {\n          if (isWindows) {\n            this.addWindowsKeyMapping(key2KeyCode, mappedKey, (keyMapping as IWindowsKeyMapping).vkey, keyMapping.value);\n          } else {\n            if (keyMapping.value) {\n              this.addKeyMapping(key2KeyCode, mappedKey, keyMapping.value, false, false);\n            }\n            if (keyMapping.withShift) {\n              this.addKeyMapping(key2KeyCode, mappedKey, keyMapping.withShift, true, false);\n            }\n            if (keyMapping.withAltGr) {\n              this.addKeyMapping(key2KeyCode, mappedKey, keyMapping.withAltGr, false, true);\n            }\n            if (keyMapping.withShiftAltGr) {\n              this.addKeyMapping(key2KeyCode, mappedKey, keyMapping.withShiftAltGr, true, true);\n            }\n          }\n        }\n        if (keyMapping.value) {\n          code2Character[code] = keyMapping.value;\n        }\n      }\n    }\n    return {key2KeyCode, code2Character};\n  }\n\n  protected shouldIncludeKey(code: string): boolean {\n    // Exclude all numpad keys because they produce values that are already found elsewhere on the keyboard.\n    // This can cause problems, e.g. if `Numpad3` maps to `PageDown` then commands bound to `PageDown` would\n    // be resolved to `Digit3` (`Numpad3` is associated with `Key.DIGIT3`), effectively blocking the user\n    // from typing `3` in an editor.\n    return !code.startsWith('Numpad');\n  }\n\n  protected getCharacterIndex(key: Key, shift?: boolean): number {\n    if (shift) {\n      return Key.MAX_KEY_CODE + key.keyCode + 1;\n    } else {\n      return key.keyCode;\n    }\n  }\n\n  private addKeyMapping(key2KeyCode: KeyCode[], mappedKey: Key, value: string, shift: boolean, alt: boolean): void {\n    const key = VALUE_TO_KEY[value];\n    if (key) {\n      const index = this.getCharacterIndex(key.key, key.shift);\n      if (key2KeyCode[index] === undefined) {\n        key2KeyCode[index] = new KeyCode({\n          key: mappedKey,\n          shift,\n          alt,\n          character: value\n        });\n      }\n    }\n  }\n\n  private addWindowsKeyMapping(key2KeyCode: KeyCode[], mappedKey: Key, vkey: string, value: string): void {\n    const key = VKEY_TO_KEY[vkey];\n    if (key) {\n      const index = this.getCharacterIndex(key);\n      if (key2KeyCode[index] === undefined) {\n        key2KeyCode[index] = new KeyCode({\n          key: mappedKey,\n          character: value\n        });\n      }\n    }\n  }\n\n}\n\n/**\n * Mapping of character values to the corresponding keys on a standard US keyboard layout.\n */\nconst VALUE_TO_KEY: { [value: string]: { key: Key, shift?: boolean } } = {\n  '`': {key: Key.BACKQUOTE},\n  '~': {key: Key.BACKQUOTE, shift: true},\n  '1': {key: Key.DIGIT1},\n  '!': {key: Key.DIGIT1, shift: true},\n  '2': {key: Key.DIGIT2},\n  '@': {key: Key.DIGIT2, shift: true},\n  '3': {key: Key.DIGIT3},\n  '#': {key: Key.DIGIT3, shift: true},\n  '4': {key: Key.DIGIT4},\n  '$': {key: Key.DIGIT4, shift: true},\n  '5': {key: Key.DIGIT5},\n  '%': {key: Key.DIGIT5, shift: true},\n  '6': {key: Key.DIGIT6},\n  '^': {key: Key.DIGIT6, shift: true},\n  '7': {key: Key.DIGIT7},\n  '&': {key: Key.DIGIT7, shift: true},\n  '8': {key: Key.DIGIT8},\n  '*': {key: Key.DIGIT8, shift: true},\n  '9': {key: Key.DIGIT9},\n  '(': {key: Key.DIGIT9, shift: true},\n  '0': {key: Key.DIGIT0},\n  ')': {key: Key.DIGIT0, shift: true},\n  '-': {key: Key.MINUS},\n  '_': {key: Key.MINUS, shift: true},\n  '=': {key: Key.EQUAL},\n  '+': {key: Key.EQUAL, shift: true},\n\n  'a': {key: Key.KEY_A},\n  'A': {key: Key.KEY_A, shift: true},\n  'b': {key: Key.KEY_B},\n  'B': {key: Key.KEY_B, shift: true},\n  'c': {key: Key.KEY_C},\n  'C': {key: Key.KEY_C, shift: true},\n  'd': {key: Key.KEY_D},\n  'D': {key: Key.KEY_D, shift: true},\n  'e': {key: Key.KEY_E},\n  'E': {key: Key.KEY_E, shift: true},\n  'f': {key: Key.KEY_F},\n  'F': {key: Key.KEY_F, shift: true},\n  'g': {key: Key.KEY_G},\n  'G': {key: Key.KEY_G, shift: true},\n  'h': {key: Key.KEY_H},\n  'H': {key: Key.KEY_H, shift: true},\n  'i': {key: Key.KEY_I},\n  'I': {key: Key.KEY_I, shift: true},\n  'j': {key: Key.KEY_J},\n  'J': {key: Key.KEY_J, shift: true},\n  'k': {key: Key.KEY_K},\n  'K': {key: Key.KEY_K, shift: true},\n  'l': {key: Key.KEY_L},\n  'L': {key: Key.KEY_L, shift: true},\n  'm': {key: Key.KEY_M},\n  'M': {key: Key.KEY_M, shift: true},\n  'n': {key: Key.KEY_N},\n  'N': {key: Key.KEY_N, shift: true},\n  'o': {key: Key.KEY_O},\n  'O': {key: Key.KEY_O, shift: true},\n  'p': {key: Key.KEY_P},\n  'P': {key: Key.KEY_P, shift: true},\n  'q': {key: Key.KEY_Q},\n  'Q': {key: Key.KEY_Q, shift: true},\n  'r': {key: Key.KEY_R},\n  'R': {key: Key.KEY_R, shift: true},\n  's': {key: Key.KEY_S},\n  'S': {key: Key.KEY_S, shift: true},\n  't': {key: Key.KEY_T},\n  'T': {key: Key.KEY_T, shift: true},\n  'u': {key: Key.KEY_U},\n  'U': {key: Key.KEY_U, shift: true},\n  'v': {key: Key.KEY_V},\n  'V': {key: Key.KEY_V, shift: true},\n  'w': {key: Key.KEY_W},\n  'W': {key: Key.KEY_W, shift: true},\n  'x': {key: Key.KEY_X},\n  'X': {key: Key.KEY_X, shift: true},\n  'y': {key: Key.KEY_Y},\n  'Y': {key: Key.KEY_Y, shift: true},\n  'z': {key: Key.KEY_Z},\n  'Z': {key: Key.KEY_Z, shift: true},\n\n  '[': {key: Key.BRACKET_LEFT},\n  '{': {key: Key.BRACKET_LEFT, shift: true},\n  ']': {key: Key.BRACKET_RIGHT},\n  '}': {key: Key.BRACKET_RIGHT, shift: true},\n  ';': {key: Key.SEMICOLON},\n  ':': {key: Key.SEMICOLON, shift: true},\n  \"'\": {key: Key.QUOTE},\n  '\"': {key: Key.QUOTE, shift: true},\n  ',': {key: Key.COMMA},\n  '<': {key: Key.COMMA, shift: true},\n  '.': {key: Key.PERIOD},\n  '>': {key: Key.PERIOD, shift: true},\n  '/': {key: Key.SLASH},\n  '?': {key: Key.SLASH, shift: true},\n  '\\\\': {key: Key.BACKSLASH},\n  '|': {key: Key.BACKSLASH, shift: true},\n\n  '\\t': {key: Key.TAB},\n  '\\r': {key: Key.ENTER},\n  '\\n': {key: Key.ENTER},\n  ' ': {key: Key.SPACE},\n};\n\n/**\n * Mapping of Windows Virtual Keys to the corresponding keys on a standard US keyboard layout.\n */\nconst VKEY_TO_KEY: { [value: string]: Key } = {\n  VK_SHIFT: Key.SHIFT_LEFT,\n  VK_LSHIFT: Key.SHIFT_LEFT,\n  VK_RSHIFT: Key.SHIFT_RIGHT,\n  VK_CONTROL: Key.CONTROL_LEFT,\n  VK_LCONTROL: Key.CONTROL_LEFT,\n  VK_RCONTROL: Key.CONTROL_RIGHT,\n  VK_MENU: Key.ALT_LEFT,\n  VK_COMMAND: Key.OS_LEFT,\n  VK_LWIN: Key.OS_LEFT,\n  VK_RWIN: Key.OS_RIGHT,\n\n  VK_0: Key.DIGIT0,\n  VK_1: Key.DIGIT1,\n  VK_2: Key.DIGIT2,\n  VK_3: Key.DIGIT3,\n  VK_4: Key.DIGIT4,\n  VK_5: Key.DIGIT5,\n  VK_6: Key.DIGIT6,\n  VK_7: Key.DIGIT7,\n  VK_8: Key.DIGIT8,\n  VK_9: Key.DIGIT9,\n  VK_A: Key.KEY_A,\n  VK_B: Key.KEY_B,\n  VK_C: Key.KEY_C,\n  VK_D: Key.KEY_D,\n  VK_E: Key.KEY_E,\n  VK_F: Key.KEY_F,\n  VK_G: Key.KEY_G,\n  VK_H: Key.KEY_H,\n  VK_I: Key.KEY_I,\n  VK_J: Key.KEY_J,\n  VK_K: Key.KEY_K,\n  VK_L: Key.KEY_L,\n  VK_M: Key.KEY_M,\n  VK_N: Key.KEY_N,\n  VK_O: Key.KEY_O,\n  VK_P: Key.KEY_P,\n  VK_Q: Key.KEY_Q,\n  VK_R: Key.KEY_R,\n  VK_S: Key.KEY_S,\n  VK_T: Key.KEY_T,\n  VK_U: Key.KEY_U,\n  VK_V: Key.KEY_V,\n  VK_W: Key.KEY_W,\n  VK_X: Key.KEY_X,\n  VK_Y: Key.KEY_Y,\n  VK_Z: Key.KEY_Z,\n\n  VK_OEM_1: Key.SEMICOLON,\n  VK_OEM_2: Key.SLASH,\n  VK_OEM_3: Key.BACKQUOTE,\n  VK_OEM_4: Key.BRACKET_LEFT,\n  VK_OEM_5: Key.BACKSLASH,\n  VK_OEM_6: Key.BRACKET_RIGHT,\n  VK_OEM_7: Key.QUOTE,\n  VK_OEM_PLUS: Key.EQUAL,\n  VK_OEM_COMMA: Key.COMMA,\n  VK_OEM_MINUS: Key.MINUS,\n  VK_OEM_PERIOD: Key.PERIOD,\n\n  VK_F1: Key.F1,\n  VK_F2: Key.F2,\n  VK_F3: Key.F3,\n  VK_F4: Key.F4,\n  VK_F5: Key.F5,\n  VK_F6: Key.F6,\n  VK_F7: Key.F7,\n  VK_F8: Key.F8,\n  VK_F9: Key.F9,\n  VK_F10: Key.F10,\n  VK_F11: Key.F11,\n  VK_F12: Key.F12,\n  VK_F13: Key.F13,\n  VK_F14: Key.F14,\n  VK_F15: Key.F15,\n  VK_F16: Key.F16,\n  VK_F17: Key.F17,\n  VK_F18: Key.F18,\n  VK_F19: Key.F19,\n\n  VK_BACK: Key.BACKSPACE,\n  VK_TAB: Key.TAB,\n  VK_RETURN: Key.ENTER,\n  VK_CAPITAL: Key.CAPS_LOCK,\n  VK_ESCAPE: Key.ESCAPE,\n  VK_SPACE: Key.SPACE,\n  VK_PRIOR: Key.PAGE_UP,\n  VK_NEXT: Key.PAGE_DOWN,\n  VK_END: Key.END,\n  VK_HOME: Key.HOME,\n  VK_INSERT: Key.INSERT,\n  VK_DELETE: Key.DELETE,\n  VK_LEFT: Key.ARROW_LEFT,\n  VK_UP: Key.ARROW_UP,\n  VK_RIGHT: Key.ARROW_RIGHT,\n  VK_DOWN: Key.ARROW_DOWN,\n\n  VK_NUMLOCK: Key.NUM_LOCK,\n  VK_NUMPAD0: Key.DIGIT0,\n  VK_NUMPAD1: Key.DIGIT1,\n  VK_NUMPAD2: Key.DIGIT2,\n  VK_NUMPAD3: Key.DIGIT3,\n  VK_NUMPAD4: Key.DIGIT4,\n  VK_NUMPAD5: Key.DIGIT5,\n  VK_NUMPAD6: Key.DIGIT6,\n  VK_NUMPAD7: Key.DIGIT7,\n  VK_NUMPAD8: Key.DIGIT8,\n  VK_NUMPAD9: Key.DIGIT9,\n  VK_MULTIPLY: Key.MULTIPLY,\n  VK_ADD: Key.ADD,\n  VK_SUBTRACT: Key.SUBTRACT,\n  VK_DECIMAL: Key.DECIMAL,\n  VK_DIVIDE: Key.DIVIDE\n};\n"]}