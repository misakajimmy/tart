{"version":3,"sources":["browser/keyboard/browser-keyboard-frontend-contribution.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;AAElF,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAAC,OAAO,EAAuC,MAAM,sBAAsB,CAAC;AACnF,wGAAwG;AAExG,MAAM,KAAW,gBAAgB,CAWhC;AAXD,WAAiB,gBAAgB;IAE/B,MAAM,iBAAiB,GAAG,UAAU,CAAC;IACrC,MAAM,qBAAqB,GAAG,iBAAiB,CAAC;IAEnC,uCAAsB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QAC/D,EAAE,EAAE,sBAAsB;QAC1B,QAAQ,EAAE,iBAAiB;QAC3B,KAAK,EAAE,wBAAwB;KAChC,EAAE,2BAA2B,EAAE,qBAAqB,CAAC,CAAC;AAEzD,CAAC,EAXgB,gBAAgB,KAAhB,gBAAgB,QAWhC;AAGD,IAAa,mCAAmC,GAAhD,MAAa,mCAAmC;IAE9C,yCAAyC;IACzC,oEAAoE;IAEpE,yCAAyC;IACzC,2DAA2D;IAE3D,gBAAgB,CAAC,eAAgC;QAC/C,eAAe,CAAC,eAAe,CAAC,gBAAgB,CAAC,sBAAsB,EAAE;YACvE,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC;SACnD,CAAC,CAAC;IACL,CAAC;CAgDF,CAAA;AA5DY,mCAAmC;IAD/C,UAAU,EAAE;GACA,mCAAmC,CA4D/C;SA5DY,mCAAmC;AA8DhD,SAAS,OAAO,CAAC,CAAS,EAAE,CAAS;IACnC,IAAI,CAAC,GAAG,CAAC,EAAE;QACT,OAAO,CAAC,CAAC,CAAC;KACX;IACD,IAAI,CAAC,GAAG,CAAC,EAAE;QACT,OAAO,CAAC,CAAC;KACV;IACD,OAAO,CAAC,CAAC;AACX,CAAC","file":"../../../src/browser/keyboard/browser-keyboard-frontend-contribution.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {Command, CommandContribution, CommandRegistry} from '../../common/command';\n// import {BrowserKeyboardLayoutProvider, KeyboardLayoutData} from './browser-keyboard-layout-provider';\n\nexport namespace KeyboardCommands {\n\n  const KEYBOARD_CATEGORY = 'Keyboard';\n  const KEYBOARD_CATEGORY_KEY = KEYBOARD_CATEGORY;\n\n  export const CHOOSE_KEYBOARD_LAYOUT = Command.toLocalizedCommand({\n    id: 'core.keyboard.choose',\n    category: KEYBOARD_CATEGORY,\n    label: 'Choose Keyboard Layout',\n  }, 'tart/core/keyboard/choose', KEYBOARD_CATEGORY_KEY);\n\n}\n\n@injectable()\nexport class BrowserKeyboardFrontendContribution implements CommandContribution {\n\n  // @inject(BrowserKeyboardLayoutProvider)\n  // protected readonly layoutProvider: BrowserKeyboardLayoutProvider;\n\n  // @inject(QuickInputService) @optional()\n  // protected readonly quickInputService: QuickInputService;\n\n  registerCommands(commandRegistry: CommandRegistry): void {\n    commandRegistry.registerCommand(KeyboardCommands.CHOOSE_KEYBOARD_LAYOUT, {\n      execute: () => console.log('core.keyboard.choose')\n    });\n  }\n\n  // protected async chooseLayout(): Promise<KeyboardLayoutData | undefined> {\n  // const current = this.layoutProvider.currentLayoutData;\n  // const autodetect: QuickPickValue<'autodetect'> = {\n  //     label: 'Auto-detect',\n  //     description: this.layoutProvider.currentLayoutSource !== 'user-choice' ? current.name : undefined,\n  //     detail: 'Try to detect the keyboard layout from browser information and pressed keys.',\n  //     value: 'autodetect'\n  // };\n  // const pcLayouts = this.layoutProvider.allLayoutData\n  //     .filter(layout => layout.hardware === 'pc')\n  //     .sort((a, b) => compare(a.name, b.name))\n  //     .map(layout => this.toQuickPickValue(layout, current === layout));\n  // const macLayouts = this.layoutProvider.allLayoutData\n  //     .filter(layout => layout.hardware === 'mac')\n  //     .sort((a, b) => compare(a.name, b.name))\n  //     .map(layout => this.toQuickPickValue(layout, current === layout));\n  // let layouts: Array<QuickPickValue<KeyboardLayoutData | 'autodetect'> | QuickPickItem>;\n  // const macKeyboards = 'Mac Keyboards';\n  // const pcKeyboards = 'PC Keyboards';\n  // if (isOSX) {\n  //     layouts = [\n  //         autodetect,\n  //         {type: 'separator', label: macKeyboards}, ...macLayouts,\n  //         {type: 'separator', label: pcKeyboards}, ...pcLayouts\n  //     ];\n  // } else {\n  //     layouts = [\n  //         autodetect,\n  //         {type: 'separator', label: pcKeyboards}, ...pcLayouts,\n  //         {type: 'separator', label: macKeyboards}, ...macLayouts\n  //     ];\n  // }\n  // const selectedItem = await this.quickInputService?.showQuickPick(layouts, {placeholder: 'Choose a keyboard layout'});\n  // if (selectedItem && ('value' in selectedItem)) {\n  //     return this.layoutProvider.setLayoutData(selectedItem.value);\n  // }\n  // }\n\n  // protected toQuickPickValue(layout: KeyboardLayoutData, isCurrent: boolean): QuickPickValue<KeyboardLayoutData> {\n  //     return {\n  //         label: layout.name,\n  //         description:\n  //             `${layout.hardware === 'mac' ? 'Mac' : 'PC'} (${layout.language})${isCurrent ? ' - current layout' : ''}`,\n  //         value: layout\n  //     };\n  // }\n}\n\nfunction compare(a: string, b: string): number {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n"]}