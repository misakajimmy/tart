{"version":3,"sources":["browser/menu/browser-menu-plugin.ts"],"names":[],"mappings":"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","file":"../../../src/browser/menu/browser-menu-plugin.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable} from 'inversify';\nimport {Menu as MenuWidget, MenuBar, Widget} from '@lumino/widgets';\nimport {CommandRegistry as PhosphorCommandRegistry} from '@lumino/commands';\nimport {\n  ActionMenuNode,\n  CommandRegistry,\n  CompositeMenuNode,\n  Disposable,\n  DisposableCollection,\n  MAIN_MENU_BAR,\n  MenuModelRegistry,\n  MenuNode,\n  MenuPath\n} from '../../common';\nimport {KeybindingRegistry} from '../keybinding';\nimport {FrontendApplication, FrontendApplicationContribution} from '../frontend-application';\nimport {ContextKeyService} from '../context-key-service';\nimport {ContextMenuContext} from './context-menu-context';\nimport {waitForRevealed} from '../widgets';\nimport {ApplicationShell} from '../shell';\nimport {CorePreferences} from '../core-preferences';\n\nexport abstract class MenuBarWidget extends MenuBar {\n  abstract activateMenu(label: string, ...labels: string[]): Promise<MenuWidget>;\n\n  abstract triggerMenuItem(label: string, ...labels: string[]): Promise<MenuWidget.IItem>;\n}\n\n@injectable()\nexport class BrowserMainMenuFactory implements MenuWidgetFactory {\n\n  @inject(ContextKeyService)\n  protected readonly contextKeyService: ContextKeyService;\n\n  @inject(CorePreferences)\n  protected readonly corePreferences: CorePreferences;\n\n  @inject(ContextMenuContext)\n  protected readonly context: ContextMenuContext;\n\n  @inject(CommandRegistry)\n  protected readonly commandRegistry: CommandRegistry;\n\n  @inject(KeybindingRegistry)\n  protected readonly keybindingRegistry: KeybindingRegistry;\n\n  @inject(MenuModelRegistry)\n  protected readonly menuProvider: MenuModelRegistry;\n\n  protected get services(): MenuServices {\n    return {\n      context: this.context,\n      contextKeyService: this.contextKeyService,\n      commandRegistry: this.commandRegistry,\n      keybindingRegistry: this.keybindingRegistry,\n      menuWidgetFactory: this\n    };\n  }\n\n  createMenuBar(): MenuBarWidget {\n    const menuBar = new DynamicMenuBarWidget();\n    menuBar.id = 'tart:menubar';\n    this.showMenuBar(menuBar, 'visible');\n\n    this.corePreferences.ready.then(() => {\n      this.showMenuBar(menuBar, this.corePreferences.get('window.menuBarVisibility', 'classic'));\n    });\n    const preferenceListener = this.corePreferences.onPreferenceChanged(preference => {\n      if (preference.preferenceName === 'window.menuBarVisibility') {\n        this.showMenuBar(menuBar, preference.newValue);\n      }\n    });\n    const keybindingListener = this.keybindingRegistry.onKeybindingsChanged(() => {\n      const preference = this.corePreferences['window.menuBarVisibility'];\n      this.showMenuBar(menuBar, preference);\n    });\n    menuBar.disposed.connect(() => {\n      preferenceListener.dispose();\n      keybindingListener.dispose();\n    });\n    return menuBar;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createContextMenu(path: MenuPath, args?: any[]): MenuWidget {\n    const menuModel = this.menuProvider.getMenu(path);\n    const menuCommandRegistry = this.createMenuCommandRegistry(menuModel, args).snapshot();\n    const contextMenu = this.createMenuWidget(menuModel, {commands: menuCommandRegistry});\n    return contextMenu;\n  }\n\n  createMenuWidget(menu: CompositeMenuNode, options: MenuWidget.IOptions & { commands: MenuCommandRegistry }): DynamicMenuWidget {\n    return new DynamicMenuWidget(menu, options, this.services);\n  }\n\n  protected showMenuBar(menuBar: DynamicMenuBarWidget, preference: string | undefined): void {\n    if (preference && ['classic', 'visible'].includes(preference)) {\n      menuBar.clearMenus();\n      this.fillMenuBar(menuBar);\n    } else {\n      menuBar.clearMenus();\n    }\n  }\n\n  protected fillMenuBar(menuBar: MenuBarWidget): void {\n    const menuModel = this.menuProvider.getMenu(MAIN_MENU_BAR);\n    const menuCommandRegistry = this.createMenuCommandRegistry(menuModel);\n    for (const menu of menuModel.children) {\n      if (menu instanceof CompositeMenuNode) {\n        const menuWidget = this.createMenuWidget(menu, {commands: menuCommandRegistry});\n        menuBar.addMenu(menuWidget);\n      }\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected createMenuCommandRegistry(menu: CompositeMenuNode, args: any[] = []): MenuCommandRegistry {\n    const menuCommandRegistry = new MenuCommandRegistry(this.services);\n    this.registerMenu(menuCommandRegistry, menu, args);\n    return menuCommandRegistry;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected registerMenu(menuCommandRegistry: MenuCommandRegistry, menu: CompositeMenuNode, args: any[]): void {\n    for (const child of menu.children) {\n      if (child instanceof ActionMenuNode) {\n        menuCommandRegistry.registerActionMenu(child, args);\n        if (child.altNode) {\n          menuCommandRegistry.registerActionMenu(child.altNode, args);\n        }\n      } else if (child instanceof CompositeMenuNode) {\n        this.registerMenu(menuCommandRegistry, child, args);\n      } else {\n        this.handleDefault(menuCommandRegistry, child, args);\n      }\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected handleDefault(menuCommandRegistry: MenuCommandRegistry, menuNode: MenuNode, args: any[]): void {\n    // NOOP\n  }\n\n}\n\nexport class DynamicMenuBarWidget extends MenuBarWidget {\n\n  /**\n   * We want to restore the focus after the menu closes.\n   */\n  protected previousFocusedElement: HTMLElement | undefined;\n\n  constructor() {\n    super();\n    // HACK we need to hook in on private method _openChildMenu. Don't do this at home!\n    DynamicMenuBarWidget.prototype['_openChildMenu'] = () => {\n      if (this.activeMenu instanceof DynamicMenuWidget) {\n        // `childMenu` is `null` if we open the menu. For example, menu is not shown and you click on `Edit`.\n        // However, the `childMenu` is set, when `Edit` was already open and you move the mouse over `Select`.\n        // We want to save the focus object for the former case only.\n        if (!this.childMenu) {\n          const {activeElement} = document;\n          if (activeElement instanceof HTMLElement) {\n            this.previousFocusedElement = activeElement;\n          }\n        }\n        this.activeMenu.aboutToShow({previousFocusedElement: this.previousFocusedElement});\n      }\n      super['_openChildMenu']();\n    };\n  }\n\n  async activateMenu(label: string, ...labels: string[]): Promise<MenuWidget> {\n    const menu = this.menus.find(m => m.title.label === label);\n    if (!menu) {\n      throw new Error(`could not find '${label}' menu`);\n    }\n    this.activeMenu = menu;\n    this.openActiveMenu();\n    await waitForRevealed(menu);\n\n    const menuPath = [label];\n\n    let current = menu;\n    for (const itemLabel of labels) {\n      const item = current.items.find(i => i.label === itemLabel);\n      if (!item || !item.submenu) {\n        throw new Error(`could not find '${label}' submenu in ${menuPath.map(l => \"'\" + l + \"'\").join(' -> ')} menu`);\n      }\n      current.activeItem = item;\n      current.triggerActiveItem();\n      current = item.submenu;\n      await waitForRevealed(current);\n    }\n    return current;\n  }\n\n  async triggerMenuItem(label: string, ...labels: string[]): Promise<MenuWidget.IItem> {\n    if (!labels.length) {\n      throw new Error('menu item label is not specified');\n    }\n    const menuPath = [label, ...labels.slice(0, labels.length - 1)];\n    const menu = await this.activateMenu(menuPath[0], ...menuPath.slice(1));\n    const item = menu.items.find(i => i.label === labels[labels.length - 1]);\n    if (!item) {\n      throw new Error(`could not find '${label}' item in ${menuPath.map(l => \"'\" + l + \"'\").join(' -> ')} menu`);\n    }\n    menu.activeItem = item;\n    menu.triggerActiveItem();\n    return item;\n  }\n\n}\n\nexport class MenuServices {\n  readonly commandRegistry: CommandRegistry;\n  readonly keybindingRegistry: KeybindingRegistry;\n  readonly contextKeyService: ContextKeyService;\n  readonly context: ContextMenuContext;\n  readonly menuWidgetFactory: MenuWidgetFactory;\n}\n\nexport interface MenuWidgetFactory {\n  createMenuWidget(menu: CompositeMenuNode, options: MenuWidget.IOptions & { commands: MenuCommandRegistry }): MenuWidget;\n}\n\n/**\n * A menu widget that would recompute its items on update.\n */\nexport class DynamicMenuWidget extends MenuWidget {\n\n  /**\n   * We want to restore the focus after the menu closes.\n   */\n  protected previousFocusedElement: HTMLElement | undefined;\n\n  constructor(\n      protected menu: CompositeMenuNode,\n      protected options: MenuWidget.IOptions & { commands: MenuCommandRegistry },\n      protected services: MenuServices\n  ) {\n    super(options);\n    if (menu.label) {\n      this.title.label = menu.label;\n    }\n    if (menu.iconClass) {\n      this.title.iconClass = menu.iconClass;\n    }\n    this.updateSubMenus(this, this.menu, this.options.commands);\n  }\n\n  // Hint: this is not called from the context menu use-case, but is not required.\n  // For the context menu the command registry state is calculated by the factory before `open`.\n  public aboutToShow({previousFocusedElement}: { previousFocusedElement: HTMLElement | undefined }): void {\n    this.preserveFocusedElement(previousFocusedElement);\n    this.clearItems();\n    this.runWithPreservedFocusContext(() => {\n      this.options.commands.snapshot();\n      this.updateSubMenus(this, this.menu, this.options.commands);\n    });\n  }\n\n  public open(x: number, y: number, options?: MenuWidget.IOpenOptions): void {\n    const cb = () => {\n      this.restoreFocusedElement();\n      this.aboutToClose.disconnect(cb);\n    };\n    this.aboutToClose.connect(cb);\n    super.open(x, y, options);\n  }\n\n  protected handleDefault(menuNode: MenuNode): MenuWidget.IItemOptions[] {\n    return [];\n  }\n\n  protected preserveFocusedElement(previousFocusedElement: Element | null = document.activeElement): boolean {\n    if (!this.previousFocusedElement && previousFocusedElement instanceof HTMLElement) {\n      this.previousFocusedElement = previousFocusedElement;\n      return true;\n    }\n    return false;\n  }\n\n  protected restoreFocusedElement(): boolean {\n    if (this.previousFocusedElement) {\n      this.previousFocusedElement.focus({preventScroll: true});\n      this.previousFocusedElement = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  protected runWithPreservedFocusContext(what: () => void): void {\n    let focusToRestore: HTMLElement | undefined = undefined;\n    const {activeElement} = document;\n    if (this.previousFocusedElement && activeElement instanceof HTMLElement && this.previousFocusedElement !== activeElement) {\n      focusToRestore = activeElement;\n      this.previousFocusedElement.focus({preventScroll: true});\n    }\n    try {\n      what();\n    } finally {\n      if (focusToRestore) {\n        focusToRestore.focus({preventScroll: true});\n      }\n    }\n  }\n\n  private updateSubMenus(parent: MenuWidget, menu: CompositeMenuNode, commands: MenuCommandRegistry): void {\n    const items = this.buildSubMenus([], menu, commands);\n    for (const item of items) {\n      parent.addItem(item);\n    }\n  }\n\n  private buildSubMenus(items: MenuWidget.IItemOptions[], menu: CompositeMenuNode, commands: MenuCommandRegistry): MenuWidget.IItemOptions[] {\n    for (const item of menu.children) {\n      if (item instanceof CompositeMenuNode) {\n        if (item.children.length) { // do not render empty nodes\n          if (item.isSubmenu) { // submenu node\n            const submenu = this.services.menuWidgetFactory.createMenuWidget(item, this.options);\n            if (!submenu.items.length) {\n              continue;\n            }\n            items.push({\n              type: 'submenu',\n              submenu,\n            });\n          } else { // group node\n            const submenu = this.buildSubMenus([], item, commands);\n            if (!submenu.length) {\n              continue;\n            }\n            if (items.length) { // do not put a separator above the first group\n              items.push({\n                type: 'separator'\n              });\n            }\n            items.push(...submenu); // render children\n          }\n        }\n      } else if (item instanceof ActionMenuNode) {\n        const {context, contextKeyService} = this.services;\n        const node = item.altNode && context.altPressed ? item.altNode : item;\n        const {when} = node.action;\n        if (!(commands.isVisible(node.action.commandId) && (!when || contextKeyService.match(when)))) {\n          continue;\n        }\n        items.push({\n          command: node.action.commandId,\n          type: 'command'\n        });\n      } else {\n        items.push(...this.handleDefault(item));\n      }\n    }\n    return items;\n  }\n\n}\n\n@injectable()\nexport class BrowserMenuBarContribution implements FrontendApplicationContribution {\n\n  @inject(ApplicationShell)\n  protected readonly shell: ApplicationShell;\n\n\n  constructor(\n      @inject(BrowserMainMenuFactory) protected readonly factory: BrowserMainMenuFactory\n  ) {\n  }\n\n  get menuBar(): MenuBarWidget | undefined {\n    return this.shell.topPanel.widgets.find(w => w instanceof MenuBarWidget) as MenuBarWidget | undefined;\n  }\n\n  onStart(app: FrontendApplication): void {\n    this.appendMenu(app.shell);\n  }\n\n  protected appendMenu(shell: ApplicationShell): void {\n    const logo = this.createLogo();\n    shell.addWidget(logo, {area: 'top'});\n    const menu = this.factory.createMenuBar();\n    shell.addWidget(menu, {area: 'top'});\n    menu.setHidden(['compact', 'hidden'].includes(''));\n  }\n\n  protected createLogo(): Widget {\n    const logo = new Widget();\n    logo.id = 'tart:icon';\n    logo.addClass('tart-icon');\n    return logo;\n  }\n}\n\n/**\n * Stores Tart-specific action menu nodes instead of PhosphorJS commands with their handlers.\n */\nexport class MenuCommandRegistry extends PhosphorCommandRegistry {\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected actions = new Map<string, [ActionMenuNode, any[]]>();\n  protected toDispose = new DisposableCollection();\n\n  constructor(protected services: MenuServices) {\n    super();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  registerActionMenu(menu: ActionMenuNode, args: any[]): void {\n    const {commandId} = menu.action;\n    const {commandRegistry} = this.services;\n    const command = commandRegistry.getCommand(commandId);\n    if (!command) {\n      return;\n    }\n    const {id} = command;\n    if (this.actions.has(id)) {\n      return;\n    }\n    this.actions.set(id, [menu, args]);\n  }\n\n  snapshot(): this {\n    this.toDispose.dispose();\n    for (const [menu, args] of this.actions.values()) {\n      this.toDispose.push(this.registerCommand(menu, args));\n    }\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected registerCommand(menu: ActionMenuNode, args: any[]): Disposable {\n    const {commandRegistry, keybindingRegistry} = this.services;\n    const command = commandRegistry.getCommand(menu.action.commandId);\n    if (!command) {\n      return Disposable.NULL;\n    }\n    const {id} = command;\n    if (this.hasCommand(id)) {\n      // several menu items can be registered for the same command in different contexts\n      return Disposable.NULL;\n    }\n\n    // We freeze the `isEnabled`, `isVisible`, and `isToggled` states so they won't change.\n    const enabled = commandRegistry.isEnabled(id, ...args);\n    const visible = commandRegistry.isVisible(id, ...args);\n    const toggled = commandRegistry.isToggled(id, ...args);\n    const unregisterCommand = this.addCommand(id, {\n      execute: () => commandRegistry.executeCommand(id, ...args),\n      label: menu.label,\n      icon: menu.icon,\n      isEnabled: () => enabled,\n      isVisible: () => visible,\n      isToggled: () => toggled\n    });\n\n    const bindings = keybindingRegistry.getKeybindingsForCommand(id);\n    // Only consider the first keybinding.\n    if (bindings.length) {\n      const binding = bindings[0];\n      const keys = keybindingRegistry.acceleratorFor(binding);\n      this.addKeyBinding({\n        command: id,\n        keys,\n        selector: '.p-Widget' // We have the PhosphorJS dependency anyway.\n      });\n    }\n    return Disposable.create(() => unregisterCommand.dispose());\n  }\n\n}\n"]}