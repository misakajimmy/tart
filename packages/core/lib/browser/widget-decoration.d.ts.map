{"version":3,"sources":["browser/widget-decoration.ts"],"names":[],"mappings":"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","file":"../../src/browser/widget-decoration.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/**\n * Namespace for the decoration data and the styling refinements for the decorated widgets.\n */\nexport namespace WidgetDecoration {\n\n  /**\n   * CSS styles for the decorators.\n   */\n  export namespace Styles {\n    export const CAPTION_HIGHLIGHT_CLASS = 'tart-caption-highlight';\n    export const CAPTION_PREFIX_CLASS = 'tart-caption-prefix';\n    export const CAPTION_SUFFIX_CLASS = 'tart-caption-suffix';\n    export const ICON_WRAPPER_CLASS = 'tart-icon-wrapper';\n    export const DECORATOR_SIZE_CLASS = 'tart-decorator-size';\n    export const DECORATOR_SIDEBAR_SIZE_CLASS = 'tart-decorator-sidebar-size';\n    export const TOP_RIGHT_CLASS = 'tart-top-right';\n    export const BOTTOM_RIGHT_CLASS = 'tart-bottom-right';\n    export const BOTTOM_RIGHT_SIDEBAR_CLASS = 'tart-bottom-right-sidebar';\n    export const BOTTOM_LEFT_CLASS = 'tart-bottom-left';\n    export const TOP_LEFT_CLASS = 'tart-top-left';\n  }\n  /**\n   * For the sake of simplicity, we have merged the `font-style`, `font-weight`, and the `text-decoration` together.\n   */\n  export type FontStyle = 'normal' | 'bold' | 'italic' | 'oblique' | 'underline' | 'line-through';\n  /**\n   * A string that could be:\n   *\n   *  - one of the browser colors, (E.g.: `blue`, `red`, `magenta`),\n   *  - the case insensitive hexadecimal color code, (for instance, `#ee82ee`, `#20B2AA`, `#f09` ), or\n   *  - either the `rgb()` or the `rgba()` functions.\n   *\n   * For more details, see: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value.\n   *\n   * Note, it is highly recommended to use one of the predefined colors of Tart, so the desired color will\n   * look nice with both the `light` and the `dark` theme too.\n   */\n  export type Color = string;\n\n  /**\n   * Encapsulates styling information of the font.\n   */\n  export interface FontData {\n    /**\n     * Zero to any font style.\n     */\n    readonly style?: FontStyle | FontStyle[];\n    /**\n     * The color of the font.\n     */\n    readonly color?: Color;\n  }\n\n  /**\n   * Arbitrary information that has to be shown either before or after the caption as a prefix or a suffix.\n   */\n  export interface CaptionAffix {\n    /**\n     * The text content of the prefix or the suffix.\n     */\n    readonly data: string;\n    /**\n     * Font data for customizing the prefix of the suffix.\n     */\n    readonly fontData?: FontData;\n  }\n\n  export interface BaseTailDecoration {\n    /**\n     * Optional tooltip for the tail decoration.\n     */\n    readonly tooltip?: string;\n  }\n\n  /**\n   * Unlike caption suffixes, tail decorations appears right-aligned after the caption and the caption suffixes (is any).\n   */\n  export interface TailDecoration extends BaseTailDecoration {\n    /**\n     * The text content of the tail decoration.\n     */\n    readonly data: string;\n    /**\n     * Font data for customizing the content.\n     */\n    readonly fontData?: FontData;\n  }\n\n  export interface TailDecorationIcon extends BaseTailDecoration {\n    /**\n     * This should be the name of the Font Awesome icon with out the `fa fa-` prefix, just the name, for instance `paw`.\n     * For the existing icons, see here: https://fontawesome.com/v4.7.0/icons/.\n     */\n    readonly icon: string;\n    /**\n     * The color of the icon.\n     */\n    readonly color?: Color;\n  }\n\n  export interface TailDecorationIconClass extends BaseTailDecoration {\n    /**\n     * This should be the entire Font Awesome class array, for instance ['fa', 'fa-paw']\n     * For the existing icons, see here: https://fontawesome.com/v4.7.0/icons/.\n     */\n    readonly iconClass: string[];\n    /**\n     * The color of the icon.\n     */\n    readonly color?: Color;\n  }\n\n  /**\n   * Enumeration for the quadrant to overlay the image on.\n   */\n  export enum IconOverlayPosition {\n    /**\n     * Overlays the top right quarter of the original image.\n     */\n    TOP_RIGHT,\n    /**\n     * Overlays the bottom right of the original image.\n     */\n    BOTTOM_RIGHT,\n    /**\n     * Overlays the bottom left segment of the original image.\n     */\n    BOTTOM_LEFT,\n    /**\n     * Occupies the top left quarter of the original icon.\n     */\n    TOP_LEFT\n  }\n\n  export namespace IconOverlayPosition {\n    /**\n     * Returns with the CSS class style for the enum.\n     */\n    export function getStyle(position: IconOverlayPosition, inSideBar?: boolean): string {\n      switch (position) {\n        case IconOverlayPosition.TOP_RIGHT:\n          return WidgetDecoration.Styles.TOP_RIGHT_CLASS;\n        case IconOverlayPosition.BOTTOM_RIGHT:\n          return inSideBar ? WidgetDecoration.Styles.BOTTOM_RIGHT_SIDEBAR_CLASS : WidgetDecoration.Styles.BOTTOM_RIGHT_CLASS;\n        case IconOverlayPosition.BOTTOM_LEFT:\n          return WidgetDecoration.Styles.BOTTOM_LEFT_CLASS;\n        case IconOverlayPosition.TOP_LEFT:\n          return WidgetDecoration.Styles.TOP_LEFT_CLASS;\n      }\n    }\n  }\n\n  /**\n   * A shape that can be optionally rendered behind the overlay icon. Can be used to further refine colors.\n   */\n  export interface IconOverlayBackground {\n    /**\n     * Either `circle` or `square`.\n     */\n    readonly shape: 'circle' | 'square';\n    /**\n     * The color of the background shape.\n     */\n    readonly color?: Color;\n  }\n\n  /**\n   * Has not effect if the widget being decorated has no associated icon.\n   */\n  export interface BaseOverlay {\n    /**\n     * The position where the decoration will be placed on the top of the original icon.\n     */\n    readonly position: IconOverlayPosition;\n    /**\n     * The color of the overlaying icon. If not specified, then the default icon color will be used.\n     */\n    readonly color?: Color;\n    /**\n     * The optional background color of the overlay icon.\n     */\n    readonly background?: IconOverlayBackground;\n  }\n\n  export interface IconOverlay extends BaseOverlay {\n    /**\n     * This should be the name of the Font Awesome icon with out the `fa fa-` prefix, just the name, for instance `paw`.\n     * For the existing icons, see here: https://fontawesome.com/v4.7.0/icons/.\n     */\n    readonly icon: string;\n  }\n\n  export interface IconClassOverlay extends BaseOverlay {\n    /**\n     * This should be the entire Font Awesome class array, for instance ['fa', 'fa-paw']\n     * For the existing icons, see here: https://fontawesome.com/v4.7.0/icons/.\n     */\n    readonly iconClass: string[];\n  }\n\n  /**\n   * The caption highlighting with the highlighted ranges and an optional background color.\n   */\n  export interface CaptionHighlight {\n    /**\n     * The ranges to highlight in the caption.\n     */\n    readonly ranges: CaptionHighlight.Range[];\n    /**\n     * The optional color of the text data that is being highlighted. Falls back to the default `mark` color values defined under a widget segment class.\n     */\n    readonly color?: Color;\n    /**\n     * The optional background color of the text data that is being highlighted.\n     */\n    readonly backgroundColor?: Color;\n  }\n\n  export namespace CaptionHighlight {\n    /**\n     * A pair of offset and length that has to be highlighted as a range.\n     */\n    export interface Range {\n      /**\n       * Zero based offset of the highlighted region.\n       */\n      readonly offset: number;\n      /**\n       * The length of the highlighted region.\n       */\n      readonly length: number;\n    }\n\n    export namespace Range {\n      /**\n       * `true` if the `arg` is contained in the range. The ranges are closed ranges, hence the check is inclusive.\n       */\n      export function contains(arg: number, range: Range): boolean {\n        return arg >= range.offset && arg <= (range.offset + range.length);\n      }\n    }\n\n    /**\n     * The result of a caption splitting based on the highlighting information.\n     */\n    export interface Fragment {\n      /**\n       * The text data of the fragment.\n       */\n      readonly data: string;\n      /**\n       * Has to be highlighted if defined.\n       */\n      readonly highlight?: true;\n    }\n\n    /**\n     * Splits the `caption` argument based on the ranges from the `highlight` argument.\n     */\n    export function split(caption: string, highlight: CaptionHighlight): Fragment[] {\n      const result: Fragment[] = [];\n      const ranges = highlight.ranges.slice();\n      const containerOf = (index: number) => ranges.findIndex(range => Range.contains(index, range));\n      let data = '';\n      for (let i = 0; i < caption.length; i++) {\n        const containerIndex = containerOf(i);\n        if (containerIndex === -1) {\n          data += caption[i];\n        } else {\n          if (data.length > 0) {\n            result.push({data});\n          }\n          const {length} = ranges.splice(containerIndex, 1).shift()!;\n          result.push({data: caption.substr(i, length), highlight: true});\n          data = '';\n          i = i + length - 1;\n        }\n      }\n      if (data.length > 0) {\n        result.push({data});\n      }\n      if (ranges.length !== 0) {\n        throw new Error('Error occurred when splitting the caption. There was a mismatch between the caption and the corresponding highlighting ranges.');\n      }\n      return result;\n    }\n  }\n\n  /**\n   * Encapsulates styling information that has to be applied on the widget which we decorate.\n   */\n  export interface Data {\n    /**\n     * The higher number has higher priority. If not specified, treated as `0`.\n     * When multiple decorators are available for the same item, and decoration data cannot be merged together,\n     * then the higher priority item will be applied on the decorated element and the lower priority will be ignored.\n     */\n    readonly priority?: number;\n    /**\n     * The font data for the caption.\n     */\n    readonly fontData?: FontData;\n    /**\n     * The background color of the entire row.\n     */\n    readonly backgroundColor?: Color;\n    /**\n     * Optional, leading prefixes right before the caption.\n     */\n    readonly captionPrefixes?: CaptionAffix[];\n    /**\n     * Suffixes that might come after the caption as an additional information.\n     */\n    readonly captionSuffixes?: CaptionAffix[];\n    /**\n     * Optional right-aligned decorations that appear after the widget caption and after the caption suffixes (is any).\n     */\n    readonly tailDecorations?: Array<TailDecoration | TailDecorationIcon | TailDecorationIconClass>;\n    /**\n     * Custom tooltip for the decorated item. Tooltip will be appended to the original tooltip, if any.\n     */\n    readonly tooltip?: string;\n    /**\n     * Sets the color of the icon. Ignored if the decorated item has no icon.\n     */\n    readonly iconColor?: Color;\n    /**\n     * Has not effect if given, but the widget does not have an associated image.\n     */\n    readonly iconOverlay?: IconOverlay | IconClassOverlay;\n    /**\n     * An array of ranges to highlight the caption.\n     */\n    readonly highlight?: CaptionHighlight;\n    /**\n     * A count badge for widgets.\n     */\n    readonly badge?: number;\n  }\n\n  export namespace Data {\n    /**\n     * Compares the decoration data based on the priority. Lowest priorities come first.\n     */\n    export const comparePriority = (left: Data, right: Data): number => (left.priority || 0) - (right.priority || 0);\n  }\n}\n"]}