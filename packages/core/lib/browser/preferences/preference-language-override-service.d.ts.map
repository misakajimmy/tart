{"version":3,"sources":["browser/preferences/preference-language-override-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAIlF,OAAO,EAAC,0BAA0B,EAAC,MAAM,4CAA4C,CAAC;AAEtF,MAAM,WAAW,sBAAsB;IACrC,cAAc,EAAE,MAAM,CAAA;IACtB,kBAAkB,EAAE,MAAM,CAAA;CAC3B;AAED,yBAAiB,sBAAsB,CAAC;IAEtC,SAAgB,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,sBAAsB,CAE1D;CACF;AAGD,eAAO,MAAM,yBAAyB,QAAgC,CAAC;AACvE,eAAO,MAAM,kBAAkB,eAAgB,MAAM,WAA6B,CAAC;AAEnF,qBACa,iCAAiC;IAC5C,SAAS,CAAC,QAAQ,CAAC,mBAAmB,cAAqB;IAG3D,iBAAiB,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,KAAK,IAAI,0BAA0B;IAIhF,sBAAsB,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,EAAE,sBAAsB,GAAG,MAAM;IAI5F,wBAAwB,CAAC,IAAI,EAAE,MAAM,GAAG,sBAAsB,GAAG,SAAS;IAc1E,mCAAmC,IAAI,MAAM,GAAG,SAAS;IAWvD,0BAA0B,CAAC,cAAc,EAAE,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC;IAM9E;;;OAGG;IACH,qBAAqB,CAAC,kBAAkB,EAAE,MAAM,GAAG,OAAO;IAQ1D;;;OAGG;IACH,wBAAwB,CAAC,kBAAkB,EAAE,MAAM,GAAG,OAAO;CAG9D","file":"../../../src/browser/preferences/preference-language-override-service.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2021 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {escapeRegExpCharacters} from '../../common';\nimport {PreferenceSchemaProperties} from '../../common/preferences/preference-schema';\n\nexport interface OverridePreferenceName {\n  preferenceName: string\n  overrideIdentifier: string\n}\n\nexport namespace OverridePreferenceName {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  export function is(arg: any): arg is OverridePreferenceName {\n    return !!arg && typeof arg === 'object' && 'preferenceName' in arg && 'overrideIdentifier' in arg;\n  }\n}\n\nconst OVERRIDE_PROPERTY = '\\\\[(.*)\\\\]$';\nexport const OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\nexport const getOverridePattern = (identifier: string) => `\\\\[(${identifier})\\\\]$`;\n\n@injectable()\nexport class PreferenceLanguageOverrideService {\n  protected readonly overrideIdentifiers = new Set<string>();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  testOverrideValue(name: string, value: any): value is PreferenceSchemaProperties {\n    return PreferenceSchemaProperties.is(value) && OVERRIDE_PROPERTY_PATTERN.test(name);\n  }\n\n  overridePreferenceName({preferenceName, overrideIdentifier}: OverridePreferenceName): string {\n    return `[${overrideIdentifier}].${preferenceName}`;\n  }\n\n  overriddenPreferenceName(name: string): OverridePreferenceName | undefined {\n    const index = name.indexOf('.');\n    if (index === -1) {\n      return undefined;\n    }\n    const matches = name.substr(0, index).match(OVERRIDE_PROPERTY_PATTERN);\n    const overrideIdentifier = matches && matches[1];\n    if (!overrideIdentifier || !this.overrideIdentifiers.has(overrideIdentifier)) {\n      return undefined;\n    }\n    const preferenceName = name.substr(index + 1);\n    return {preferenceName, overrideIdentifier};\n  }\n\n  computeOverridePatternPropertiesKey(): string | undefined {\n    let param: string = '';\n    for (const overrideIdentifier of this.overrideIdentifiers) {\n      if (param.length) {\n        param += '|';\n      }\n      param += new RegExp(escapeRegExpCharacters(overrideIdentifier)).source;\n    }\n    return param.length ? getOverridePattern(param) : undefined;\n  }\n\n  * getOverridePreferenceNames(preferenceName: string): IterableIterator<string> {\n    for (const overrideIdentifier of this.overrideIdentifiers) {\n      yield this.overridePreferenceName({preferenceName, overrideIdentifier});\n    }\n  }\n\n  /**\n   * @param overrideIdentifier\n   * @returns true if the addition caused a change, i.e. if the identifier was not already present in the set of identifiers, false otherwise.\n   */\n  addOverrideIdentifier(overrideIdentifier: string): boolean {\n    const alreadyPresent = this.overrideIdentifiers.has(overrideIdentifier);\n    if (!alreadyPresent) {\n      this.overrideIdentifiers.add(overrideIdentifier);\n    }\n    return !alreadyPresent;\n  }\n\n  /**\n   * @param overrideIdentifier\n   * @returns true if the deletion caused a change, i.e. if the identifier was present in the set, false otherwise.\n   */\n  removeOverrideIdentifier(overrideIdentifier: string): boolean {\n    return this.overrideIdentifiers.delete(overrideIdentifier);\n  }\n}\n"]}