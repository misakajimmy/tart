{"version":3,"sources":["browser/preferences/preference-contribution.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAc,KAAK,EAAE,aAAa,EAAC,MAAM,WAAW,CAAC;AAC/E,OAAO,EAAC,4BAA4B,EAAE,wBAAwB,EAAC,MAAM,6BAA6B,CAAC;AACnG,OAAO,EAAC,kBAAkB,EAA+B,MAAM,uBAAuB,CAAC;AACvF,OAAO,EACL,sBAAsB,EAGtB,gBAAgB,EAChB,0BAA0B,EAC3B,MAAM,4CAA4C,CAAC;AACpD,OAAO,EAAC,wBAAwB,EAAE,oBAAoB,EAAE,UAAU,EAAE,OAAO,EAAiB,MAAM,cAAc,CAAC;AACjH,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAC,iCAAiC,EAAC,MAAM,yCAAyC,CAAC;AAE1F,OAAO,EAAC,iCAAiC,EAAC,MAAM,wCAAwC,CAAC;AAEzF,OAAO,EAAC,gBAAgB,EAAE,0BAA0B,EAAwC,sBAAsB,EAAC,CAAC;AAEpH,MAAM,CAAC,MAAM,sBAAsB,GAAG,MAAM,CAAC,wBAAwB,CAAC,CAAC;AAMvE,MAAM,UAAU,4BAA4B,CAAC,IAAqB;IAChE,4BAA4B,CAAC,IAAI,CAAC,CAAC;IACnC,IAAI,CAAC,wBAAwB,CAAC,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE,CAAC;IAC3D,IAAI,CAAC,iCAAiC,CAAC,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE,CAAC;IACpE,wBAAwB,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAC;AACzD,CAAC;AAYD,MAAM,KAAW,mCAAmC,CAInD;AAJD,WAAiB,mCAAmC;IAClD,SAAgB,EAAE,CAAC,MAAiC;QAClD,OAAO,aAAa,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,aAAa,CAAC,KAAK,QAAQ,CAAC;IAC9E,CAAC;IAFe,sCAAE,KAEjB,CAAA;AACH,CAAC,EAJgB,mCAAmC,KAAnC,mCAAmC,QAInD;AAGD;;;;GAIG;AAEH,IAAa,wBAAwB,GAArC,MAAa,wBAAyB,SAAQ,kBAAkB;IAE3C,WAAW,GAA4B,EAAE,CAAC;IAC1C,cAAc,GAAyB,EAAC,UAAU,EAAE,EAAE,EAAE,iBAAiB,EAAE,EAAE,EAAC,CAAC;IAC/E,eAAe,GAAyB,EAAC,UAAU,EAAE,EAAE,EAAE,iBAAiB,EAAE,EAAE,EAAC,CAAC;IAChF,YAAY,GAAyB,EAAC,UAAU,EAAE,EAAE,EAAE,iBAAiB,EAAE,EAAE,EAAC,CAAC;IAG7E,uBAAuB,CAA+C;IAGtE,cAAc,CAA2B;IAEzC,mCAAmC,GAAG,IAAI,OAAO,EAAQ,CAAC;IACpE,4BAA4B,GAAgB,IAAI,CAAC,mCAAmC,CAAC,KAAK,CAAC;IACjF,yBAAyB,GAA2G;QACrJ,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,4DAA4D;QACzE,YAAY,EAAE,8CAA8C;QAC5D,UAAU,EAAE,EAAE;QACd,oBAAoB,EAAE,KAAK;KAC5B,CAAC;IAEF,cAAc;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,SAAS,CAAC,MAAwB;QAChC,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACnB,OAAO,UAAU,CAAC,IAAI,CAAC;SACxB;QACD,IAAI,CAAC,8BAA8B,EAAE,CAAC;QACtC,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC;QAC1C,OAAO,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE;YAC5B,MAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACnD,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;gBAC1B,OAAO;aACR;YACD,IAAI,CAAC,8BAA8B,EAAE,CAAC;YACtC,IAAI,CAAC,2BAA2B,CAAC,cAAc,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,cAAc,CAAC,cAAsB,EAAE,KAAsB;QAC3D,IAAI,QAAQ,CAAC;QACb,MAAM,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,wBAAwB,CAAC,cAAc,CAAC,CAAC;QAC3F,IAAI,UAAU,EAAE;YACd,6BAA6B;YAC7B,QAAQ,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,UAAU,CAAC,kBAAkB,GAAG,CAAC,CAAC;YAChF,QAAQ,GAAG,QAAQ,IAAI,QAAQ,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;YAC3D,IAAI,CAAC,QAAQ,EAAE;gBACb,iCAAiC;gBACjC,QAAQ,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;aACtE;YACD,IAAI,CAAC,QAAQ,EAAE;gBACb,4BAA4B;gBAC5B,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;aACtE;SACF;aAAM;YACL,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;SAC3D;QACD,OAAO,QAAQ,IAAI,QAAQ,CAAC,KAAM,IAAI,KAAK,CAAC;IAC9C,CAAC;IAED,CAAE,kBAAkB;QAClB,KAAK,MAAM,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE;YAC3D,MAAM,cAAc,CAAC;YACrB,KAAK,MAAM,sBAAsB,IAAI,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,EAAE;gBACpF,MAAM,sBAAsB,CAAC;aAC9B;SACF;IACH,CAAC;IAED,0BAA0B,CAAC,cAAsB;QAC/C,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QAClE,IAAI,UAAU,IAAI,UAAU,CAAC,WAAW,EAAE;YACxC,OAAO,IAAI,CAAC,yBAAyB,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAC;SAClF;QACD,OAAO,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;IAC/B,CAAC;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAES,aAAa,CAAC,OAAuC;QAC7D,MAAM,cAAc,GAAmC,EAAE,CAAC;QAC1D,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;YAC7C,MAAM,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,wBAAwB,CAAC,cAAc,CAAC,CAAC;YAC3F,IAAI,UAAU,EAAE;gBACd,OAAO,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,kBAAkB,GAAG,CAAC,CAAC;gBACvF,IAAI,CAAC,qBAAqB,CAAC,IAAI,UAAU,CAAC,kBAAkB,GAAG,CAAC,CAAC;aAClE;iBAAM;gBACL,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;aAC5C;YACD,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YACjC,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YACjC,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,GAAG,MAAM,CAAC;YAC/B,MAAM,aAAa,GAA0C,EAAC,cAAc,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC;YACvG,IAAI,OAAO,QAAQ,KAAK,SAAS,EAAE;gBACjC,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;aACzC;iBAAM;gBACL,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAClC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,QAAQ,CAAC;aAC7C;YACD,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SACpC;QACD,OAAO,cAAc,CAAC;IACxB,CAAC;IAES,8BAA8B;QACtC,IAAI,CAAC,mCAAmC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC3D,CAAC;IAES,qBAAqB,CAAC,GAAW;QACzC,wFAAwF;QACxF,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC5C,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAC3C,CAAC;IAGS,IAAI;QACZ,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACjC,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAChE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,oBAAoB,GAAG,KAAK,CAAC;QACjD,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAES,yBAAyB;QACjC,MAAM,MAAM,GAAG,iCAAiC,CAAC,GAAG,EAAE,CAAC;QACvD,IAAI,mCAAmC,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;YAClD,IAAI;gBACF,MAAM,kBAAkB,GAAG,MAAM,CAAC,WAAW,CAAC;gBAC9C,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;gBACjE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;gBAChD,MAAM,KAAK,GAAG,eAAe,CAAC,OAAO,CAAC;gBACtC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;gBAChC,MAAM,OAAO,GAAmC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;qBACxE,GAAG,CAAC,CAAC,GAAG,EAAgC,EAAE,CAAC,CAAC;oBAC3C,cAAc,EAAE,GAAG;oBACnB,QAAQ,EAAE,SAAS;oBACnB,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;oBAC/B,KAAK;oBACL,MAAM;iBACP,CAAC,CAAC,CAAC;gBACR,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC;aAC3C;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,KAAK,CAAC,yDAAyD,EAAE,CAAC,CAAC,CAAC;aAC7E;SACF;IACH,CAAC;IAES,WAAW,CAAC,MAAwB;QAC5C,yBAAyB;QACzB,4CAA4C;QAC5C,gBAAgB;QAChB,2FAA2F;QAC3F,uFAAuF;QACvF,IAAI;QACJ,MAAM,KAAK,GAAG,eAAe,CAAC,OAAO,CAAC;QACtC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAChC,MAAM,OAAO,GAAmC,EAAE,CAAC;QACnD,MAAM,YAAY,GAAG,gBAAgB,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC9D,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,KAAK,CAAC;QAChD,KAAK,MAAM,cAAc,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;YAC3D,IAAI,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE;gBAClD,OAAO,CAAC,KAAK,CAAC,iEAAiE,GAAG,cAAc,CAAC,CAAC;aACnG;iBAAM;gBACL,MAAM,WAAW,GAAG,sBAAsB,CAAC,4BAA4B,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,YAAY,CAAC,CAAC;gBACzH,IAAI,OAAO,WAAW,CAAC,WAAW,KAAK,SAAS,IAAI,WAAW,EAAE;oBAC/D,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC;iBAChC;gBACD,IAAI,WAAW,CAAC,WAAW,EAAE;oBAC3B,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,WAAW,CAAC;iBACzE;gBACD,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;gBAEpD,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;gBACxD,MAAM,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC;gBACpE,IAAI,IAAI,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,cAAc,EAAE,aAAa,CAAC,EAAE;oBACnF,WAAW,CAAC,YAAY,GAAG,0BAA0B,CAAC,EAAE,CAAC,iBAAiB,CAAC;wBACvE,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,aAAa,EAAE,iBAAiB,CAAC;wBAC5D,CAAC,CAAC,aAAa,CAAC;oBACpB,KAAK,MAAM,wBAAwB,IAAI,WAAW,CAAC,YAAY,EAAE;wBAC/D,MAAM,aAAa,GAAG,aAAa,CAAC,wBAAwB,CAAC,CAAC;wBAC9D,MAAM,sBAAsB,GAAG,GAAG,cAAc,IAAI,wBAAwB,EAAE,CAAC;wBAC/E,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,EAAE,aAAa,EAAE,EAAC,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;qBACjG;iBACF;qBAAM;oBACL,WAAW,CAAC,YAAY,GAAG,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,iBAAiB,CAAC;oBAC/F,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,WAAW,CAAC,YAAY,EAAE,EAAC,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;iBACpG;aACF;SACF;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAES,oBAAoB,CAAC,cAAsB,EAAE,QAAa,EAAE,EAAC,KAAK,EAAE,MAAM,EAGnF;QACC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAClD,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,QAAQ,CAAC;QAC5C,OAAO,EAAC,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC;IAC7D,CAAC;IAES,eAAe,CAAC,QAAwB;QAChD,IAAI,QAAQ,CAAC,YAAY,KAAK,SAAS,EAAE;YACvC,OAAO,QAAQ,CAAC,YAAY,CAAC;SAC9B;QACD,IAAI,QAAQ,CAAC,OAAO,KAAK,SAAS,EAAE;YAClC,OAAO,QAAQ,CAAC,OAAO,CAAC;SACzB;QACD,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC7E,QAAQ,IAAI,EAAE;YACZ,KAAK,SAAS;gBACZ,OAAO,KAAK,CAAC;YACf,KAAK,SAAS,CAAC;YACf,KAAK,QAAQ;gBACX,OAAO,CAAC,CAAC;YACX,KAAK,QAAQ;gBACX,OAAO,EAAE,CAAC;YACZ,KAAK,OAAO;gBACV,OAAO,EAAE,CAAC;YACZ,KAAK,QAAQ;gBACX,OAAO,EAAE,CAAC;SACb;QACD,2CAA2C;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC;IAES,oBAAoB,CAAC,cAAsB;QACnD,0DAA0D;QAC1D,kHAAkH;QAClH,iDAAiD;QACjD,IAAI;IACN,CAAC;IAES,iBAAiB,CAAC,GAAW,EAAE,QAAgC;QACvE,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;QAE/C,4BAA4B;QAC5B,mCAAmC;QACnC,wDAAwD;QACxD,8EAA8E;QAC9E,wFAAwF;QACxF,sCAAsC;QACtC,2DAA2D;QAC3D,iBAAiB;QACjB,IAAI;IACN,CAAC;CACF,CAAA;AA5PC;IADC,MAAM,CAAC,oBAAoB,CAAC;IAAE,KAAK,CAAC,sBAAsB,CAAC;yEAC6B;AAGzF;IADC,MAAM,CAAC,wBAAwB,CAAC;gEAC2B;AAqH5D;IADC,aAAa,EAAE;oDAQf;AAvIU,wBAAwB;IADpC,UAAU,EAAE;GACA,wBAAwB,CAoQpC;SApQY,wBAAwB","file":"../../../src/browser/preferences/preference-contribution.js","sourcesContent":["import {inject, injectable, interfaces, named, postConstruct} from 'inversify';\nimport {bindPreferenceConfigurations, PreferenceConfigurations} from './preference-configurations';\nimport {PreferenceProvider, PreferenceProviderDataChange} from './preference-provider';\nimport {\n  PreferenceDataProperty,\n  PreferenceDataSchema,\n  PreferenceItem,\n  PreferenceSchema,\n  PreferenceSchemaProperties\n} from '../../common/preferences/preference-schema';\nimport {bindContributionProvider, ContributionProvider, Disposable, Emitter, Event, Mutable} from '../../common';\nimport {PreferenceScope} from './preference-scope';\nimport {FrontendApplicationConfigProvider} from '../frontend-application-config-provider';\nimport {FrontendApplicationConfig} from '../application-props';\nimport {PreferenceLanguageOverrideService} from './preference-language-override-service';\n\nexport {PreferenceSchema, PreferenceSchemaProperties, PreferenceDataSchema, PreferenceItem, PreferenceDataProperty};\n\nexport const PreferenceContribution = Symbol('PreferenceContribution');\n\nexport interface PreferenceContribution {\n  readonly schema: PreferenceSchema;\n}\n\nexport function bindPreferenceSchemaProvider(bind: interfaces.Bind): void {\n  bindPreferenceConfigurations(bind);\n  bind(PreferenceSchemaProvider).toSelf().inSingletonScope();\n  bind(PreferenceLanguageOverrideService).toSelf().inSingletonScope();\n  bindContributionProvider(bind, PreferenceContribution);\n}\n\n/**\n * Specialized {@link FrontendApplicationConfig} to configure default\n * preference values for the {@link PreferenceSchemaProvider}.\n */\nexport interface FrontendApplicationPreferenceConfig extends FrontendApplicationConfig {\n  preferences: {\n    [preferenceName: string]: any\n  }\n}\n\nexport namespace FrontendApplicationPreferenceConfig {\n  export function is(config: FrontendApplicationConfig): config is FrontendApplicationPreferenceConfig {\n    return 'preferences' in config && typeof config['preferences'] === 'object';\n  }\n}\n\n\n/**\n * The {@link PreferenceSchemaProvider} collects all {@link PreferenceContribution}s and combines\n * the preference schema provided by these contributions into one collective schema. The preferences which\n * are provided by this {@link PreferenceProvider} are derived from this combined schema.\n */\n@injectable()\nexport class PreferenceSchemaProvider extends PreferenceProvider {\n\n  protected readonly preferences: { [name: string]: any } = {};\n  protected readonly combinedSchema: PreferenceDataSchema = {properties: {}, patternProperties: {}};\n  protected readonly workspaceSchema: PreferenceDataSchema = {properties: {}, patternProperties: {}};\n  protected readonly folderSchema: PreferenceDataSchema = {properties: {}, patternProperties: {}};\n\n  @inject(ContributionProvider) @named(PreferenceContribution)\n  protected readonly preferenceContributions: ContributionProvider<PreferenceContribution>;\n\n  @inject(PreferenceConfigurations)\n  protected readonly configurations: PreferenceConfigurations;\n\n  protected readonly onDidPreferenceSchemaChangedEmitter = new Emitter<void>();\n  readonly onDidPreferenceSchemaChanged: Event<void> = this.onDidPreferenceSchemaChangedEmitter.event;\n  protected readonly overridePatternProperties: Required<Pick<PreferenceDataProperty, 'properties' | 'additionalProperties'>> & PreferenceDataProperty = {\n    type: 'object',\n    description: 'Configure editor settings to be overridden for a language.',\n    errorMessage: 'Unknown Identifier. Use language identifiers',\n    properties: {},\n    additionalProperties: false\n  };\n\n  getPreferences(): { [name: string]: any } {\n    return this.preferences;\n  }\n\n  setSchema(schema: PreferenceSchema): Disposable {\n    const changes = this.doSetSchema(schema);\n    if (!changes.length) {\n      return Disposable.NULL;\n    }\n    this.fireDidPreferenceSchemaChanged();\n    this.emitPreferencesChangedEvent(changes);\n    return Disposable.create(() => {\n      const inverseChanges = this.doUnsetSchema(changes);\n      if (!inverseChanges.length) {\n        return;\n      }\n      this.fireDidPreferenceSchemaChanged();\n      this.emitPreferencesChangedEvent(inverseChanges);\n    });\n  }\n\n  async setPreference(): Promise<boolean> {\n    return false;\n  }\n\n  isValidInScope(preferenceName: string, scope: PreferenceScope): boolean {\n    let property;\n    const overridden = this.preferenceOverrideService.overriddenPreferenceName(preferenceName);\n    if (overridden) {\n      // try from overridden schema\n      property = this.overridePatternProperties[`[${overridden.overrideIdentifier}]`];\n      property = property && property[overridden.preferenceName];\n      if (!property) {\n        // try from overridden identifier\n        property = this.overridePatternProperties[overridden.preferenceName];\n      }\n      if (!property) {\n        // try from overridden value\n        property = this.combinedSchema.properties[overridden.preferenceName];\n      }\n    } else {\n      property = this.combinedSchema.properties[preferenceName];\n    }\n    return property && property.scope! >= scope;\n  }\n\n  * getPreferenceNames(): IterableIterator<string> {\n    for (const preferenceName in this.combinedSchema.properties) {\n      yield preferenceName;\n      for (const overridePreferenceName of this.getOverridePreferenceNames(preferenceName)) {\n        yield overridePreferenceName;\n      }\n    }\n  }\n\n  getOverridePreferenceNames(preferenceName: string): IterableIterator<string> {\n    const preference = this.combinedSchema.properties[preferenceName];\n    if (preference && preference.overridable) {\n      return this.preferenceOverrideService.getOverridePreferenceNames(preferenceName);\n    }\n    return [][Symbol.iterator]();\n  }\n\n  getCombinedSchema(): PreferenceDataSchema {\n    return this.combinedSchema;\n  }\n\n  protected doUnsetSchema(changes: PreferenceProviderDataChange[]): PreferenceProviderDataChange[] {\n    const inverseChanges: PreferenceProviderDataChange[] = [];\n    for (const change of changes) {\n      const preferenceName = change.preferenceName;\n      const overridden = this.preferenceOverrideService.overriddenPreferenceName(preferenceName);\n      if (overridden) {\n        delete this.overridePatternProperties.properties[`[${overridden.overrideIdentifier}]`];\n        this.removePropFromSchemas(`[${overridden.overrideIdentifier}]`);\n      } else {\n        this.removePropFromSchemas(preferenceName);\n      }\n      const newValue = change.oldValue;\n      const oldValue = change.newValue;\n      const {scope, domain} = change;\n      const inverseChange: Mutable<PreferenceProviderDataChange> = {preferenceName, oldValue, scope, domain};\n      if (typeof newValue === undefined) {\n        delete this.preferences[preferenceName];\n      } else {\n        inverseChange.newValue = newValue;\n        this.preferences[preferenceName] = newValue;\n      }\n      inverseChanges.push(inverseChange);\n    }\n    return inverseChanges;\n  }\n\n  protected fireDidPreferenceSchemaChanged(): void {\n    this.onDidPreferenceSchemaChangedEmitter.fire(undefined);\n  }\n\n  protected removePropFromSchemas(key: string): void {\n    // If we remove a key from combined, it should also be removed from all narrower scopes.\n    delete this.combinedSchema.properties[key];\n    delete this.workspaceSchema.properties[key];\n    delete this.folderSchema.properties[key];\n  }\n\n  @postConstruct()\n  protected init(): void {\n    this.readConfiguredPreferences();\n    this.preferenceContributions.getContributions().forEach(contrib => {\n      this.doSetSchema(contrib.schema);\n    });\n    this.combinedSchema.additionalProperties = false;\n    this._ready.resolve();\n  }\n\n  protected readConfiguredPreferences(): void {\n    const config = FrontendApplicationConfigProvider.get();\n    if (FrontendApplicationPreferenceConfig.is(config)) {\n      try {\n        const configuredDefaults = config.preferences;\n        const parsedDefaults = this.getParsedContent(configuredDefaults);\n        Object.assign(this.preferences, parsedDefaults);\n        const scope = PreferenceScope.Default;\n        const domain = this.getDomain();\n        const changes: PreferenceProviderDataChange[] = Object.keys(this.preferences)\n            .map((key): PreferenceProviderDataChange => ({\n              preferenceName: key,\n              oldValue: undefined,\n              newValue: this.preferences[key],\n              scope,\n              domain\n            }));\n        this.emitPreferencesChangedEvent(changes);\n      } catch (e) {\n        console.error('Failed to load preferences from frontend configuration.', e);\n      }\n    }\n  }\n\n  protected doSetSchema(schema: PreferenceSchema): PreferenceProviderDataChange[] {\n    // const ajv = new Ajv();\n    // const valid = ajv.validateSchema(schema);\n    // if (!valid) {\n    //   const errors = !!ajv.errors ? ajv.errorsText(ajv.errors) : 'unknown validation error';\n    //   console.warn('A contributed preference schema has validation issues : ' + errors);\n    // }\n    const scope = PreferenceScope.Default;\n    const domain = this.getDomain();\n    const changes: PreferenceProviderDataChange[] = [];\n    const defaultScope = PreferenceSchema.getDefaultScope(schema);\n    const overridable = schema.overridable || false;\n    for (const preferenceName of Object.keys(schema.properties)) {\n      if (this.combinedSchema.properties[preferenceName]) {\n        console.error('Preference name collision detected in the schema for property: ' + preferenceName);\n      } else {\n        const schemaProps = PreferenceDataProperty.fromPreferenceSchemaProperty(schema.properties[preferenceName], defaultScope);\n        if (typeof schemaProps.overridable !== 'boolean' && overridable) {\n          schemaProps.overridable = true;\n        }\n        if (schemaProps.overridable) {\n          this.overridePatternProperties.properties[preferenceName] = schemaProps;\n        }\n        this.updateSchemaProps(preferenceName, schemaProps);\n\n        const schemaDefault = this.getDefaultValue(schemaProps);\n        const configuredDefault = this.getConfiguredDefault(preferenceName);\n        if (this.preferenceOverrideService.testOverrideValue(preferenceName, schemaDefault)) {\n          schemaProps.defaultValue = PreferenceSchemaProperties.is(configuredDefault)\n              ? PreferenceProvider.merge(schemaDefault, configuredDefault)\n              : schemaDefault;\n          for (const overriddenPreferenceName in schemaProps.defaultValue) {\n            const overrideValue = schemaDefault[overriddenPreferenceName];\n            const overridePreferenceName = `${preferenceName}.${overriddenPreferenceName}`;\n            changes.push(this.doSetPreferenceValue(overridePreferenceName, overrideValue, {scope, domain}));\n          }\n        } else {\n          schemaProps.defaultValue = configuredDefault === undefined ? schemaDefault : configuredDefault;\n          changes.push(this.doSetPreferenceValue(preferenceName, schemaProps.defaultValue, {scope, domain}));\n        }\n      }\n    }\n    return changes;\n  }\n\n  protected doSetPreferenceValue(preferenceName: string, newValue: any, {scope, domain}: {\n    scope: PreferenceScope,\n    domain?: string[]\n  }): PreferenceProviderDataChange {\n    const oldValue = this.preferences[preferenceName];\n    this.preferences[preferenceName] = newValue;\n    return {preferenceName, oldValue, newValue, scope, domain};\n  }\n\n  protected getDefaultValue(property: PreferenceItem): any {\n    if (property.defaultValue !== undefined) {\n      return property.defaultValue;\n    }\n    if (property.default !== undefined) {\n      return property.default;\n    }\n    const type = Array.isArray(property.type) ? property.type[0] : property.type;\n    switch (type) {\n      case 'boolean':\n        return false;\n      case 'integer':\n      case 'number':\n        return 0;\n      case 'string':\n        return '';\n      case 'array':\n        return [];\n      case 'object':\n        return {};\n    }\n    // eslint-disable-next-line no-null/no-null\n    return null;\n  }\n\n  protected getConfiguredDefault(preferenceName: string): any {\n    // const config = FrontendApplicationConfigProvider.get();\n    // if (preferenceName && FrontendApplicationPreferenceConfig.is(config) && preferenceName in config.preferences) {\n    //     return config.preferences[preferenceName];\n    // }\n  }\n\n  protected updateSchemaProps(key: string, property: PreferenceDataProperty): void {\n    this.combinedSchema.properties[key] = property;\n\n    // switch (property.scope) {\n    //     case PreferenceScope.Folder:\n    //         this.folderSchema.properties[key] = property;\n    //     // Fall through. isValidInScope implies that User ⊃ Workspace ⊃ Folder,\n    //     // so anything we add to folder should be added to workspace, but not vice versa.\n    //     case PreferenceScope.Workspace:\n    //         this.workspaceSchema.properties[key] = property;\n    //         break;\n    // }\n  }\n}\n"]}