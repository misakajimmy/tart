{"version":3,"sources":["browser/preferences/preference-configurations.ts"],"names":[],"mappings":"AAAA,OAAO,EAAqB,UAAU,EAAQ,MAAM,WAAW,CAAC;AAChE,OAAO,GAAG,MAAM,kBAAkB,CAAC;AACnC,OAAO,EAA2B,oBAAoB,EAAC,MAAM,oCAAoC,CAAC;AAElG,eAAO,MAAM,uBAAuB,eAAoC,CAAC;AAEzE,MAAM,WAAW,uBAAuB;IACtC,IAAI,EAAE,MAAM,CAAC;CACd;AAED,wBAAgB,4BAA4B,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,GAAG,IAAI,CAGxE;AAED,qBACa,wBAAwB;IAEnC,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,oBAAoB,CAAC,uBAAuB,CAAC,CAAC;IAC3E,SAAS,CAAC,YAAY,EAAE,MAAM,EAAE,GAAG,SAAS,CAAC;IAG7C,QAAQ,IAAI,MAAM,EAAE;IAIpB,aAAa,IAAI,MAAM;IAIvB,eAAe,IAAI,MAAM,EAAE;IAO3B,aAAa,CAAC,IAAI,EAAE,MAAM,GAAG,OAAO;IAIpC,WAAW,CAAC,IAAI,EAAE,MAAM,GAAG,OAAO;IAIlC,YAAY,CAAC,SAAS,EAAE,GAAG,GAAG,SAAS,GAAG,OAAO;IAIjD,WAAW,CAAC,SAAS,EAAE,GAAG,GAAG,SAAS,GAAG,OAAO;IAIhD,OAAO,CAAC,SAAS,EAAE,GAAG,GAAG,MAAM;IAI/B,OAAO,CAAC,SAAS,EAAE,GAAG,GAAG,MAAM;IAI/B,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,GAAE,MAA2B,EAAE,UAAU,GAAE,MAA6B,GAAG,GAAG;CAIhH","file":"../../../src/browser/preferences/preference-configurations.d.ts","sourcesContent":["import {inject, injectable, interfaces, named} from 'inversify';\nimport URI from '../../common/uri';\nimport {bindContributionProvider, ContributionProvider} from '../../common/contribution-provider';\n\nexport const PreferenceConfiguration = Symbol('PreferenceConfiguration');\n\nexport interface PreferenceConfiguration {\n  name: string;\n}\n\nexport function bindPreferenceConfigurations(bind: interfaces.Bind): void {\n  bindContributionProvider(bind, PreferenceConfiguration);\n  bind(PreferenceConfigurations).toSelf().inSingletonScope();\n}\n\n@injectable()\nexport class PreferenceConfigurations {\n  @inject(ContributionProvider) @named(PreferenceConfiguration)\n  protected readonly provider: ContributionProvider<PreferenceConfiguration>;\n  protected sectionNames: string[] | undefined;\n\n  /* prefer Tart over VS Code by default */\n  getPaths(): string[] {\n    return ['.tart', '.vscode'];\n  }\n\n  getConfigName(): string {\n    return 'settings';\n  }\n\n  getSectionNames(): string[] {\n    if (!this.sectionNames) {\n      this.sectionNames = this.provider.getContributions().map(p => p.name);\n    }\n    return this.sectionNames;\n  }\n\n  isSectionName(name: string): boolean {\n    return this.getSectionNames().indexOf(name) !== -1;\n  }\n\n  isAnyConfig(name: string): boolean {\n    return [...this.getSectionNames(), this.getConfigName()].includes(name);\n  }\n\n  isSectionUri(configUri: URI | undefined): boolean {\n    return !!configUri && this.isSectionName(this.getName(configUri));\n  }\n\n  isConfigUri(configUri: URI | undefined): boolean {\n    return !!configUri && this.getName(configUri) === this.getConfigName();\n  }\n\n  getName(configUri: URI): string {\n    return configUri.path.name;\n  }\n\n  getPath(configUri: URI): string {\n    return configUri.parent.path.base;\n  }\n\n  createUri(folder: URI, configPath: string = this.getPaths()[0], configName: string = this.getConfigName()): URI {\n    return folder.resolve(configPath).resolve(configName + '.json');\n  }\n\n}\n"]}