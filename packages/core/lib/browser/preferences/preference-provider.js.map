{"version":3,"sources":["browser/preferences/preference-provider.ts"],"names":[],"mappings":"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","file":"../../../src/browser/preferences/preference-provider.js","sourcesContent":["import {default as debounce} from 'p-debounce';\nimport URI from '../../common/uri';\nimport {inject, injectable} from 'inversify';\nimport {PreferenceScope} from './preference-scope';\nimport {Disposable, DisposableCollection, Emitter, Event} from '../../common';\nimport {PreferenceLanguageOverrideService} from './preference-language-override-service';\nimport {Deferred} from '../../common/promise-util';\nimport {JSONExt, JSONValue} from '@lumino/coreutils';\n\nexport interface PreferenceProviderDataChange {\n  readonly preferenceName: string;\n  readonly newValue?: any;\n  readonly oldValue?: any;\n  readonly scope: PreferenceScope;\n  readonly domain?: string[];\n}\n\nexport namespace PreferenceProviderDataChange {\n  export function affects(change: PreferenceProviderDataChange, resourceUri?: string): boolean {\n    const resourcePath = resourceUri && new URI(resourceUri).path;\n    const domain = change.domain;\n    return !resourcePath || !domain || domain.some(uri => new URI(uri).path.relativity(resourcePath) >= 0);\n  }\n}\n\nexport interface PreferenceProviderDataChanges {\n  [preferenceName: string]: PreferenceProviderDataChange;\n}\n\nexport interface PreferenceResolveResult<T> {\n  configUri?: URI\n  value?: T\n}\n\n/**\n * The {@link PreferenceProvider} is used to store and retrieve preference values. A {@link PreferenceProvider} does not operate in a global scope but is\n * configured for one or more {@link PreferenceScope}s. The (default implementation for the) {@link PreferenceService} aggregates all {@link PreferenceProvider}s and\n * serves as a common facade for manipulating preference values.\n */\n@injectable()\nexport abstract class PreferenceProvider implements Disposable {\n\n  @inject(PreferenceLanguageOverrideService) protected readonly preferenceOverrideService: PreferenceLanguageOverrideService;\n\n  protected readonly onDidPreferencesChangedEmitter = new Emitter<PreferenceProviderDataChanges>();\n  readonly onDidPreferencesChanged: Event<PreferenceProviderDataChanges> = this.onDidPreferencesChangedEmitter.event;\n\n  protected readonly toDispose = new DisposableCollection();\n\n  protected readonly _ready = new Deferred<void>();\n  protected deferredChanges: PreferenceProviderDataChanges | undefined;\n  protected fireDidPreferencesChanged = debounce(() => {\n    const changes = this.deferredChanges;\n    this.deferredChanges = undefined;\n    if (changes && Object.keys(changes).length) {\n      this.onDidPreferencesChangedEmitter.fire(changes);\n      return true;\n    }\n    return false;\n  }, 0);\n\n  constructor() {\n    this.toDispose.push(this.onDidPreferencesChangedEmitter);\n  }\n\n  protected _pendingChanges: Promise<boolean> = Promise.resolve(false);\n  get pendingChanges(): Promise<boolean> {\n    return this._pendingChanges;\n  }\n\n  /**\n   * Resolved when the preference provider is ready to provide preferences\n   * It should be resolved by subclasses.\n   */\n  get ready(): Promise<void> {\n    return this._ready.promise;\n  }\n\n  static merge(source: JSONValue | undefined, target: JSONValue): JSONValue {\n    if (source === undefined || !JSONExt.isObject(source)) {\n      return JSONExt.deepCopy(target);\n    }\n    if (JSONExt.isPrimitive(target)) {\n      return {};\n    }\n    for (const key of Object.keys(target)) {\n      const value = (target as any)[key];\n      if (key in source) {\n        if (JSONExt.isObject(source[key]) && JSONExt.isObject(value)) {\n          this.merge(source[key], value);\n          continue;\n        }\n      }\n      source[key] = JSONExt.deepCopy(value);\n    }\n    return source;\n  }\n\n  /**\n   * Handles deep equality with the possibility of `undefined`\n   */\n  static deepEqual(a: JSONValue | undefined, b: JSONValue | undefined): boolean {\n    if (a === b) {\n      return true;\n    }\n    if (a === undefined || b === undefined) {\n      return false;\n    }\n    return JSONExt.deepEqual(a, b);\n  }\n\n  dispose(): void {\n    this.toDispose.dispose();\n  }\n\n  /**\n   * Retrieve the stored value for the given preference and resource URI.\n   *\n   * @param preferenceName the preference identifier.\n   * @param resourceUri the uri of the resource for which the preference is stored. This is used to retrieve\n   * a potentially different value for the same preference for different resources, for example `files.encoding`.\n   *\n   * @returns the value stored for the given preference and resourceUri if it exists, otherwise `undefined`.\n   */\n  get<T>(preferenceName: string, resourceUri?: string): T | undefined {\n    return this.resolve<T>(preferenceName, resourceUri).value;\n  }\n\n  /**\n   * Resolve the value for the given preference and resource URI.\n   *\n   * @param preferenceName the preference identifier.\n   * @param resourceUri the URI of the resource for which this provider should resolve the preference. This is used to retrieve\n   * a potentially different value for the same preference for different resources, for example `files.encoding`.\n   *\n   * @returns an object containing the value stored for the given preference and resourceUri if it exists,\n   * otherwise `undefined`.\n   */\n  resolve<T>(preferenceName: string, resourceUri?: string): PreferenceResolveResult<T> {\n    // const value = this.getPreferences(resourceUri)[preferenceName];\n    // if (value !== undefined) {\n    //     return {\n    //         value,\n    //         configUri: this.getConfigUri(resourceUri)\n    //     };\n    // }\n    return {};\n  }\n\n  abstract getPreferences(resourceUri?: string): { [p: string]: any };\n\n  /**\n   * Stores a new value for the given preference key in the provider.\n   * @param key the preference key (typically the name).\n   * @param value the new preference value.\n   * @param resourceUri the URI of the resource for which the preference is stored.\n   *\n   * @returns a promise that only resolves if all changes were delivered.\n   * If changes were made then implementation must either\n   * await on `this.emitPreferencesChangedEvent(...)` or\n   * `this.pendingChanges` if changes are fired indirectly.\n   */\n  abstract setPreference(key: string, value: any, resourceUri?: string): Promise<boolean>;\n\n  /**\n   * Retrieve the domain for this provider.\n   *\n   * @returns the domain or `undefined` if this provider is suitable for all domains.\n   */\n  getDomain(): string[] | undefined {\n    return undefined;\n  }\n\n  /**\n   * Retrieve the configuration URI for the given resource URI.\n   * @param resourceUri the uri of the resource or `undefined`.\n   * @param sectionName the section to return the URI for, e.g. `tasks` or `launch`. Defaults to settings.\n   *\n   * @returns the corresponding resource URI or `undefined` if there is no valid URI.\n   */\n  getConfigUri(resourceUri?: string, sectionName?: string): URI | undefined {\n    return undefined;\n  }\n\n  /**\n   * Retrieves the first valid configuration URI contained by the given resource.\n   * @param resourceUri the uri of the container resource or `undefined`.\n   *\n   * @returns the first valid configuration URI contained by the given resource `undefined`\n   * if there is no valid configuration URI at all.\n   */\n  getContainingConfigUri?(resourceUri?: string, sectionName?: string): URI | undefined;\n\n  /**\n   * Informs the listeners that one or more preferences of this provider are changed.\n   * The listeners are able to find what was changed from the emitted event.\n   */\n  protected emitPreferencesChangedEvent(changes: PreferenceProviderDataChanges | PreferenceProviderDataChange[]): Promise<boolean> {\n    if (Array.isArray(changes)) {\n      for (const change of changes) {\n        this.mergePreferenceProviderDataChange(change);\n      }\n    } else {\n      for (const preferenceName of Object.keys(changes)) {\n        this.mergePreferenceProviderDataChange(changes[preferenceName]);\n      }\n    }\n    return this._pendingChanges = this.fireDidPreferencesChanged();\n  }\n\n  protected mergePreferenceProviderDataChange(change: PreferenceProviderDataChange): void {\n    if (!this.deferredChanges) {\n      this.deferredChanges = {};\n    }\n    const current = this.deferredChanges[change.preferenceName];\n    const {newValue, scope, domain} = change;\n    if (!current) {\n      // new\n      this.deferredChanges[change.preferenceName] = change;\n    } else if (current.oldValue === newValue) {\n      // delete\n      delete this.deferredChanges[change.preferenceName];\n    } else {\n      // update\n      Object.assign(current, {newValue, scope, domain});\n    }\n  }\n\n  protected getParsedContent(jsonData: any): { [key: string]: any } {\n    const preferences: { [key: string]: any } = {};\n    if (typeof jsonData !== 'object') {\n      return preferences;\n    }\n    // eslint-disable-next-line guard-for-in\n    for (const preferenceName in jsonData) {\n      const preferenceValue = jsonData[preferenceName];\n      if (this.preferenceOverrideService.testOverrideValue(preferenceName, preferenceValue)) {\n        // eslint-disable-next-line guard-for-in\n        for (const overriddenPreferenceName in preferenceValue) {\n          const overriddenValue = preferenceValue[overriddenPreferenceName];\n          preferences[`${preferenceName}.${overriddenPreferenceName}`] = overriddenValue;\n        }\n      } else {\n        preferences[preferenceName] = preferenceValue;\n      }\n    }\n    return preferences;\n  }\n}\n"]}