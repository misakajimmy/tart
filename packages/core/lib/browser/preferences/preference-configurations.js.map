{"version":3,"sources":["browser/preferences/preference-configurations.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAc,KAAK,EAAC,MAAM,WAAW,CAAC;AAEhE,OAAO,EAAC,wBAAwB,EAAE,oBAAoB,EAAC,MAAM,oCAAoC,CAAC;AAElG,MAAM,CAAC,MAAM,uBAAuB,GAAG,MAAM,CAAC,yBAAyB,CAAC,CAAC;AAMzE,MAAM,UAAU,4BAA4B,CAAC,IAAqB;IAChE,wBAAwB,CAAC,IAAI,EAAE,uBAAuB,CAAC,CAAC;IACxD,IAAI,CAAC,wBAAwB,CAAC,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE,CAAC;AAC7D,CAAC;AAGD,IAAa,wBAAwB,GAArC,MAAa,wBAAwB;IAEhB,QAAQ,CAAgD;IACjE,YAAY,CAAuB;IAE7C,yCAAyC;IACzC,QAAQ;QACN,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC9B,CAAC;IAED,aAAa;QACX,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,eAAe;QACb,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;SACvE;QACD,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,aAAa,CAAC,IAAY;QACxB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,WAAW,CAAC,IAAY;QACtB,OAAO,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC1E,CAAC;IAED,YAAY,CAAC,SAA0B;QACrC,OAAO,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;IACpE,CAAC;IAED,WAAW,CAAC,SAA0B;QACpC,OAAO,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC,aAAa,EAAE,CAAC;IACzE,CAAC;IAED,OAAO,CAAC,SAAc;QACpB,OAAO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;IAC7B,CAAC;IAED,OAAO,CAAC,SAAc;QACpB,OAAO,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACpC,CAAC;IAED,SAAS,CAAC,MAAW,EAAE,aAAqB,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,aAAqB,IAAI,CAAC,aAAa,EAAE;QACvG,OAAO,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,CAAC;IAClE,CAAC;CAEF,CAAA;AA/CC;IADC,MAAM,CAAC,oBAAoB,CAAC;IAAE,KAAK,CAAC,uBAAuB,CAAC;0DACc;AAFhE,wBAAwB;IADpC,UAAU,EAAE;GACA,wBAAwB,CAiDpC;SAjDY,wBAAwB","file":"../../../src/browser/preferences/preference-configurations.js","sourcesContent":["import {inject, injectable, interfaces, named} from 'inversify';\nimport URI from '../../common/uri';\nimport {bindContributionProvider, ContributionProvider} from '../../common/contribution-provider';\n\nexport const PreferenceConfiguration = Symbol('PreferenceConfiguration');\n\nexport interface PreferenceConfiguration {\n  name: string;\n}\n\nexport function bindPreferenceConfigurations(bind: interfaces.Bind): void {\n  bindContributionProvider(bind, PreferenceConfiguration);\n  bind(PreferenceConfigurations).toSelf().inSingletonScope();\n}\n\n@injectable()\nexport class PreferenceConfigurations {\n  @inject(ContributionProvider) @named(PreferenceConfiguration)\n  protected readonly provider: ContributionProvider<PreferenceConfiguration>;\n  protected sectionNames: string[] | undefined;\n\n  /* prefer Tart over VS Code by default */\n  getPaths(): string[] {\n    return ['.tart', '.vscode'];\n  }\n\n  getConfigName(): string {\n    return 'settings';\n  }\n\n  getSectionNames(): string[] {\n    if (!this.sectionNames) {\n      this.sectionNames = this.provider.getContributions().map(p => p.name);\n    }\n    return this.sectionNames;\n  }\n\n  isSectionName(name: string): boolean {\n    return this.getSectionNames().indexOf(name) !== -1;\n  }\n\n  isAnyConfig(name: string): boolean {\n    return [...this.getSectionNames(), this.getConfigName()].includes(name);\n  }\n\n  isSectionUri(configUri: URI | undefined): boolean {\n    return !!configUri && this.isSectionName(this.getName(configUri));\n  }\n\n  isConfigUri(configUri: URI | undefined): boolean {\n    return !!configUri && this.getName(configUri) === this.getConfigName();\n  }\n\n  getName(configUri: URI): string {\n    return configUri.path.name;\n  }\n\n  getPath(configUri: URI): string {\n    return configUri.parent.path.base;\n  }\n\n  createUri(folder: URI, configPath: string = this.getPaths()[0], configName: string = this.getConfigName()): URI {\n    return folder.resolve(configPath).resolve(configName + '.json');\n  }\n\n}\n"]}