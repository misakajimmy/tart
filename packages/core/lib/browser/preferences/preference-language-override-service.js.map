{"version":3,"sources":["browser/preferences/preference-language-override-service.ts"],"names":[],"mappings":"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","file":"../../../src/browser/preferences/preference-language-override-service.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2021 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {escapeRegExpCharacters} from '../../common';\nimport {PreferenceSchemaProperties} from '../../common/preferences/preference-schema';\n\nexport interface OverridePreferenceName {\n  preferenceName: string\n  overrideIdentifier: string\n}\n\nexport namespace OverridePreferenceName {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  export function is(arg: any): arg is OverridePreferenceName {\n    return !!arg && typeof arg === 'object' && 'preferenceName' in arg && 'overrideIdentifier' in arg;\n  }\n}\n\nconst OVERRIDE_PROPERTY = '\\\\[(.*)\\\\]$';\nexport const OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\nexport const getOverridePattern = (identifier: string) => `\\\\[(${identifier})\\\\]$`;\n\n@injectable()\nexport class PreferenceLanguageOverrideService {\n  protected readonly overrideIdentifiers = new Set<string>();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  testOverrideValue(name: string, value: any): value is PreferenceSchemaProperties {\n    return PreferenceSchemaProperties.is(value) && OVERRIDE_PROPERTY_PATTERN.test(name);\n  }\n\n  overridePreferenceName({preferenceName, overrideIdentifier}: OverridePreferenceName): string {\n    return `[${overrideIdentifier}].${preferenceName}`;\n  }\n\n  overriddenPreferenceName(name: string): OverridePreferenceName | undefined {\n    const index = name.indexOf('.');\n    if (index === -1) {\n      return undefined;\n    }\n    const matches = name.substr(0, index).match(OVERRIDE_PROPERTY_PATTERN);\n    const overrideIdentifier = matches && matches[1];\n    if (!overrideIdentifier || !this.overrideIdentifiers.has(overrideIdentifier)) {\n      return undefined;\n    }\n    const preferenceName = name.substr(index + 1);\n    return {preferenceName, overrideIdentifier};\n  }\n\n  computeOverridePatternPropertiesKey(): string | undefined {\n    let param: string = '';\n    for (const overrideIdentifier of this.overrideIdentifiers) {\n      if (param.length) {\n        param += '|';\n      }\n      param += new RegExp(escapeRegExpCharacters(overrideIdentifier)).source;\n    }\n    return param.length ? getOverridePattern(param) : undefined;\n  }\n\n  * getOverridePreferenceNames(preferenceName: string): IterableIterator<string> {\n    for (const overrideIdentifier of this.overrideIdentifiers) {\n      yield this.overridePreferenceName({preferenceName, overrideIdentifier});\n    }\n  }\n\n  /**\n   * @param overrideIdentifier\n   * @returns true if the addition caused a change, i.e. if the identifier was not already present in the set of identifiers, false otherwise.\n   */\n  addOverrideIdentifier(overrideIdentifier: string): boolean {\n    const alreadyPresent = this.overrideIdentifiers.has(overrideIdentifier);\n    if (!alreadyPresent) {\n      this.overrideIdentifiers.add(overrideIdentifier);\n    }\n    return !alreadyPresent;\n  }\n\n  /**\n   * @param overrideIdentifier\n   * @returns true if the deletion caused a change, i.e. if the identifier was present in the set, false otherwise.\n   */\n  removeOverrideIdentifier(overrideIdentifier: string): boolean {\n    return this.overrideIdentifiers.delete(overrideIdentifier);\n  }\n}\n"]}