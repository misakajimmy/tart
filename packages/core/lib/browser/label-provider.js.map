{"version":3,"sources":["browser/label-provider.ts"],"names":[],"mappings":"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","file":"../../src/browser/label-provider.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, named, postConstruct} from 'inversify';\nimport URI from '../common/uri';\nimport {ContributionProvider, Disposable, Emitter, Event, Path, Prioritizeable} from '../common';\nimport {FrontendApplicationContribution} from './frontend-application';\nimport {ResourceLabelFormatter, ResourceLabelFormatting} from '../common/label-protocol';\nimport {codicon} from './widgets';\nimport * as fileIcons from 'file-icons-js';\n\n/**\n * @internal don't export it, use `LabelProvider.folderIcon` instead.\n */\nconst DEFAULT_FOLDER_ICON = `${codicon('folder')} default-folder-icon`;\n/**\n * @internal don't export it, use `LabelProvider.fileIcon` instead.\n */\nconst DEFAULT_FILE_ICON = `${codicon('file')} default-file-icon`;\n\n/**\n * Internal folder icon class for the default (File Icons) theme.\n *\n * @deprecated Use `LabelProvider.folderIcon` to get a folder icon class for the current icon theme.\n */\nexport const FOLDER_ICON = DEFAULT_FOLDER_ICON;\n/**\n * Internal file icon class for the default (File Icons) theme.\n *\n * @deprecated Use `LabelProvider.fileIcon` to get a file icon class for the current icon theme.\n */\nexport const FILE_ICON = DEFAULT_FILE_ICON;\n\nexport const LabelProviderContribution = Symbol('LabelProviderContribution');\n\n/**\n * A {@link LabelProviderContribution} determines how specific elements/nodes are displayed in the workbench.\n * Tart views use a common {@link LabelProvider} to determine the label and/or an icon for elements shown in the UI. This includes elements in lists\n * and trees, but also view specific locations like headers. The common {@link LabelProvider} collects all {@links LabelProviderContribution} and delegates\n * to the contribution with the highest priority. This is determined via calling the {@link LabelProviderContribution.canHandle} function, so contributions\n * define which elements they are responsible for.\n * As arbitrary views can consume LabelProviderContributions, they must be generic for the covered element type, not view specific. Label providers and\n * contributions can be used for arbitrary element and node types, e.g. for markers or domain-specific elements.\n */\nexport interface LabelProviderContribution {\n\n  /**\n   * Emit when something has changed that may result in this label provider returning a different\n   * value for one or more properties (name, icon etc).\n   */\n  readonly onDidChange?: Event<DidChangeLabelEvent>;\n\n  /**\n   * Determines whether this contribution can handle the given element and with what priority.\n   * All contributions are ordered by the returned number if greater than zero. The highest number wins.\n   * If two or more contributions return the same positive number one of those will be used. It is undefined which one.\n   */\n  canHandle(element: object): number;\n\n  /**\n   * returns an icon class for the given element.\n   */\n  getIcon?(element: object): string | undefined;\n\n  /**\n   * returns a short name for the given element.\n   */\n  getName?(element: object): string | undefined;\n\n  /**\n   * returns a long name for the given element.\n   */\n  getLongName?(element: object): string | undefined;\n\n  /**\n   * Checks whether the given element is affected by the given change event.\n   * Contributions delegating to the label provider can use this hook\n   * to perform a recursive check.\n   */\n  affects?(element: object, event: DidChangeLabelEvent): boolean;\n\n}\n\nexport interface DidChangeLabelEvent {\n  affects(element: object): boolean;\n}\n\nexport interface URIIconReference {\n  kind: 'uriIconReference';\n  id: 'file' | 'folder';\n  uri?: URI\n}\n\nexport namespace URIIconReference {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  export function is(element: any | undefined): element is URIIconReference {\n    return !!element && typeof element === 'object' && 'kind' in element && element['kind'] === 'uriIconReference';\n  }\n\n  export function create(id: URIIconReference['id'], uri?: URI): URIIconReference {\n    return {kind: 'uriIconReference', id, uri};\n  }\n}\n\n@injectable()\nexport class DefaultUriLabelProviderContribution implements LabelProviderContribution {\n\n  protected formatters: ResourceLabelFormatter[] = [];\n  protected readonly onDidChangeEmitter = new Emitter<DidChangeLabelEvent>();\n  protected homePath: string | undefined;\n  /*---------------------------------------------------------------------------------------------\n  *  Copyright (c) Microsoft Corporation. All rights reserved.\n  *  Licensed under the MIT License. See License.txt in the project root for license information.\n  *--------------------------------------------------------------------------------------------*/\n  private readonly labelMatchingRegexp = /\\${(scheme|authority|path|query)}/g;\n\n  get defaultFolderIcon(): string {\n    return DEFAULT_FOLDER_ICON;\n  }\n\n  get defaultFileIcon(): string {\n    return DEFAULT_FILE_ICON;\n  }\n\n  get onDidChange(): Event<DidChangeLabelEvent> {\n    return this.onDidChangeEmitter.event;\n  }\n\n  @postConstruct()\n  init(): void {\n    // this.envVariablesServer.getHomeDirUri().then(result => {\n    //     this.homePath = result;\n    //     this.fireOnDidChange();\n    // });\n  }\n\n  canHandle(element: object): number {\n    if (element instanceof URI || URIIconReference.is(element)) {\n      return 1;\n    }\n    return 0;\n  }\n\n  getIcon(element: URI | URIIconReference): string {\n    if (URIIconReference.is(element) && element.id === 'folder') {\n      return this.defaultFolderIcon;\n    }\n    const uri = URIIconReference.is(element) ? element.uri : element;\n    if (uri) {\n      const iconClass = uri && this.getFileIcon(uri);\n      return iconClass || this.defaultFileIcon;\n    }\n    return '';\n  }\n\n  getName(element: URI | URIIconReference): string | undefined {\n    const uri = this.getUri(element);\n    return uri && uri.displayName;\n  }\n\n  getLongName(element: URI | URIIconReference): string | undefined {\n    const uri = this.getUri(element);\n    if (uri) {\n      const formatting = this.findFormatting(uri);\n      if (formatting) {\n        return this.formatUri(uri, formatting);\n      }\n    }\n    return uri && uri.path.toString();\n  }\n\n  registerFormatter(formatter: ResourceLabelFormatter): Disposable {\n    this.formatters.push(formatter);\n    this.fireOnDidChange();\n    return Disposable.create(() => {\n      this.formatters = this.formatters.filter(f => f !== formatter);\n      this.fireOnDidChange();\n    });\n  }\n\n  protected getFileIcon(uri: URI): string | undefined {\n    const fileIcon = fileIcons.getClassWithColor(uri.displayName);\n    if (!fileIcon) {\n      return undefined;\n    }\n    return fileIcon + ' tart-file-icons-js';\n  }\n\n  protected getUri(element: URI | URIIconReference): URI | undefined {\n    return URIIconReference.is(element) ? element.uri : element;\n  }\n\n  // copied and modified from https://github.com/microsoft/vscode/blob/1.44.2/src/vs/workbench/services/label/common/labelService.ts\n\n  protected formatUri(resource: URI, formatting: ResourceLabelFormatting): string {\n    let label = formatting.label.replace(this.labelMatchingRegexp, (match, token) => {\n      switch (token) {\n        case 'scheme':\n          return resource.scheme;\n        case 'authority':\n          return resource.authority;\n        case 'path':\n          return resource.path.toString();\n        case 'query':\n          return resource.query;\n        default:\n          return '';\n      }\n    });\n\n    // convert \\c:\\something => C:\\something\n    if (formatting.normalizeDriveLetter && this.hasDriveLetter(label)) {\n      label = label.charAt(1).toUpperCase() + label.substr(2);\n    }\n\n    if (formatting.tildify) {\n      label = Path.tildify(label, this.homePath ? this.homePath : '');\n    }\n    if (formatting.authorityPrefix && resource.authority) {\n      label = formatting.authorityPrefix + label;\n    }\n\n    return label.replace(/\\//g, formatting.separator);\n  }\n\n  protected findFormatting(resource: URI): ResourceLabelFormatting | undefined {\n    let bestResult: ResourceLabelFormatter | undefined;\n\n    this.formatters.forEach(formatter => {\n      if (formatter.scheme === resource.scheme) {\n        if (!bestResult && !formatter.authority) {\n          bestResult = formatter;\n          return;\n        }\n        if (!formatter.authority) {\n          return;\n        }\n\n        if ((formatter.authority.toLowerCase() === resource.authority.toLowerCase()) &&\n            (!bestResult || !bestResult.authority || formatter.authority.length > bestResult.authority.length ||\n                ((formatter.authority.length === bestResult.authority.length) && formatter.priority))) {\n          bestResult = formatter;\n        }\n      }\n    });\n\n    return bestResult ? bestResult.formatting : undefined;\n  }\n\n  private fireOnDidChange(): void {\n    this.onDidChangeEmitter.fire({\n      affects: (element: URI) => this.canHandle(element) > 0\n    });\n  }\n\n  private hasDriveLetter(path: string): boolean {\n    return !!(path && path[2] === ':');\n  }\n}\n\n/**\n * The {@link LabelProvider} determines how elements/nodes are displayed in the workbench. For any element, it can determine a short label, a long label\n * and an icon. The {@link LabelProvider} is to be used in lists, trees and tables, but also view specific locations like headers.\n * The common {@link LabelProvider} can be extended/adapted via {@link LabelProviderContribution}s. For every element, the {@links LabelProvider} will determine the\n * {@link LabelProviderContribution} with the hightest priority and delegate to it. Tart registers default {@link LabelProviderContribution} for common types, e.g.\n * the {@link DefaultUriLabelProviderContribution} for elements that have a URI.\n * Using the {@link LabelProvider} across the workbench ensures a common look and feel for elements across multiple views. To adapt the way how specific\n * elements/nodes are rendered, use a {@link LabelProviderContribution} rather than adapting or sub classing the {@link LabelProvider}. This way, your adaptation\n * is applied to all views in Tart that use the {@link LabelProvider}\n */\n@injectable()\nexport class LabelProvider implements FrontendApplicationContribution {\n\n  protected readonly onDidChangeEmitter = new Emitter<DidChangeLabelEvent>();\n\n  @inject(ContributionProvider) @named(LabelProviderContribution)\n  protected readonly contributionProvider: ContributionProvider<LabelProviderContribution>;\n\n  get onDidChange(): Event<DidChangeLabelEvent> {\n    return this.onDidChangeEmitter.event;\n  }\n\n  /**\n   * Return a default file icon for the current icon theme.\n   */\n  get fileIcon(): string {\n    return this.getIcon(URIIconReference.create('file'));\n  }\n\n  /**\n   * Return a default folder icon for the current icon theme.\n   */\n  get folderIcon(): string {\n    return this.getIcon(URIIconReference.create('folder'));\n  }\n\n  /**\n   * Start listening to contributions.\n   *\n   * Don't call this method directly!\n   * It's called by the frontend application during initialization.\n   */\n  initialize(): void {\n    const contributions = this.contributionProvider.getContributions();\n    for (const eventContribution of contributions) {\n      if (eventContribution.onDidChange) {\n        eventContribution.onDidChange(event => {\n          this.onDidChangeEmitter.fire({\n            // TODO check eventContribution.canHandle as well\n            affects: element => this.affects(element, event)\n          });\n        });\n      }\n    }\n  }\n\n  /**\n   * Get the icon class from the list of available {@link LabelProviderContribution} for the given element.\n   * @return the icon class\n   */\n  getIcon(element: object): string {\n    const contributions = this.findContribution(element);\n    for (const contribution of contributions) {\n      const value = contribution.getIcon && contribution.getIcon(element);\n      if (value === undefined) {\n        continue;\n      }\n      return value;\n    }\n    return '';\n  }\n\n  /**\n   * Get a short name from the list of available {@link LabelProviderContribution} for the given element.\n   * @return the short name\n   */\n  getName(element: object): string {\n    const contributions = this.findContribution(element);\n    for (const contribution of contributions) {\n      const value = contribution.getName && contribution.getName(element);\n      if (value === undefined) {\n        continue;\n      }\n      return value;\n    }\n    return '<unknown>';\n  }\n\n  /**\n   * Get a long name from the list of available {@link LabelProviderContribution} for the given element.\n   * @return the long name\n   */\n  getLongName(element: object): string {\n    const contributions = this.findContribution(element);\n    for (const contribution of contributions) {\n      const value = contribution.getLongName && contribution.getLongName(element);\n      if (value === undefined) {\n        continue;\n      }\n      return value;\n    }\n    return '';\n  }\n\n  protected affects(element: object, event: DidChangeLabelEvent): boolean {\n    if (event.affects(element)) {\n      return true;\n    }\n    for (const contribution of this.findContribution(element)) {\n      if (contribution.affects && contribution.affects(element, event)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  protected findContribution(element: object): LabelProviderContribution[] {\n    const prioritized = Prioritizeable.prioritizeAllSync(this.contributionProvider.getContributions(), contrib =>\n        contrib.canHandle(element)\n    );\n    return prioritized.map(c => c.value);\n  }\n}\n"]}