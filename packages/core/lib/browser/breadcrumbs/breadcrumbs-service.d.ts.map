{"version":3,"sources":["browser/breadcrumbs/breadcrumbs-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,oBAAoB,EAAE,OAAO,EAAE,KAAK,EAAiB,MAAM,cAAc,CAAC;AAClF,OAAO,GAAG,MAAM,kBAAkB,CAAC;AACnC,OAAO,EAAC,UAAU,EAAC,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAC,wBAAwB,EAAE,+BAA+B,EAAC,MAAM,8BAA8B,CAAC;AACvG,OAAO,EAAC,UAAU,EAAE,uBAAuB,EAAS,MAAM,yBAAyB,CAAC;AAEpF,qBACa,kBAAkB;IAG7B,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,oBAAoB,CAAC,uBAAuB,CAAC,CAAC;IAEvC,SAAS,CAAC,QAAQ,CAAC,+BAA+B,EAAE,+BAA+B,CAAC;IAE7H,SAAS,CAAC,aAAa,UAAS;IAEhC,SAAS,CAAC,sBAAsB,EAAE,cAAc,CAAC;IAEjD,SAAS,CAAC,QAAQ,CAAC,6BAA6B,eAAsB;IAEtE;;;OAGG;IACH,IAAI,sBAAsB,IAAI,KAAK,CAAC,GAAG,CAAC,CAQvC;IAGD,IAAI,IAAI,IAAI;IAIZ;;OAEG;IACG,cAAc,CAAC,GAAG,EAAE,GAAG,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;IAQrD;;OAEG;IACG,SAAS,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,GAAG,OAAO,CAAC,wBAAwB,GAAG,SAAS,CAAC;IAc5G,SAAS,CAAC,sBAAsB,IAAI,IAAI;IAQxC;;OAEG;IACH,SAAS,CAAC,wBAAwB,IAAI,IAAI;cAO1B,wBAAwB,IAAI,OAAO,CAAC,uBAAuB,EAAE,CAAC;CAK/E","file":"../../../src/browser/breadcrumbs/breadcrumbs-service.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, named, postConstruct} from 'inversify';\nimport {ContributionProvider, Emitter, Event, Prioritizeable} from '../../common';\nimport URI from '../../common/uri';\nimport {Coordinate} from '../context-menu-renderer';\nimport {BreadcrumbPopupContainer, BreadcrumbPopupContainerFactory} from './breadcrumb-popup-container';\nimport {Breadcrumb, BreadcrumbsContribution, Styles} from './breadcrumbs-constants';\n\n@injectable()\nexport class BreadcrumbsService {\n\n  @inject(ContributionProvider) @named(BreadcrumbsContribution)\n  protected readonly contributions: ContributionProvider<BreadcrumbsContribution>;\n\n  @inject(BreadcrumbPopupContainerFactory) protected readonly breadcrumbPopupContainerFactory: BreadcrumbPopupContainerFactory;\n\n  protected hasSubscribed = false;\n\n  protected popupsOverlayContainer: HTMLDivElement;\n\n  protected readonly onDidChangeBreadcrumbsEmitter = new Emitter<URI>();\n\n  /**\n   * Subscribe to this event emitter to be notified when the breadcrumbs have changed.\n   * The URI is the URI of the editor the breadcrumbs have changed for.\n   */\n  get onDidChangeBreadcrumbs(): Event<URI> {\n    // This lazy subscription is to address problems in inversify's instantiation routine\n    // related to use of the IconThemeService by different components instantiated by the\n    // ContributionProvider.\n    if (!this.hasSubscribed) {\n      this.subscribeToContributions();\n    }\n    return this.onDidChangeBreadcrumbsEmitter.event;\n  }\n\n  @postConstruct()\n  init(): void {\n    this.createOverlayContainer();\n  }\n\n  /**\n   * Returns the breadcrumbs for a given URI, possibly an empty list.\n   */\n  async getBreadcrumbs(uri: URI): Promise<Breadcrumb[]> {\n    const result: Breadcrumb[] = [];\n    for (const contribution of await this.prioritizedContributions()) {\n      result.push(...await contribution.computeBreadcrumbs(uri));\n    }\n    return result;\n  }\n\n  /**\n   * Opens a popup for the given breadcrumb at the given position.\n   */\n  async openPopup(breadcrumb: Breadcrumb, position: Coordinate): Promise<BreadcrumbPopupContainer | undefined> {\n    const contribution = this.contributions.getContributions().find(c => c.type === breadcrumb.type);\n    if (contribution) {\n      const popup = this.breadcrumbPopupContainerFactory(this.popupsOverlayContainer, breadcrumb.id, position);\n      const popupContent = await contribution.attachPopupContent(breadcrumb, popup.container);\n      if (popupContent && popup.isOpen) {\n        popup.onDidDispose(() => popupContent.dispose());\n      } else {\n        popupContent?.dispose();\n      }\n      return popup;\n    }\n  }\n\n  protected createOverlayContainer(): void {\n    this.popupsOverlayContainer = window.document.createElement('div');\n    this.popupsOverlayContainer.id = Styles.BREADCRUMB_POPUP_OVERLAY_CONTAINER;\n    if (window.document.body) {\n      window.document.body.appendChild(this.popupsOverlayContainer);\n    }\n  }\n\n  /**\n   * Subscribes to the onDidChangeBreadcrumbs events for all contributions.\n   */\n  protected subscribeToContributions(): void {\n    this.hasSubscribed = true;\n    for (const contribution of this.contributions.getContributions()) {\n      contribution.onDidChangeBreadcrumbs(uri => this.onDidChangeBreadcrumbsEmitter.fire(uri));\n    }\n  }\n\n  protected async prioritizedContributions(): Promise<BreadcrumbsContribution[]> {\n    const prioritized = await Prioritizeable.prioritizeAll(\n        this.contributions.getContributions(), contribution => contribution.priority);\n    return prioritized.map(p => p.value).reverse();\n  }\n}\n"]}