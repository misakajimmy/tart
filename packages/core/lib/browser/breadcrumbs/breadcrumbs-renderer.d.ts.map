{"version":3,"sources":["browser/breadcrumbs/breadcrumbs-renderer.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,aAAa,EAAC,MAAM,YAAY,CAAC;AACzC,OAAO,EAAC,kBAAkB,EAAC,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAC,kBAAkB,EAAC,MAAM,uBAAuB,CAAC;AACzD,OAAO,gBAAgB,MAAM,mBAAmB,CAAC;AACjD,OAAO,GAAG,MAAM,kBAAkB,CAAC;AACnC,OAAO,EAAC,OAAO,EAAE,KAAK,EAAC,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAC,wBAAwB,EAAC,MAAM,8BAA8B,CAAC;AACtE,OAAO,EAAC,oBAAoB,EAAC,MAAM,yBAAyB,CAAC;AAC7D,OAAO,EAAC,eAAe,EAAC,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAC,UAAU,EAAS,MAAM,yBAAyB,CAAC;AAC3D,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAEhD,UAAU,UAAU;IAClB,QAAQ,EAAE,OAAO,CAAC;CACnB;AAED,qBACa,mBAAoB,SAAQ,aAAa;IAGpD,SAAS,CAAC,QAAQ,CAAC,kBAAkB,EAAE,kBAAkB,CAAC;IAG1D,SAAS,CAAC,QAAQ,CAAC,kBAAkB,EAAE,kBAAkB,CAAC;IAG1D,SAAS,CAAC,QAAQ,CAAC,eAAe,EAAE,eAAe,CAAC;IAGpD,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC;IAEhD,SAAS,CAAC,QAAQ,CAAC,6BAA6B,mBAA0B;IAC1E,SAAS,CAAC,GAAG,EAAE,GAAG,GAAG,SAAS,CAAC;IAC/B,SAAS,CAAC,WAAW,EAAE,UAAU,EAAE,CAAM;IACzC,SAAS,CAAC,KAAK,EAAE,wBAAwB,GAAG,SAAS,CAAC;IACtD,SAAS,CAAC,SAAS,EAAE,gBAAgB,GAAG,SAAS,CAAC;IAClD,SAAS,CAAC,SAAS,EAAE,oBAAoB,CAA8B;IACvE,SAAS,CAAC,yBAAyB,EAAE,UAAU,CAAoB;IAEnE,IAAI,sBAAsB,IAAI,KAAK,CAAC,OAAO,CAAC,CAE3C;IAED,IAAI,MAAM,IAAI,OAAO,CAEpB;IAED,SAAS,KAAK,oBAAoB,IAAI,OAAO,GAAG,SAAS,CAExD;IAED,OAAO,IAAI,IAAI;IAYT,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC;IA0BvC,SAAS,CAAC,IAAI,IAAI,IAAI;IAetB,SAAS,CAAC,MAAM,IAAI,IAAI;IAWxB,SAAS,CAAC,eAAe,IAAI,IAAI;IAYjC,SAAS,CAAC,WAAW,IAAI,IAAI;IAO7B,SAAS,CAAC,QAAQ,IAAI,KAAK,CAAC,SAAS;IAIrC,SAAS,CAAC,iBAAiB,IAAI,KAAK,CAAC,SAAS;IAI9C,SAAS,CAAC,WAAW,eAAgB,UAAU,SAAS,gBAAgB,UAuBtE;CACH;AAED,eAAO,MAAM,0BAA0B,eAAuC,CAAC;AAE/E,MAAM,WAAW,0BAA0B;IACzC,IAAI,mBAAmB,CAAC;CACzB","file":"../../../src/browser/breadcrumbs/breadcrumbs-renderer.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as React from 'react';\nimport {inject, injectable, postConstruct} from 'inversify';\nimport {ReactRenderer} from '../widgets';\nimport {BreadcrumbsService} from './breadcrumbs-service';\nimport {BreadcrumbRenderer} from './breadcrumb-renderer';\nimport PerfectScrollbar from 'perfect-scrollbar';\nimport URI from '../../common/uri';\nimport {Emitter, Event} from '../../common';\nimport {BreadcrumbPopupContainer} from './breadcrumb-popup-container';\nimport {DisposableCollection} from '../../common/disposable';\nimport {CorePreferences} from '../core-preferences';\nimport {Breadcrumb, Styles} from './breadcrumbs-constants';\nimport {LabelProvider} from '../label-provider';\n\ninterface Cancelable {\n  canceled: boolean;\n}\n\n@injectable()\nexport class BreadcrumbsRenderer extends ReactRenderer {\n\n  @inject(BreadcrumbsService)\n  protected readonly breadcrumbsService: BreadcrumbsService;\n\n  @inject(BreadcrumbRenderer)\n  protected readonly breadcrumbRenderer: BreadcrumbRenderer;\n\n  @inject(CorePreferences)\n  protected readonly corePreferences: CorePreferences;\n\n  @inject(LabelProvider)\n  protected readonly labelProvider: LabelProvider;\n\n  protected readonly onDidChangeActiveStateEmitter = new Emitter<boolean>();\n  protected uri: URI | undefined;\n  protected breadcrumbs: Breadcrumb[] = [];\n  protected popup: BreadcrumbPopupContainer | undefined;\n  protected scrollbar: PerfectScrollbar | undefined;\n  protected toDispose: DisposableCollection = new DisposableCollection();\n  protected refreshCancellationMarker: Cancelable = {canceled: true};\n\n  get onDidChangeActiveState(): Event<boolean> {\n    return this.onDidChangeActiveStateEmitter.event;\n  }\n\n  get active(): boolean {\n    return !!this.breadcrumbs.length;\n  }\n\n  protected get breadCrumbsContainer(): Element | undefined {\n    return this.host.firstElementChild ?? undefined;\n  }\n\n  dispose(): void {\n    super.dispose();\n    this.toDispose.dispose();\n    if (this.popup) {\n      this.popup.dispose();\n    }\n    if (this.scrollbar) {\n      this.scrollbar.destroy();\n      this.scrollbar = undefined;\n    }\n  }\n\n  async refresh(uri?: URI): Promise<void> {\n    this.uri = uri;\n    this.refreshCancellationMarker.canceled = true;\n    const currentCallCanceled = {canceled: false};\n    this.refreshCancellationMarker = currentCallCanceled;\n    let breadcrumbs: Breadcrumb[];\n    if (uri && this.corePreferences['breadcrumbs.enabled']) {\n      breadcrumbs = await this.breadcrumbsService.getBreadcrumbs(uri);\n    } else {\n      breadcrumbs = [];\n    }\n    if (currentCallCanceled.canceled) {\n      return;\n    }\n\n    const wasActive = this.active;\n    this.breadcrumbs = breadcrumbs;\n    const isActive = this.active;\n    if (wasActive !== isActive) {\n      this.onDidChangeActiveStateEmitter.fire(isActive);\n    }\n\n    this.update();\n  }\n\n  @postConstruct()\n  protected init(): void {\n    this.toDispose.push(this.onDidChangeActiveStateEmitter);\n    this.toDispose.push(this.breadcrumbsService.onDidChangeBreadcrumbs(uri => {\n      if (this.uri?.isEqual(uri)) {\n        this.refresh(this.uri);\n      }\n    }));\n    this.toDispose.push(this.corePreferences.onPreferenceChanged(change => {\n      if (change.preferenceName === 'breadcrumbs.enabled') {\n        this.refresh(this.uri);\n      }\n    }));\n    this.toDispose.push(this.labelProvider.onDidChange(() => this.refresh(this.uri)));\n  }\n\n  protected update(): void {\n    this.render();\n\n    if (!this.scrollbar) {\n      this.createScrollbar();\n    } else {\n      this.scrollbar.update();\n    }\n    this.scrollToEnd();\n  }\n\n  protected createScrollbar(): void {\n    const {breadCrumbsContainer} = this;\n    if (breadCrumbsContainer) {\n      this.scrollbar = new PerfectScrollbar(breadCrumbsContainer, {\n        handlers: ['drag-thumb', 'keyboard', 'wheel', 'touch'],\n        useBothWheelAxes: true,\n        scrollXMarginOffset: 4,\n        suppressScrollY: true\n      });\n    }\n  }\n\n  protected scrollToEnd(): void {\n    const {breadCrumbsContainer} = this;\n    if (breadCrumbsContainer) {\n      breadCrumbsContainer.scrollLeft = breadCrumbsContainer.scrollWidth;\n    }\n  }\n\n  protected doRender(): React.ReactNode {\n    return <ul className={Styles.BREADCRUMBS}>{this.renderBreadcrumbs()}</ul>;\n  }\n\n  protected renderBreadcrumbs(): React.ReactNode {\n    return this.breadcrumbs.map(breadcrumb => this.breadcrumbRenderer.render(breadcrumb, this.togglePopup));\n  }\n\n  protected togglePopup = (breadcrumb: Breadcrumb, event: React.MouseEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    let openPopup = true;\n    if (this.popup?.isOpen) {\n      this.popup.dispose();\n\n      // There is a popup open. If the popup is the popup that belongs to the currently clicked breadcrumb\n      // just close the popup. If another breadcrumb was clicked, open the new popup immediately.\n      openPopup = this.popup.breadcrumbId !== breadcrumb.id;\n    } else {\n      this.popup = undefined;\n    }\n    if (openPopup) {\n      const {currentTarget} = event;\n      const breadcrumbElement = currentTarget.closest(`.${Styles.BREADCRUMB_ITEM}`);\n      if (breadcrumbElement) {\n        const {left: x, bottom: y} = breadcrumbElement.getBoundingClientRect();\n        this.breadcrumbsService.openPopup(breadcrumb, {x, y}).then(popup => {\n          this.popup = popup;\n        });\n      }\n    }\n  };\n}\n\nexport const BreadcrumbsRendererFactory = Symbol('BreadcrumbsRendererFactory');\n\nexport interface BreadcrumbsRendererFactory {\n  (): BreadcrumbsRenderer;\n}\n"]}