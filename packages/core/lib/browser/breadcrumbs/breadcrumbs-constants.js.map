{"version":3,"sources":["browser/breadcrumbs/breadcrumbs-constants.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAMlF,MAAM,KAAW,MAAM,CAMtB;AAND,WAAiB,MAAM;IACR,kBAAW,GAAG,kBAAkB,CAAC;IACjC,sBAAe,GAAG,sBAAsB,CAAC;IACzC,yCAAkC,GAAG,iCAAiC,CAAC;IACvE,uBAAgB,GAAG,wBAAwB,CAAC;IAC5C,gCAAyB,GAAG,+BAA+B,CAAC;AAC3E,CAAC,EANgB,MAAM,KAAN,MAAM,QAMtB;AAwBD,MAAM,CAAC,MAAM,uBAAuB,GAAG,MAAM,CAAC,yBAAyB,CAAC,CAAC","file":"../../../src/browser/breadcrumbs/breadcrumbs-constants.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {Event, MaybePromise} from '../../common';\nimport {Disposable} from 'vscode-languageserver-protocol';\nimport URI from '../../common/uri';\n\nexport namespace Styles {\n  export const BREADCRUMBS = 'tart-breadcrumbs';\n  export const BREADCRUMB_ITEM = 'tart-breadcrumb-item';\n  export const BREADCRUMB_POPUP_OVERLAY_CONTAINER = 'tart-breadcrumbs-popups-overlay';\n  export const BREADCRUMB_POPUP = 'tart-breadcrumbs-popup';\n  export const BREADCRUMB_ITEM_HAS_POPUP = 'tart-breadcrumb-item-haspopup';\n}\n\n/** A single breadcrumb in the breadcrumbs bar. */\nexport interface Breadcrumb {\n\n  /** An ID of this breadcrumb that should be unique in the breadcrumbs bar. */\n  readonly id: string;\n\n  /** The breadcrumb type. Should be the same as the contribution type `BreadcrumbsContribution#type`. */\n  readonly type: symbol;\n\n  /** The text that will be rendered as label. */\n  readonly label: string;\n\n  /** A longer text that will be used as tooltip text. */\n  readonly longLabel: string;\n\n  /** A CSS class for the icon. */\n  readonly iconClass?: string;\n\n  /** CSS classes for the container. */\n  readonly containerClass?: string;\n}\n\nexport const BreadcrumbsContribution = Symbol('BreadcrumbsContribution');\n\nexport interface BreadcrumbsContribution {\n\n  /**\n   * The breadcrumb type. Breadcrumbs returned by `#computeBreadcrumbs(uri)` should have this as `Breadcrumb#type`.\n   */\n  readonly type: symbol;\n\n  /**\n   * The priority of this breadcrumbs contribution. Contributions are rendered left to right in order of ascending priority.\n   */\n  readonly priority: number;\n\n  /**\n   * An event emitter that should fire when breadcrumbs change for a given URI.\n   */\n  readonly onDidChangeBreadcrumbs: Event<URI>;\n\n  /**\n   * Computes breadcrumbs for a given URI.\n   */\n  computeBreadcrumbs(uri: URI): MaybePromise<Breadcrumb[]>;\n\n  /**\n   * Attaches the breadcrumb popup content for the given breadcrumb as child to the given parent.\n   * If it returns a Disposable, it is called when the popup closes.\n   */\n  attachPopupContent(breadcrumb: Breadcrumb, parent: HTMLElement): Promise<Disposable | undefined>;\n}\n"]}