{"version":3,"sources":["browser/shell/shell-layout-restorer.ts"],"names":[],"mappings":"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","file":"../../../src/browser/shell/shell-layout-restorer.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, named} from 'inversify';\nimport {Widget} from '@lumino/widgets';\nimport {FrontendApplication} from '../frontend-application';\nimport {WidgetConstructionOptions, WidgetManager} from '../widget-manager';\nimport {StorageService} from '../storage-service';\nimport {Command, CommandContribution, CommandRegistry} from '../../common/command';\n// import { ThemeService } from '../theming';\nimport {ContributionProvider} from '../../common/contribution-provider';\nimport {MaybePromise} from '../../common/types';\nimport {ApplicationShell, applicationShellLayoutVersion, ApplicationShellLayoutVersion} from './application-shell';\nimport {CommonCommands} from '../common-frontend-contribution';\n\n/**\n * A contract for widgets that want to store and restore their inner state, between sessions.\n */\nexport interface StatefulWidget {\n\n  /**\n   * Called on unload to store the inner state. Returns 'undefined' if the widget cannot be stored.\n   */\n  storeState(): object | undefined;\n\n  /**\n   * Called when the widget got created by the storage service\n   */\n  restoreState(oldState: object): void;\n}\n\nexport namespace StatefulWidget {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  export function is(arg: any): arg is StatefulWidget {\n    return arg !== undefined && typeof arg['storeState'] === 'function' && typeof arg['restoreState'] === 'function';\n  }\n}\n\nexport interface WidgetDescription {\n  constructionOptions: WidgetConstructionOptions,\n  innerWidgetState?: string | object\n}\n\nexport interface ApplicationShellLayoutMigrationContext {\n  /**\n   * A resolved version of a current layout.\n   */\n  layoutVersion: number\n  /**\n   * A layout to be inflated.\n   */\n  layout: ApplicationShell.LayoutData\n  /**\n   * A parent widget is to be inflated. `undefined` if the application shell\n   */\n  parent?: Widget\n}\n\nexport interface ApplicationShellLayoutMigrationError extends Error {\n  code: 'ApplicationShellLayoutMigrationError'\n}\n\nexport namespace ApplicationShellLayoutMigrationError {\n  const code: ApplicationShellLayoutMigrationError['code'] = 'ApplicationShellLayoutMigrationError';\n\n  export function create(message?: string): ApplicationShellLayoutMigrationError {\n    return Object.assign(new Error(\n        `Could not migrate layout to version ${applicationShellLayoutVersion}.` + (message ? '\\n' + message : '')\n    ), {code});\n  }\n\n  export function is(error: Error | undefined): error is ApplicationShellLayoutMigrationError {\n    return !!error && 'code' in error && error['code'] === code;\n  }\n}\n\nexport const ApplicationShellLayoutMigration = Symbol('ApplicationShellLayoutMigration');\n\nexport interface ApplicationShellLayoutMigration {\n  /**\n   * A target migration version.\n   */\n  readonly layoutVersion: ApplicationShellLayoutVersion;\n\n  /**\n   * A migration can transform layout before it will be inflated.\n   *\n   * @throws `ApplicationShellLayoutMigrationError` if a layout cannot be migrated,\n   * in this case the default layout will be initialized.\n   */\n  onWillInflateLayout?(context: ApplicationShellLayoutMigrationContext): MaybePromise<void>;\n\n  /**\n   * A migration can transform the given description before it will be inflated.\n   *\n   * @returns a migrated widget description, or `undefined`\n   * @throws `ApplicationShellLayoutMigrationError` if a widget description cannot be migrated,\n   * in this case the default layout will be initialized.\n   */\n  onWillInflateWidget?(desc: WidgetDescription, context: ApplicationShellLayoutMigrationContext): MaybePromise<WidgetDescription | undefined>;\n}\n\nexport const RESET_LAYOUT = Command.toLocalizedCommand({\n  id: 'reset.layout',\n  category: CommonCommands.VIEW_CATEGORY,\n  label: 'Reset Workbench Layout'\n}, 'tart/core/resetWorkbenchLayout', CommonCommands.VIEW_CATEGORY_KEY);\n\n@injectable()\nexport class ShellLayoutRestorer implements CommandContribution {\n\n  protected storageKey = 'layout';\n  protected shouldStoreLayout: boolean = true;\n\n  @inject(ContributionProvider) @named(ApplicationShellLayoutMigration)\n  protected readonly migrations: ContributionProvider<ApplicationShellLayoutMigration>;\n\n  constructor(\n      @inject(WidgetManager) protected widgetManager: WidgetManager,\n      // @inject(ILogger) protected logger: ILogger,\n      @inject(StorageService) protected storageService: StorageService) {\n  }\n\n  registerCommands(commands: CommandRegistry): void {\n    commands.registerCommand(RESET_LAYOUT, {\n      execute: async () => this.resetLayout()\n    });\n  }\n\n  storeLayout(app: FrontendApplication): void {\n    if (this.shouldStoreLayout) {\n      try {\n        console.info('>>> Storing the layout...');\n        const layoutData = app.shell.getLayoutData();\n        const serializedLayoutData = this.deflate(layoutData);\n        this.storageService.setData(this.storageKey, serializedLayoutData);\n        console.info('<<< The layout has been successfully stored.');\n      } catch (error) {\n        this.storageService.setData(this.storageKey, undefined);\n        console.error('Error during serialization of layout data', error);\n      }\n    }\n  }\n\n  async restoreLayout(app: FrontendApplication): Promise<boolean> {\n    console.info('>>> Restoring the layout state...');\n    const serializedLayoutData = await this.storageService.getData<string>(this.storageKey);\n    if (serializedLayoutData === undefined) {\n      console.info('<<< Nothing to restore.');\n      return false;\n    }\n    const layoutData = await this.inflate(serializedLayoutData);\n    await app.shell.setLayoutData(layoutData);\n    console.info('<<< The layout has been successfully restored.');\n    return true;\n  }\n\n  protected async resetLayout(): Promise<void> {\n    console.info('>>> Resetting layout...');\n    this.shouldStoreLayout = false;\n    this.storageService.setData(this.storageKey, undefined);\n    // ThemeService.get().reset(); // Theme service cannot use DI, so the current theme ID is stored elsewhere. Hence the explicit reset.\n    console.info('<<< The layout has been successfully reset.');\n    window.location.reload();\n  }\n\n  protected isWidgetProperty(propertyName: string): boolean {\n    return propertyName === 'widget';\n  }\n\n  protected isWidgetsProperty(propertyName: string): boolean {\n    return propertyName === 'widgets';\n  }\n\n  /**\n   * Turns the layout data to a string representation.\n   */\n  protected deflate(data: object): string {\n    return JSON.stringify(data, (property: string, value) => {\n      if (this.isWidgetProperty(property)) {\n        const description = this.convertToDescription(value as Widget);\n        return description;\n      } else if (this.isWidgetsProperty(property)) {\n        const descriptions: WidgetDescription[] = [];\n        for (const widget of (value as Widget[])) {\n          const description = this.convertToDescription(widget);\n          if (description) {\n            descriptions.push(description);\n          }\n        }\n        return descriptions;\n      }\n      return value;\n    });\n  }\n\n  /**\n   * Creates the layout data from its string representation.\n   */\n  protected async inflate(layoutData: string): Promise<ApplicationShell.LayoutData> {\n    const parseContext = new ShellLayoutRestorer.ParseContext();\n    const layout = this.parse<ApplicationShell.LayoutData>(layoutData, parseContext);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let layoutVersion: number | any;\n    try {\n      layoutVersion = 'version' in layout && Number(layout.version);\n    } catch { /* no-op */\n    }\n    if (typeof layoutVersion !== 'number' || Number.isNaN(layoutVersion)) {\n      throw new Error('could not resolve a layout version');\n    }\n    if (layoutVersion !== applicationShellLayoutVersion) {\n      if (layoutVersion < applicationShellLayoutVersion) {\n        console.warn(`Layout version ${layoutVersion} is behind current layout version ${applicationShellLayoutVersion}, trying to migrate...`);\n      } else {\n        console.warn(`Layout version ${layoutVersion} is ahead current layout version ${applicationShellLayoutVersion}, trying to load anyway...`);\n      }\n      console.info(`Please use '${RESET_LAYOUT.label}' command if the layout looks bogus.`);\n    }\n\n    const migrations = this.migrations.getContributions()\n        .filter(m => m.layoutVersion > layoutVersion && m.layoutVersion <= applicationShellLayoutVersion)\n        .sort((m, m2) => m.layoutVersion - m2.layoutVersion);\n    if (migrations.length) {\n      console.info(`Found ${migrations.length} migrations from layout version ${layoutVersion} to version ${applicationShellLayoutVersion}, migrating...`);\n    }\n\n    const context = {layout, layoutVersion, migrations};\n    await this.fireWillInflateLayout(context);\n    await parseContext.inflate(context);\n    return layout;\n  }\n\n  protected async fireWillInflateLayout(context: ShellLayoutRestorer.InflateContext): Promise<void> {\n    for (const migration of context.migrations) {\n      if (migration.onWillInflateLayout) {\n        // don't catch exceptions, if one migration fails all should fail.\n        await migration.onWillInflateLayout(context);\n      }\n    }\n  }\n\n  protected parse<T>(layoutData: string, parseContext: ShellLayoutRestorer.ParseContext): T {\n    return JSON.parse(layoutData, (property: string, value) => {\n      if (this.isWidgetsProperty(property)) {\n        const widgets = parseContext.filteredArray();\n        const descs = (value as WidgetDescription[]);\n        for (let i = 0; i < descs.length; i++) {\n          parseContext.push(async context => {\n            widgets[i] = await this.convertToWidget(descs[i], context);\n          });\n        }\n        return widgets;\n      } else if (value && typeof value === 'object' && !Array.isArray(value)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const copy: any = {};\n        for (const p in value) {\n          if (this.isWidgetProperty(p)) {\n            parseContext.push(async context => {\n              copy[p] = await this.convertToWidget(value[p], context);\n            });\n          } else {\n            copy[p] = value[p];\n          }\n        }\n        return copy;\n      }\n      return value;\n    });\n  }\n\n  protected async fireWillInflateWidget(desc: WidgetDescription, context: ShellLayoutRestorer.InflateContext): Promise<WidgetDescription> {\n    for (const migration of context.migrations) {\n      if (migration.onWillInflateWidget) {\n        // don't catch exceptions, if one migration fails all should fail.\n        const migrated = await migration.onWillInflateWidget(desc, context);\n        if (migrated) {\n          if (migrated.innerWidgetState && typeof migrated.innerWidgetState !== 'string') {\n            // in order to inflate nested widgets\n            migrated.innerWidgetState = JSON.stringify(migrated.innerWidgetState);\n          }\n          desc = migrated;\n        }\n      }\n    }\n    return desc;\n  }\n\n  protected async convertToWidget(desc: WidgetDescription, context: ShellLayoutRestorer.InflateContext): Promise<Widget | undefined> {\n    if (!desc.constructionOptions) {\n      return undefined;\n    }\n    try {\n      desc = await this.fireWillInflateWidget(desc, context);\n      const widget = await this.widgetManager.getOrCreateWidget(desc.constructionOptions.factoryId, desc.constructionOptions.options);\n      if (StatefulWidget.is(widget) && desc.innerWidgetState !== undefined) {\n        try {\n          let oldState: object;\n          if (typeof desc.innerWidgetState === 'string') {\n            const parseContext = new ShellLayoutRestorer.ParseContext();\n            oldState = this.parse(desc.innerWidgetState, parseContext);\n            await parseContext.inflate({...context, parent: widget});\n          } else {\n            oldState = desc.innerWidgetState;\n          }\n          widget.restoreState(oldState);\n        } catch (e) {\n          if (ApplicationShellLayoutMigrationError.is(e)) {\n            throw e;\n          }\n          console.warn(`Couldn't restore widget state for ${widget.id}. Error: ${e} `);\n        }\n      }\n      if (widget.isDisposed) {\n        return undefined;\n      }\n      return widget;\n    } catch (e) {\n      if (ApplicationShellLayoutMigrationError.is(e)) {\n        throw e;\n      }\n      console.warn(`Couldn't restore widget for ${desc.constructionOptions.factoryId}. Error: ${e} `);\n      return undefined;\n    }\n  }\n\n  private convertToDescription(widget: Widget): WidgetDescription | undefined {\n    const desc = this.widgetManager.getDescription(widget);\n    if (desc) {\n      if (StatefulWidget.is(widget)) {\n        const innerState = widget.storeState();\n        return innerState ? {\n          constructionOptions: desc,\n          innerWidgetState: this.deflate(innerState)\n        } : undefined;\n      } else {\n        return {\n          constructionOptions: desc,\n          innerWidgetState: undefined\n        };\n      }\n    }\n  }\n\n}\n\nexport namespace ShellLayoutRestorer {\n\n  export class ParseContext {\n    protected readonly toInflate: Inflate[] = [];\n    protected readonly toFilter: Widgets[] = [];\n\n    /**\n     * Returns an array, which will be filtered from undefined elements\n     * after resolving promises, that create widgets.\n     */\n    filteredArray(): Widgets {\n      const array: Widgets = [];\n      this.toFilter.push(array);\n      return array;\n    }\n\n    push(toInflate: Inflate): void {\n      this.toInflate.push(toInflate);\n    }\n\n    async inflate(context: InflateContext): Promise<void> {\n      const pending: Promise<void>[] = [];\n      while (this.toInflate.length) {\n        pending.push(this.toInflate.pop()!(context));\n      }\n      await Promise.all(pending);\n\n      if (this.toFilter.length) {\n        this.toFilter.forEach(array => {\n          for (let i = 0; i < array.length; i++) {\n            if (array[i] === undefined) {\n              array.splice(i--, 1);\n            }\n          }\n        });\n      }\n    }\n  }\n\n  export type Widgets = (Widget | undefined)[];\n  export type Inflate = (context: InflateContext) => Promise<void>;\n\n  export interface InflateContext extends ApplicationShellLayoutMigrationContext {\n    readonly migrations: ApplicationShellLayoutMigration[];\n  }\n}\n"]}