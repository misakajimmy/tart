{"version":3,"sources":["browser/shell/view-contribution.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,EAAqB,UAAU,EAAW,MAAM,WAAW,CAAC;AACnE,OAAO,EAAC,MAAM,EAAC,MAAM,iBAAiB,CAAC;AACvC,OAAO,EAAC,OAAO,EAAE,mBAAmB,EAAE,eAAe,EAAE,gBAAgB,EAAE,iBAAiB,EAAC,MAAM,cAAc,CAAC;AAChH,OAAO,EAAC,sBAAsB,EAAE,kBAAkB,EAAC,MAAM,eAAe,CAAC;AACzE,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAC,gBAAgB,EAAC,MAAM,gBAAgB,CAAC;AAEhD,MAAM,WAAW,iBAAkB,SAAQ,gBAAgB,CAAC,aAAa;IACvE,MAAM,CAAC,EAAE,OAAO,CAAA;IAChB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,MAAM,CAAC,EAAE,OAAO,CAAC;CAClB;AAED,MAAM,WAAW,uBAAuB;IACtC,QAAQ,EAAE,MAAM,CAAC;IACjB,eAAe,CAAC,EAAE,MAAM,CAAC;IACzB,UAAU,EAAE,MAAM,CAAC;IACnB,oBAAoB,EAAE,gBAAgB,CAAC,aAAa,CAAC;IACrD,eAAe,CAAC,EAAE,MAAM,CAAC;IACzB,gBAAgB,CAAC,EAAE,MAAM,CAAC;CAC3B;AAGD,wBAAgB,oBAAoB,CAAC,CAAC,SAAS,wBAAwB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAMzK;AAED;;GAEG;AACH,8BACsB,wBAAwB,CAAC,CAAC,SAAS,MAAM,CAAE,YAAW,mBAAmB,EAAE,gBAAgB,EAAE,sBAAsB;IASnI,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,uBAAuB;IAPvD,QAAQ,CAAC,aAAa,CAAC,EAAE,OAAO,CAAC;IACV,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC;IAC7C,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,gBAAgB,CAAC;IAErE,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,gBAAgB,CAAC;gBAGxB,OAAO,EAAE,uBAAuB;IAUvD,IAAI,MAAM,IAAI,MAAM,CAEnB;IAED,IAAI,SAAS,IAAI,MAAM,CAEtB;IAED,IAAI,kBAAkB,IAAI,gBAAgB,CAAC,aAAa,CAEvD;IAED,IAAI,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAEvB;IAED,YAAY,IAAI,CAAC,GAAG,SAAS;IAIvB,QAAQ,CAAC,IAAI,GAAE,OAAO,CAAC,iBAAiB,CAAM,GAAG,OAAO,CAAC,CAAC,CAAC;IAuCjE,gBAAgB,CAAC,QAAQ,EAAE,eAAe,GAAG,IAAI;IAY3C,SAAS,IAAI,OAAO,CAAC,CAAC,GAAG,SAAS,CAAC;IAKzC,UAAU,IAAI,OAAO,CAAC,CAAC,CAAC;IAOxB,aAAa,CAAC,KAAK,EAAE,iBAAiB,GAAG,IAAI;IAS7C,mBAAmB,CAAC,WAAW,EAAE,kBAAkB,GAAG,IAAI;CAQ3D","file":"../../../src/browser/shell/view-contribution.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, interfaces, optional} from 'inversify';\nimport {Widget} from '@lumino/widgets';\nimport {Command, CommandContribution, CommandRegistry, MenuContribution, MenuModelRegistry} from '../../common';\nimport {KeybindingContribution, KeybindingRegistry} from '../keybinding';\nimport {WidgetManager} from '../widget-manager';\nimport {CommonMenus} from '../common-frontend-contribution';\nimport {ApplicationShell} from './application-shell';\nimport {QuickViewService} from '../quick-input';\n\nexport interface OpenViewArguments extends ApplicationShell.WidgetOptions {\n  toggle?: boolean\n  activate?: boolean;\n  reveal?: boolean;\n}\n\nexport interface ViewContributionOptions {\n  widgetId: string;\n  viewContainerId?: string;\n  widgetName: string;\n  defaultWidgetOptions: ApplicationShell.WidgetOptions;\n  toggleCommandId?: string;\n  toggleKeybinding?: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function bindViewContribution<T extends AbstractViewContribution<any>>(bind: interfaces.Bind, identifier: interfaces.Newable<T>): interfaces.BindingWhenOnSyntax<T> {\n  const syntax = bind<T>(identifier).toSelf().inSingletonScope();\n  bind(CommandContribution).toService(identifier);\n  bind(KeybindingContribution).toService(identifier);\n  bind(MenuContribution).toService(identifier);\n  return syntax;\n}\n\n/**\n * An abstract superclass for frontend contributions that add a view to the application shell.\n */\n@injectable()\nexport abstract class AbstractViewContribution<T extends Widget> implements CommandContribution, MenuContribution, KeybindingContribution {\n\n  readonly toggleCommand?: Command;\n  @inject(WidgetManager) protected readonly widgetManager: WidgetManager;\n  @inject(ApplicationShell) protected readonly shell: ApplicationShell;\n  @inject(QuickViewService) @optional()\n  protected readonly quickView: QuickViewService;\n\n  constructor(\n      protected readonly options: ViewContributionOptions\n  ) {\n    if (options.toggleCommandId) {\n      this.toggleCommand = {\n        id: options.toggleCommandId,\n        label: 'Toggle ' + this.viewLabel + ' View'\n      };\n    }\n  }\n\n  get viewId(): string {\n    return this.options.widgetId;\n  }\n\n  get viewLabel(): string {\n    return this.options.widgetName;\n  }\n\n  get defaultViewOptions(): ApplicationShell.WidgetOptions {\n    return this.options.defaultWidgetOptions;\n  }\n\n  get widget(): Promise<T> {\n    return this.widgetManager.getOrCreateWidget(this.viewId);\n  }\n\n  tryGetWidget(): T | undefined {\n    return this.widgetManager.tryGetWidget(this.viewId);\n  }\n\n  async openView(args: Partial<OpenViewArguments> = {}): Promise<T> {\n    const shell = this.shell;\n    const widget = await this.widgetManager.getOrCreateWidget(this.options.viewContainerId || this.viewId);\n    const tabBar = shell.getTabBarFor(widget);\n    const area = shell.getAreaFor(widget);\n    if (!tabBar) {\n      // The widget is not attached yet, so add it to the shell\n      const widgetArgs: OpenViewArguments = {\n        ...this.defaultViewOptions,\n        ...args\n      };\n      await shell.addWidget(widget, widgetArgs);\n    } else if (args.toggle && area && shell.isExpanded(area) && tabBar.currentTitle === widget.title) {\n      // The widget is attached and visible, so collapse the containing panel (toggle)\n      switch (area) {\n        case 'left':\n        case 'right':\n          await shell.collapsePanel(area);\n          break;\n        case 'bottom':\n          // Don't collapse the bottom panel if it's currently split\n          if (shell.bottomAreaTabBars.length === 1) {\n            await shell.collapsePanel('bottom');\n          }\n          break;\n        default:\n          // The main area cannot be collapsed, so close the widget\n          await this.closeView();\n      }\n      return this.widget;\n    }\n    if (widget.isAttached && args.activate) {\n      await shell.activateWidget(this.viewId);\n    } else if (widget.isAttached && args.reveal) {\n      await shell.revealWidget(this.viewId);\n    }\n    return this.widget;\n  }\n\n  registerCommands(commands: CommandRegistry): void {\n    if (this.toggleCommand) {\n      commands.registerCommand(this.toggleCommand, {\n        execute: () => this.toggleView()\n      });\n    }\n    this.quickView?.registerItem({\n      label: this.viewLabel,\n      open: () => this.openView({activate: true})\n    });\n  }\n\n  async closeView(): Promise<T | undefined> {\n    const widget = await this.shell.closeWidget(this.viewId);\n    return widget as T | undefined;\n  }\n\n  toggleView(): Promise<T> {\n    return this.openView({\n      toggle: true,\n      activate: true\n    });\n  }\n\n  registerMenus(menus: MenuModelRegistry): void {\n    if (this.toggleCommand) {\n      menus.registerMenuAction(CommonMenus.VIEW_VIEWS, {\n        commandId: this.toggleCommand.id,\n        label: this.viewLabel\n      });\n    }\n  }\n\n  registerKeybindings(keybindings: KeybindingRegistry): void {\n    if (this.toggleCommand && this.options.toggleKeybinding) {\n      keybindings.registerKeybinding({\n        command: this.toggleCommand.id,\n        keybinding: this.options.toggleKeybinding\n      });\n    }\n  }\n}\n"]}