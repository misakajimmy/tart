{"version":3,"sources":["browser/shell/split-panels.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAc,UAAU,EAAE,MAAM,EAAC,MAAM,iBAAiB,CAAC;AAEhE,MAAM,WAAW,oBAAoB;IACnC,wDAAwD;IACxD,IAAI,CAAC,EAAE,MAAM,GAAG,OAAO,GAAG,KAAK,GAAG,QAAQ,CAAC;IAC3C,2DAA2D;IAC3D,QAAQ,EAAE,MAAM,CAAC;IACjB,6DAA6D;IAC7D,eAAe,CAAC,EAAE,MAAM,CAAC;CAC1B;AAED,MAAM,WAAW,SAAU,SAAQ,oBAAoB;IACrD,MAAM,EAAE,UAAU,CAAC;IACnB,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,EAAE,OAAO,CAAC;IACjB,KAAK,EAAE,OAAO,CAAC;IACf,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,cAAc,CAAC,EAAE,MAAM,CAAC;IACxB,aAAa,CAAC,EAAE,MAAM,CAAC;IACvB,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,KAAK,IAAI,CAAC;IACrC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK,IAAI,CAAC;CACnC;AAED,qBACa,oBAAoB;IAE/B,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAmB;IAC9C,OAAO,CAAC,gBAAgB,CAAa;IAErC;;;;OAIG;IACH,sBAAsB,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,OAAO,EAAE,oBAAoB,GAAG,OAAO,CAAC,MAAM,CAAC;IAUjI;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,oBAAoB,GAAG,OAAO,CAAC,MAAM,CAAC;IAqBvG,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC;IAWxD,SAAS,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,GAAG,IAAI;IAwC5C,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,GAAG,IAAI;IA2BxD,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,GAAG,IAAI;IAOxC,SAAS,CAAC,kBAAkB,CAAC,IAAI,EAAE,SAAS,GAAG,MAAM,GAAG,SAAS;CAgBlE","file":"../../../src/browser/shell/split-panels.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {SplitLayout, SplitPanel, Widget} from '@lumino/widgets';\n\nexport interface SplitPositionOptions {\n  /** The side of the side panel that shall be resized. */\n  side?: 'left' | 'right' | 'top' | 'bottom';\n  /** The duration in milliseconds, or 0 for no animation. */\n  duration: number;\n  /** When this widget is hidden, the animation is canceled. */\n  referenceWidget?: Widget;\n}\n\nexport interface MoveEntry extends SplitPositionOptions {\n  parent: SplitPanel;\n  index: number;\n  started: boolean;\n  ended: boolean;\n  targetSize?: number;\n  targetPosition?: number;\n  startPosition?: number;\n  startTime?: number;\n  resolve?: (position: number) => void;\n  reject?: (reason: string) => void;\n}\n\n@injectable()\nexport class SplitPositionHandler {\n\n  private readonly splitMoves: MoveEntry[] = [];\n  private currentMoveIndex: number = 0;\n\n  /**\n   * Set the position of a split handle asynchronously. This function makes sure that such movements\n   * are performed one after another in order to prevent the movements from overriding each other.\n   * When resolved, the returned promise yields the final position of the split handle.\n   */\n  setSplitHandlePosition(parent: SplitPanel, index: number, targetPosition: number, options: SplitPositionOptions): Promise<number> {\n    const move: MoveEntry = {\n      ...options,\n      parent, targetPosition, index,\n      started: false,\n      ended: false\n    };\n    return this.moveSplitPos(move);\n  }\n\n  /**\n   * Resize a side panel asynchronously. This function makes sure that such movements are performed\n   * one after another in order to prevent the movements from overriding each other.\n   * When resolved, the returned promise yields the final position of the split handle.\n   */\n  setSidePanelSize(sidePanel: Widget, targetSize: number, options: SplitPositionOptions): Promise<number> {\n    if (targetSize < 0) {\n      return Promise.reject(new Error('Cannot resize to negative value.'));\n    }\n    const parent = sidePanel.parent;\n    if (!(parent instanceof SplitPanel)) {\n      return Promise.reject(new Error('Widget must be contained in a SplitPanel.'));\n    }\n    let index = parent.widgets.indexOf(sidePanel);\n    if (index > 0 && (options.side === 'right' || options.side === 'bottom')) {\n      index--;\n    }\n    const move: MoveEntry = {\n      ...options,\n      parent, targetSize, index,\n      started: false,\n      ended: false\n    };\n    return this.moveSplitPos(move);\n  }\n\n  protected moveSplitPos(move: MoveEntry): Promise<number> {\n    return new Promise<number>((resolve, reject) => {\n      move.resolve = resolve;\n      move.reject = reject;\n      if (this.splitMoves.length === 0) {\n        window.requestAnimationFrame(this.animationFrame.bind(this));\n      }\n      this.splitMoves.push(move);\n    });\n  }\n\n  protected animationFrame(time: number): void {\n    const move = this.splitMoves[this.currentMoveIndex];\n    let rejectedOrResolved = false;\n    if (move.ended || move.referenceWidget && move.referenceWidget.isHidden) {\n      this.splitMoves.splice(this.currentMoveIndex, 1);\n      if (move.startPosition === undefined || move.targetPosition === undefined) {\n        move.reject!('Panel is not visible.');\n      } else {\n        move.resolve!(move.targetPosition);\n      }\n      rejectedOrResolved = true;\n    } else if (!move.started) {\n      this.startMove(move, time);\n      if (move.duration <= 0 || move.startPosition === undefined || move.targetPosition === undefined\n          || move.startPosition === move.targetPosition) {\n        this.endMove(move);\n      }\n    } else {\n      const elapsedTime = time - move.startTime!;\n      if (elapsedTime >= move.duration) {\n        this.endMove(move);\n      } else {\n        const t = elapsedTime / move.duration;\n        const start = move.startPosition || 0;\n        const target = move.targetPosition || 0;\n        const pos = start + (target - start) * t;\n        (move.parent.layout as SplitLayout).moveHandle(move.index, pos);\n      }\n    }\n    if (!rejectedOrResolved) {\n      this.currentMoveIndex++;\n    }\n    if (this.currentMoveIndex >= this.splitMoves.length) {\n      this.currentMoveIndex = 0;\n    }\n    if (this.splitMoves.length > 0) {\n      window.requestAnimationFrame(this.animationFrame.bind(this));\n    }\n  }\n\n  protected startMove(move: MoveEntry, time: number): void {\n    if (move.targetPosition === undefined && move.targetSize !== undefined) {\n      const {clientWidth, clientHeight} = move.parent.node;\n      if (clientWidth && clientHeight) {\n        switch (move.side) {\n          case 'left':\n            move.targetPosition = Math.max(Math.min(move.targetSize, clientWidth), 0);\n            break;\n          case 'right':\n            move.targetPosition = Math.max(Math.min(clientWidth - move.targetSize, clientWidth), 0);\n            break;\n          case 'top':\n            move.targetPosition = Math.max(Math.min(move.targetSize, clientHeight), 0);\n            break;\n          case 'bottom':\n            move.targetPosition = Math.max(Math.min(clientHeight - move.targetSize, clientHeight), 0);\n            break;\n        }\n      }\n    }\n    if (move.startPosition === undefined) {\n      move.startPosition = this.getCurrentPosition(move);\n    }\n    move.startTime = time;\n    move.started = true;\n  }\n\n  protected endMove(move: MoveEntry): void {\n    if (move.targetPosition !== undefined) {\n      (move.parent.layout as SplitLayout).moveHandle(move.index, move.targetPosition);\n    }\n    move.ended = true;\n  }\n\n  protected getCurrentPosition(move: MoveEntry): number | undefined {\n    const layout = move.parent.layout as SplitLayout;\n    let pos: number | null;\n    if (layout.orientation === 'horizontal') {\n      pos = layout.handles[move.index].offsetLeft;\n    } else {\n      pos = layout.handles[move.index].offsetTop;\n    }\n    // eslint-disable-next-line no-null/no-null\n    if (pos !== null) {\n      return pos;\n    } else {\n      return undefined;\n    }\n  }\n\n}\n"]}