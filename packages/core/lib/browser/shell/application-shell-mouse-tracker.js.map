{"version":3,"sources":["browser/shell/application-shell-mouse-tracker.ts"],"names":[],"mappings":"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","file":"../../../src/browser/shell/application-shell-mouse-tracker.js","sourcesContent":["/**\n * Contribution that tracks `mouseup` and `mousedown` events.\n *\n * This is required to be able to track the `TabBar`, `DockPanel`, and `SidePanel` resizing and drag and drop events correctly\n * all over the application. By default, when the mouse is over an `iframe` we lose the mouse tracking ability, so whenever\n * we click (`mousedown`), we overlay a transparent `div` over the `iframe` in the Mini Browser, then we set the `display` of\n * the transparent `div` to `none` on `mouseup` events.\n */\nimport {inject, injectable} from 'inversify';\nimport {FrontendApplicationContribution} from '../frontend-application';\nimport {ApplicationShell} from './application-shell';\nimport {Disposable, DisposableCollection, Emitter, Event} from '../../common';\nimport {FocusTracker, PanelLayout, SplitPanel} from '@lumino/widgets';\nimport {addEventListener, Widget} from '../widgets';\n\n@injectable()\nexport class ApplicationShellMouseTracker implements FrontendApplicationContribution {\n\n  @inject(ApplicationShell)\n  protected readonly applicationShell: ApplicationShell;\n\n  protected readonly toDispose = new DisposableCollection();\n  protected readonly toDisposeOnActiveChange = new DisposableCollection();\n\n  protected readonly mouseupEmitter = new Emitter<MouseEvent>();\n  protected readonly mousedownEmitter = new Emitter<MouseEvent>();\n\n  get onMouseup(): Event<MouseEvent> {\n    return this.mouseupEmitter.event;\n  }\n\n  get onMousedown(): Event<MouseEvent> {\n    return this.mousedownEmitter.event;\n  }\n\n  onStart(): void {\n    // Here we need to attach a `mousedown` listener to the `TabBar`s, `DockPanel`s and the `SidePanel`s. Otherwise, Phosphor handles the event and stops the propagation.\n    // Track the `mousedown` on the `TabBar` for the currently active widget.\n    this.applicationShell.activeChanged.connect((shell: ApplicationShell, args: FocusTracker.IChangedArgs<Widget>) => {\n      this.toDisposeOnActiveChange.dispose();\n      if (args.newValue) {\n        const tabBar = shell.getTabBarFor(args.newValue);\n        if (tabBar) {\n          this.toDisposeOnActiveChange.push(addEventListener(tabBar.node, 'mousedown', this.mousedownListener, true));\n        }\n      }\n    });\n\n    // Track the `mousedown` events for the `SplitPanel`s, if any.\n    const {layout} = this.applicationShell;\n    if (layout instanceof PanelLayout) {\n      this.toDispose.pushAll(\n          layout.widgets.filter(ApplicationShellMouseTracker.isSplitPanel).map(splitPanel => addEventListener(splitPanel.node, 'mousedown', this.mousedownListener, true))\n      );\n    }\n    // Track the `mousedown` on each `DockPanel`.\n    const {mainPanel, bottomPanel, leftPanelHandler, rightPanelHandler} = this.applicationShell;\n    this.toDispose.pushAll([mainPanel, bottomPanel, leftPanelHandler.dockPanel, rightPanelHandler.dockPanel]\n        .map(panel => addEventListener(panel.node, 'mousedown', this.mousedownListener, true)));\n\n    // The `mouseup` event has to be tracked on the `document`. Phosphor attaches to there.\n    document.addEventListener('mouseup', this.mouseupListener, true);\n\n    // Make sure it is disposed in the end.\n    this.toDispose.pushAll([\n      this.mousedownEmitter,\n      this.mouseupEmitter,\n      Disposable.create(() => document.removeEventListener('mouseup', this.mouseupListener, true))\n    ]);\n  }\n\n  onStop(): void {\n    this.toDispose.dispose();\n    this.toDisposeOnActiveChange.dispose();\n  }\n\n  protected readonly mouseupListener: (e: MouseEvent) => void = e => this.mouseupEmitter.fire(e);\n\n  protected readonly mousedownListener: (e: MouseEvent) => void = e => this.mousedownEmitter.fire(e);\n\n}\n\nexport namespace ApplicationShellMouseTracker {\n\n  export function isSplitPanel(arg: Widget): arg is SplitPanel {\n    return arg instanceof SplitPanel;\n  }\n\n}\n"]}