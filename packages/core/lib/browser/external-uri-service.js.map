{"version":3,"sources":["browser/external-uri-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;AAElF,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAGrC,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;AAGpC,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAE7B;;;;;;;OAOG;IACH,OAAO,CAAC,GAAQ;QACd,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,SAAS,EAAE;YACb,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;SACzC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED,cAAc,CAAC,GAAQ;QACrB,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,MAAM,KAAK,OAAO,EAAE;YACnD,OAAO,SAAS,CAAC;SAClB;QACD,MAAM,cAAc,GAAG,6CAA6C,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,SAAS,CAAC;SAClB;QACD,OAAO;YACL,OAAO,EAAE,cAAc,CAAC,CAAC,CAAC;YAC1B,IAAI,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;SACzB,CAAC;IACJ,CAAC;IAES,WAAW,CAAC,GAAQ,EAAE,SAA4C;QAC1E,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAC1C,OAAO,IAAI,QAAQ,CAAC,EAAC,IAAI,EAAC,CAAC,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC9G,CAAC;IAES,YAAY,CAAC,SAA4C;QACjE,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC;IACzD,CAAC;CAEF,CAAA;AAzCY,kBAAkB;IAD9B,UAAU,EAAE;GACA,kBAAkB,CAyC9B;SAzCY,kBAAkB","file":"../../src/browser/external-uri-service.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport URI from '../common/uri';\nimport {MaybePromise} from '../common/types';\nimport {Endpoint} from './endpoint';\n\n@injectable()\nexport class ExternalUriService {\n\n  /**\n   * Maps local to remote URLs.\n   * Should be no-op if the given URL is not a localhost URL.\n   *\n   * By default maps to an origin serving tart.\n   *\n   * Use `parseLocalhost` to retrieve localhost address and port information.\n   */\n  resolve(uri: URI): MaybePromise<URI> {\n    const localhost = this.parseLocalhost(uri);\n    if (localhost) {\n      return this.toRemoteUrl(uri, localhost);\n    }\n    return uri;\n  }\n\n  parseLocalhost(uri: URI): { address: string, port: number } | undefined {\n    if (uri.scheme !== 'http' && uri.scheme !== 'https') {\n      return undefined;\n    }\n    const localhostMatch = /^(localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0):(\\d+)$/.exec(uri.authority);\n    if (!localhostMatch) {\n      return undefined;\n    }\n    return {\n      address: localhostMatch[1],\n      port: +localhostMatch[2],\n    };\n  }\n\n  protected toRemoteUrl(uri: URI, localhost: { address: string, port: number }): URI {\n    const host = this.toRemoteHost(localhost);\n    return new Endpoint({host}).getRestUrl().withPath(uri.path).withFragment(uri.fragment).withQuery(uri.query);\n  }\n\n  protected toRemoteHost(localhost: { address: string, port: number }): string {\n    return `${window.location.hostname}:${localhost.port}`;\n  }\n\n}\n"]}