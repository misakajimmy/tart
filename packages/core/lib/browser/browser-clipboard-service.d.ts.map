{"version":3,"sources":["browser/browser-clipboard-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAIlF,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAC,cAAc,EAAC,MAAM,2BAA2B,CAAC;AAEzD,MAAM,WAAW,kBAAkB;IACjC,QAAQ,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;IAE5B,SAAS,CAAC,KAAK,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;CACzC;AAED,MAAM,WAAW,gBAAgB;IAC/B,KAAK,EAAE,SAAS,GAAG,QAAQ,GAAG,QAAQ,CAAA;CACvC;AAED,MAAM,WAAW,oBAAoB;IACnC,KAAK,CAAC,OAAO,EAAE;QAAE,IAAI,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAA;CAC5D;AAED,qBACa,uBAAwB,YAAW,gBAAgB;IAG9D,SAAS,CAAC,QAAQ,CAAC,cAAc,EAAE,cAAc,CAAC;IAE5C,QAAQ,IAAI,OAAO,CAAC,MAAM,CAAC;IA2B3B,SAAS,CAAC,KAAK,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;cA4B7B,eAAe,CAAC,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC;IAOxE,SAAS,CAAC,eAAe,IAAI,kBAAkB;CAMhD","file":"../../src/browser/browser-clipboard-service.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 RedHat and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable} from 'inversify';\nimport {isFirefox} from './browser';\nimport {ClipboardService} from './clipboard-service';\nimport {MessageService} from '../common/message-service';\n\nexport interface NavigatorClipboard {\n  readText(): Promise<string>;\n\n  writeText(value: string): Promise<void>;\n}\n\nexport interface PermissionStatus {\n  state: 'granted' | 'prompt' | 'denied'\n}\n\nexport interface NavigatorPermissions {\n  query(options: { name: string }): Promise<PermissionStatus>\n}\n\n@injectable()\nexport class BrowserClipboardService implements ClipboardService {\n\n  @inject(MessageService)\n  protected readonly messageService: MessageService;\n\n  async readText(): Promise<string> {\n    let permission;\n    try {\n      permission = await this.queryPermission('clipboard-read');\n    } catch (e1) {\n      console.error('Failed checking a clipboard-read permission.', e1);\n      // in FireFox, Clipboard API isn't gated with the permissions\n      try {\n        return await this.getClipboardAPI().readText();\n      } catch (e2) {\n        console.error('Failed reading clipboard content.', e2);\n        if (isFirefox) {\n          this.messageService.warn(`Clipboard API is not available.\n                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload tart.\n                    Note, it will allow FireFox getting full access to the system clipboard.`);\n        }\n        return '';\n      }\n    }\n    if (permission.state === 'denied') {\n      // most likely, the user intentionally denied the access\n      this.messageService.warn(\"Access to the clipboard is denied. Check your browser's permission.\");\n      return '';\n    }\n    return this.getClipboardAPI().readText();\n  }\n\n  async writeText(value: string): Promise<void> {\n    let permission;\n    try {\n      permission = await this.queryPermission('clipboard-write');\n    } catch (e1) {\n      console.error('Failed checking a clipboard-write permission.', e1);\n      // in FireFox, Clipboard API isn't gated with the permissions\n      try {\n        await this.getClipboardAPI().writeText(value);\n        return;\n      } catch (e2) {\n        console.error('Failed writing to the clipboard.', e2);\n        if (isFirefox) {\n          this.messageService.warn(`Clipboard API is not available.\n                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload tart.\n                    Note, it will allow FireFox getting full access to the system clipboard.`);\n        }\n        return;\n      }\n    }\n    if (permission.state === 'denied') {\n      // most likely, the user intentionally denied the access\n      this.messageService.warn(\"Access to the clipboard is denied. Check your browser's permission.\");\n      return;\n    }\n    return this.getClipboardAPI().writeText(value);\n  }\n\n  protected async queryPermission(name: string): Promise<PermissionStatus> {\n    if ('permissions' in navigator) {\n      return (<NavigatorPermissions>navigator['permissions']).query({name: name});\n    }\n    throw new Error('Permissions API unavailable');\n  }\n\n  protected getClipboardAPI(): NavigatorClipboard {\n    if ('clipboard' in navigator) {\n      return (<NavigatorClipboard>navigator['clipboard']);\n    }\n    throw new Error('Async Clipboard API unavailable');\n  }\n}\n"]}