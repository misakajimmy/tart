{"version":3,"sources":["browser/keybinding.ts"],"names":[],"mappings":"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","file":"../../src/browser/keybinding.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, named} from 'inversify';\nimport {isOSX} from '../common/os';\nimport {Emitter, Event} from '../common';\nimport {Command, CommandRegistry} from '../common/command';\nimport {Disposable, DisposableCollection} from '../common/disposable';\nimport {Key, KeyCode, KeySequence} from './keyboard/keys';\nimport {KeyboardLayoutService} from './keyboard/keyboard-layout-service';\nimport {ContributionProvider} from '../common/contribution-provider';\nimport {StatusBar, StatusBarAlignment} from './status-bar/status-bar';\nimport {ContextKeyService} from './context-key-service';\nimport * as common from '../common/keybinding';\n\nexport enum KeybindingScope {\n  DEFAULT,\n  USER,\n  WORKSPACE,\n  END\n}\n\nexport namespace KeybindingScope {\n  export const length = KeybindingScope.END - KeybindingScope.DEFAULT;\n}\n\n/**\n * @deprecated import from `@tart/core/lib/common/keybinding` instead\n */\nexport type Keybinding = common.Keybinding;\nexport const Keybinding = common.Keybinding;\n\nexport interface ResolvedKeybinding extends common.Keybinding {\n  /**\n   * The KeyboardLayoutService may transform the `keybinding` depending on the\n   * user's keyboard layout. This property holds the transformed keybinding that\n   * should be used in the UI. The value is undefined if the KeyboardLayoutService\n   * has not been called yet to resolve the keybinding.\n   */\n  resolved?: KeyCode[];\n}\n\nexport interface ScopedKeybinding extends common.Keybinding {\n  /** Current keybinding scope */\n  scope: KeybindingScope;\n}\n\nexport const KeybindingContribution = Symbol('KeybindingContribution');\n\n/**\n * Allows extensions to contribute {@link common.Keybinding}s\n */\nexport interface KeybindingContribution {\n  /**\n   * Registers keybindings.\n   * @param keybindings the keybinding registry.\n   */\n  registerKeybindings(keybindings: KeybindingRegistry): void;\n}\n\nexport const KeybindingContext = Symbol('KeybindingContext');\n\nexport interface KeybindingContext {\n  /**\n   * The unique ID of the current context.\n   */\n  readonly id: string;\n\n  isEnabled(arg: common.Keybinding): boolean;\n}\n\nexport namespace KeybindingContexts {\n\n  export const NOOP_CONTEXT: KeybindingContext = {\n    id: 'noop.keybinding.context',\n    isEnabled: () => true\n  };\n\n  export const DEFAULT_CONTEXT: KeybindingContext = {\n    id: 'default.keybinding.context',\n    isEnabled: () => false\n  };\n}\n\n@injectable()\nexport class KeybindingRegistry {\n\n  static readonly PASSTHROUGH_PSEUDO_COMMAND = 'passthrough';\n  protected keySequence: KeySequence = [];\n\n  protected readonly contexts: { [id: string]: KeybindingContext } = {};\n  protected readonly keymaps: ScopedKeybinding[][] = [...Array(KeybindingScope.length)].map(() => []);\n\n  @inject(KeyboardLayoutService)\n  protected readonly keyboardLayoutService: KeyboardLayoutService;\n\n  @inject(ContributionProvider) @named(KeybindingContext)\n  protected readonly contextProvider: ContributionProvider<KeybindingContext>;\n\n  @inject(CommandRegistry)\n  protected readonly commandRegistry: CommandRegistry;\n\n  @inject(ContributionProvider) @named(KeybindingContribution)\n  protected readonly contributions: ContributionProvider<KeybindingContribution>;\n\n  @inject(StatusBar)\n  protected readonly statusBar: StatusBar;\n\n  @inject(ContextKeyService)\n  protected readonly whenContextService: ContextKeyService;\n  protected keybindingsChanged = new Emitter<void>();\n  protected readonly toResetKeymap = new Map<KeybindingScope, Disposable>();\n\n  /**\n   * Event that is fired when the resolved keybindings change due to a different keyboard layout\n   * or when a new keymap is being set\n   */\n  get onKeybindingsChanged(): Event<void> {\n    return this.keybindingsChanged.event;\n  }\n\n  async onStart(): Promise<void> {\n    await this.keyboardLayoutService.initialize();\n    this.keyboardLayoutService.onKeyboardLayoutChanged(newLayout => {\n      this.clearResolvedKeybindings();\n      this.keybindingsChanged.fire(undefined);\n    });\n    this.registerContext(KeybindingContexts.NOOP_CONTEXT);\n    this.registerContext(KeybindingContexts.DEFAULT_CONTEXT);\n    this.registerContext(...this.contextProvider.getContributions());\n    for (const contribution of this.contributions.getContributions()) {\n      contribution.registerKeybindings(this);\n    }\n  }\n\n  /**\n   * Register a default keybinding to the registry.\n   *\n   * Keybindings registered later have higher priority during evaluation.\n   *\n   * @param binding the keybinding to be registered\n   */\n  registerKeybinding(binding: common.Keybinding): Disposable {\n    return this.doRegisterKeybinding(binding);\n  }\n\n  /**\n   * Register multiple default keybindings to the registry\n   *\n   * @param bindings An array of keybinding to be registered\n   */\n  registerKeybindings(...bindings: common.Keybinding[]): Disposable {\n    return this.doRegisterKeybindings(bindings, KeybindingScope.DEFAULT);\n  }\n\n  /**\n   * Unregister all keybindings from the registry that are bound to the key of the given keybinding\n   *\n   * @param binding a keybinding specifying the key to be unregistered\n   */\n  unregisterKeybinding(binding: common.Keybinding): void;\n  /**\n   * Unregister all keybindings with the given key from the registry\n   *\n   * @param key a key to be unregistered\n   */\n  unregisterKeybinding(key: string): void;\n  /**\n   * Unregister all existing keybindings for the given command\n   * @param command the command to unregister all keybindings for\n   */\n  unregisterKeybinding(command: Command): void;\n\n  unregisterKeybinding(arg: common.Keybinding | string | Command): void {\n    const keymap = this.keymaps[KeybindingScope.DEFAULT];\n    const filter = Command.is(arg)\n        ? ({command}: common.Keybinding) => command === arg.id\n        : ({keybinding}: common.Keybinding) => Keybinding.is(arg)\n            ? keybinding === arg.keybinding\n            : keybinding === arg;\n    for (const binding of keymap.filter(filter)) {\n      const idx = keymap.indexOf(binding);\n      if (idx !== -1) {\n        keymap.splice(idx, 1);\n      }\n    }\n  }\n\n  /**\n   * Ensure that the `resolved` property of the given binding is set by calling the KeyboardLayoutService.\n   */\n  resolveKeybinding(binding: ResolvedKeybinding): KeyCode[] {\n    if (!binding.resolved) {\n      const sequence = KeySequence.parse(binding.keybinding);\n      binding.resolved = sequence.map(code => this.keyboardLayoutService.resolveKeyCode(code));\n    }\n    return binding.resolved;\n  }\n\n  /**\n   * Checks whether a colliding {@link common.Keybinding} exists in a specific scope.\n   * @param binding the keybinding to check\n   * @param scope the keybinding scope to check\n   * @returns true if there is a colliding keybinding\n   */\n  containsKeybindingInScope(binding: common.Keybinding, scope = KeybindingScope.USER): boolean {\n    const bindingKeySequence = this.resolveKeybinding(binding);\n    const collisions = this.getKeySequenceCollisions(this.getUsableBindings(this.keymaps[scope]), bindingKeySequence)\n        .filter(b => b.context === binding.context && !b.when && !binding.when);\n    if (collisions.full.length > 0) {\n      return true;\n    }\n    if (collisions.partial.length > 0) {\n      return true;\n    }\n    if (collisions.shadow.length > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get a user visible representation of a {@link common.Keybinding}.\n   * @returns an array of strings representing all elements of the {@link KeySequence} defined by the {@link common.Keybinding}\n   * @param keybinding the keybinding\n   * @param separator the separator to be used to stringify {@link KeyCode}s that are part of the {@link KeySequence}\n   */\n  acceleratorFor(keybinding: common.Keybinding, separator: string = ' '): string[] {\n    const bindingKeySequence = this.resolveKeybinding(keybinding);\n    return this.acceleratorForSequence(bindingKeySequence, separator);\n  }\n\n  /**\n   * Get a user visible representation of a {@link KeySequence}.\n   * @returns an array of strings representing all elements of the {@link KeySequence}\n   * @param keySequence the keysequence\n   * @param separator the separator to be used to stringify {@link KeyCode}s that are part of the {@link KeySequence}\n   */\n  acceleratorForSequence(keySequence: KeySequence, separator: string = ' '): string[] {\n    return keySequence.map(keyCode => this.acceleratorForKeyCode(keyCode, separator));\n  }\n\n  /**\n   * Get a user visible representation of a key code (a key with modifiers).\n   * @returns a string representing the {@link KeyCode}\n   * @param keyCode the keycode\n   * @param separator the separator used to separate keys (key and modifiers) in the returning string\n   */\n  acceleratorForKeyCode(keyCode: KeyCode, separator: string = ' '): string {\n    const keyCodeResult = [];\n    if (keyCode.meta && isOSX) {\n      keyCodeResult.push('Cmd');\n    }\n    if (keyCode.ctrl) {\n      keyCodeResult.push('Ctrl');\n    }\n    if (keyCode.alt) {\n      keyCodeResult.push('Alt');\n    }\n    if (keyCode.shift) {\n      keyCodeResult.push('Shift');\n    }\n    if (keyCode.key) {\n      keyCodeResult.push(this.acceleratorForKey(keyCode.key));\n    }\n    return keyCodeResult.join(separator);\n  }\n\n  /**\n   * Return a user visible representation of a single key.\n   */\n  acceleratorForKey(key: Key): string {\n    if (isOSX) {\n      if (key === Key.ARROW_LEFT) {\n        return '←';\n      }\n      if (key === Key.ARROW_RIGHT) {\n        return '→';\n      }\n      if (key === Key.ARROW_UP) {\n        return '↑';\n      }\n      if (key === Key.ARROW_DOWN) {\n        return '↓';\n      }\n    }\n    const keyString = this.keyboardLayoutService.getKeyboardCharacter(key);\n    if (key.keyCode >= Key.KEY_A.keyCode && key.keyCode <= Key.KEY_Z.keyCode ||\n        key.keyCode >= Key.F1.keyCode && key.keyCode <= Key.F24.keyCode) {\n      return keyString.toUpperCase();\n    } else if (keyString.length > 1) {\n      return keyString.charAt(0).toUpperCase() + keyString.slice(1);\n    } else {\n      return keyString;\n    }\n  }\n\n  /**\n   * Get all keybindings associated to a commandId.\n   *\n   * @param commandId The ID of the command for which we are looking for keybindings.\n   * @returns an array of {@link ScopedKeybinding}\n   */\n  getKeybindingsForCommand(commandId: string): ScopedKeybinding[] {\n    const result: ScopedKeybinding[] = [];\n\n    for (let scope = KeybindingScope.END - 1; scope >= KeybindingScope.DEFAULT; scope--) {\n      this.keymaps[scope].forEach(binding => {\n        const command = this.commandRegistry.getCommand(binding.command);\n        if (command) {\n          if (command.id === commandId) {\n            result.push({...binding, scope});\n          }\n        }\n      });\n\n      if (result.length > 0) {\n        return result;\n      }\n    }\n    return result;\n  }\n\n  dispatchCommand(id: string, target?: EventTarget): void {\n    const keybindings = this.getKeybindingsForCommand(id);\n    if (keybindings.length) {\n      for (const keyCode of this.resolveKeybinding(keybindings[0])) {\n        this.dispatchKeyDown(keyCode, target);\n      }\n    }\n  }\n\n  dispatchKeyDown(input: KeyboardEventInit | KeyCode | string, target: EventTarget = document.activeElement || window): void {\n    const eventInit = this.asKeyboardEventInit(input);\n    const emulatedKeyboardEvent = new KeyboardEvent('keydown', eventInit);\n    target.dispatchEvent(emulatedKeyboardEvent);\n  }\n\n  /**\n   * Run the command matching to the given keyboard event.\n   */\n  run(event: KeyboardEvent): void {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const eventDispatch = 'code';\n    const keyCode = KeyCode.createKeyCode(event, eventDispatch);\n    /* Keycode is only a modifier, next keycode will be modifier + key.\n       Ignore this one.  */\n    // if (keyCode.isModifierOnly()) {\n    //     return;\n    // }\n    //\n    this.keyboardLayoutService.validateKeyCode(keyCode);\n    this.keySequence.push(keyCode);\n    const match = this.matchKeybinding(this.keySequence, event);\n\n    if (match && match.kind === 'partial') {\n      /* Accumulate the keysequence */\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.statusBar.setElement('keybinding-status', {\n        text: `(${this.acceleratorForSequence(this.keySequence, '+')}) was pressed, waiting for more keys`,\n        alignment: StatusBarAlignment.LEFT,\n        priority: 2\n      });\n    } else {\n      if (match && match.kind === 'full') {\n        this.executeKeyBinding(match.binding, event);\n      }\n      this.keySequence = [];\n      this.statusBar.removeElement('keybinding-status');\n    }\n  }\n\n  /**\n   * Match first binding in the current context.\n   * Keybindings ordered by a scope and by a registration order within the scope.\n   *\n   * FIXME:\n   * This method should run very fast since it happens on each keystroke. We should reconsider how keybindings are stored.\n   * It should be possible to look up full and partial keybinding for given key sequence for constant time using some kind of tree.\n   * Such tree should not contain disabled keybindings and be invalidated whenever the registry is changed.\n   */\n  matchKeybinding(keySequence: KeySequence, event?: KeyboardEvent): KeybindingRegistry.Match {\n    let disabled: Set<string> | undefined;\n    const isEnabled = (binding: ScopedKeybinding) => {\n      if (event && !this.isEnabled(binding, event)) {\n        return false;\n      }\n      const {command, context, when, keybinding} = binding;\n      if (!this.isUsable(binding)) {\n        disabled = disabled || new Set<string>();\n        disabled.add(JSON.stringify({command: command.substr(1), context, when, keybinding}));\n        return false;\n      }\n      return !disabled?.has(JSON.stringify({command, context, when, keybinding}));\n    };\n\n    for (let scope = KeybindingScope.END; --scope >= KeybindingScope.DEFAULT;) {\n      for (const binding of this.keymaps[scope]) {\n        const resolved = this.resolveKeybinding(binding);\n        const compareResult = KeySequence.compare(keySequence, resolved);\n        if (compareResult === KeySequence.CompareResult.FULL && isEnabled(binding)) {\n          return {kind: 'full', binding};\n        }\n        if (compareResult === KeySequence.CompareResult.PARTIAL && isEnabled(binding)) {\n          return {kind: 'partial', binding};\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Return true of string a pseudo-command id, in other words a command id\n   * that has a special meaning and that we won't find in the command\n   * registry.\n   *\n   * @param commandId commandId to test\n   */\n  isPseudoCommand(commandId: string): boolean {\n    return commandId === KeybindingRegistry.PASSTHROUGH_PSEUDO_COMMAND;\n  }\n\n  /**\n   * Sets a new keymap replacing all existing {@link common.Keybinding}s in the given scope.\n   * @param scope the keybinding scope\n   * @param bindings an array containing the new {@link common.Keybinding}s\n   */\n  setKeymap(scope: KeybindingScope, bindings: common.Keybinding[]): void {\n    this.resetKeybindingsForScope(scope);\n    this.toResetKeymap.set(scope, this.doRegisterKeybindings(bindings, scope));\n    this.keybindingsChanged.fire(undefined);\n  }\n\n  /**\n   * Reset keybindings for a specific scope\n   * @param scope scope to reset the keybindings for\n   */\n  resetKeybindingsForScope(scope: KeybindingScope): void {\n    const toReset = this.toResetKeymap.get(scope);\n    if (toReset) {\n      toReset.dispose();\n    }\n  }\n\n  /**\n   * Reset keybindings for all scopes(only leaves the default keybindings mapped)\n   */\n  resetKeybindings(): void {\n    for (let i = KeybindingScope.DEFAULT + 1; i < KeybindingScope.END; i++) {\n      this.keymaps[i] = [];\n    }\n  }\n\n  /**\n   * Get all {@link common.Keybinding}s for a {@link KeybindingScope}.\n   * @returns an array of {@link common.ScopedKeybinding}\n   * @param scope the keybinding scope to retrieve the {@link common.Keybinding}s for.\n   */\n  getKeybindingsByScope(scope: KeybindingScope): ScopedKeybinding[] {\n    return this.keymaps[scope];\n  }\n\n  /**\n   * Registers the keybinding context arguments into the application. Fails when an already registered\n   * context is being registered.\n   *\n   * @param contexts the keybinding contexts to register into the application.\n   */\n  protected registerContext(...contexts: KeybindingContext[]): void {\n    for (const context of contexts) {\n      const {id} = context;\n      if (this.contexts[id]) {\n        // this.logger.error(`A keybinding context with ID ${id} is already registered.`);\n      } else {\n        this.contexts[id] = context;\n      }\n    }\n  }\n\n  protected doRegisterKeybindings(bindings: common.Keybinding[], scope: KeybindingScope = KeybindingScope.DEFAULT): Disposable {\n    const toDispose = new DisposableCollection();\n    for (const binding of bindings) {\n      toDispose.push(this.doRegisterKeybinding(binding, scope));\n    }\n    return toDispose;\n  }\n\n  protected doRegisterKeybinding(binding: common.Keybinding, scope: KeybindingScope = KeybindingScope.DEFAULT): Disposable {\n    try {\n      this.resolveKeybinding(binding);\n      const scoped = Object.assign(binding, {scope});\n      this.insertBindingIntoScope(scoped, scope);\n      return Disposable.create(() => {\n        const index = this.keymaps[scope].indexOf(scoped);\n        if (index !== -1) {\n          this.keymaps[scope].splice(index, 1);\n        }\n      });\n    } catch (error) {\n      console.log('Could not register keybinding');\n      // this.logger.warn(`Could not register keybinding:\\n  ${common.Keybinding.stringify(binding)}\\n${error}`);\n      return Disposable.NULL;\n    }\n  }\n\n  /**\n   * Ensures that keybindings are inserted in order of increasing length of binding to ensure that if a\n   * user triggers a short keybinding (e.g. ctrl+k), the UI won't wait for a longer one (e.g. ctrl+k enter)\n   */\n  protected insertBindingIntoScope(item: common.Keybinding & { scope: KeybindingScope; }, scope: KeybindingScope): void {\n    const scopedKeymap = this.keymaps[scope];\n    const getNumberOfKeystrokes = (binding: common.Keybinding): number => (binding.keybinding.trim().match(/\\s/g)?.length ?? 0) + 1;\n    const numberOfKeystrokesInBinding = getNumberOfKeystrokes(item);\n    const indexOfFirstItemWithEqualStrokes = scopedKeymap.findIndex(existingBinding => getNumberOfKeystrokes(existingBinding) === numberOfKeystrokesInBinding);\n    if (indexOfFirstItemWithEqualStrokes > -1) {\n      scopedKeymap.splice(indexOfFirstItemWithEqualStrokes, 0, item);\n    } else {\n      scopedKeymap.push(item);\n    }\n  }\n\n  /**\n   * Clear all `resolved` properties of registered keybindings so the KeyboardLayoutService is called\n   * again to resolve them. This is necessary when the user's keyboard layout has changed.\n   */\n  protected clearResolvedKeybindings(): void {\n    for (let i = KeybindingScope.DEFAULT; i < KeybindingScope.END; i++) {\n      const bindings = this.keymaps[i];\n      for (let j = 0; j < bindings.length; j++) {\n        const binding = bindings[j] as ResolvedKeybinding;\n        binding.resolved = undefined;\n      }\n    }\n  }\n\n  /**\n   * Finds collisions for a key sequence inside a list of bindings (error-free)\n   *\n   * @param bindings the reference bindings\n   * @param candidate the sequence to match\n   */\n  protected getKeySequenceCollisions(bindings: ScopedKeybinding[], candidate: KeySequence): KeybindingRegistry.KeybindingsResult {\n    const result = new KeybindingRegistry.KeybindingsResult();\n    for (const binding of bindings) {\n      try {\n        const bindingKeySequence = this.resolveKeybinding(binding);\n        const compareResult = KeySequence.compare(candidate, bindingKeySequence);\n        switch (compareResult) {\n          case KeySequence.CompareResult.FULL: {\n            result.full.push(binding);\n            break;\n          }\n          case KeySequence.CompareResult.PARTIAL: {\n            result.partial.push(binding);\n            break;\n          }\n          case KeySequence.CompareResult.SHADOW: {\n            result.shadow.push(binding);\n            break;\n          }\n        }\n      } catch (error) {\n        // this.logger.warn(error);\n      }\n    }\n    return result;\n  }\n\n  protected isActive(binding: common.Keybinding): boolean {\n    /* Pseudo commands like \"passthrough\" are always active (and not found\n       in the command registry).  */\n    if (this.isPseudoCommand(binding.command)) {\n      return true;\n    }\n\n    const command = this.commandRegistry.getCommand(binding.command);\n    return !!command && !!this.commandRegistry.getActiveHandler(command.id);\n  }\n\n  /**\n   * Tries to execute a keybinding.\n   *\n   * @param binding to execute\n   * @param event keyboard event.\n   */\n  protected executeKeyBinding(binding: common.Keybinding, event: KeyboardEvent): void {\n    if (this.isPseudoCommand(binding.command)) {\n      /* Don't do anything, let the event propagate.  */\n    } else {\n      const command = this.commandRegistry.getCommand(binding.command);\n      if (command) {\n        if (this.commandRegistry.isEnabled(binding.command, binding.args)) {\n          this.commandRegistry.executeCommand(binding.command, binding.args)\n              .catch(e => console.error('Failed to execute command:', e));\n        }\n\n        /* Note that if a keybinding is in context but the command is\n           not active we still stop the processing here.  */\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n  }\n\n  /**\n   * Only execute if it has no context (global context) or if we're in that context.\n   */\n  protected isEnabled(binding: common.Keybinding, event: KeyboardEvent): boolean {\n    const context = binding.context && this.contexts[binding.context];\n    if (context && !context.isEnabled(binding)) {\n      return false;\n    }\n    if (binding.when && !this.whenContextService.match(binding.when, <HTMLElement>event.target)) {\n      return false;\n    }\n    return true;\n  }\n\n  protected asKeyboardEventInit(input: KeyboardEventInit | KeyCode | string): KeyboardEventInit & Partial<{ keyCode: number }> {\n    if (typeof input === 'string') {\n      return this.asKeyboardEventInit(KeyCode.createKeyCode(input));\n    }\n    if (input instanceof KeyCode) {\n      return {\n        metaKey: input.meta,\n        shiftKey: input.shift,\n        altKey: input.alt,\n        ctrlKey: input.ctrl,\n        code: input.key && input.key.code,\n        key: (input && input.character) || (input.key && input.key.code),\n        keyCode: input.key && input.key.keyCode\n      };\n    }\n    return input;\n  }\n\n  /**\n   * Returns true if the binding is usable\n   * @param binding Binding to be checked\n   */\n  protected isUsable(binding: common.Keybinding): boolean {\n    return binding.command.charAt(0) !== '-';\n  }\n\n  /**\n   * Return a new filtered array containing only the usable bindings among the input bindings\n   * @param bindings Bindings to filter\n   */\n  protected getUsableBindings<T extends common.Keybinding>(bindings: T[]): T[] {\n    return bindings.filter(binding => this.isUsable(binding));\n  }\n}\n\nexport namespace KeybindingRegistry {\n  export type Match = {\n    kind: 'full' | 'partial'\n    binding: ScopedKeybinding\n  } | undefined;\n\n  export class KeybindingsResult {\n    full: ScopedKeybinding[] = [];\n    partial: ScopedKeybinding[] = [];\n    shadow: ScopedKeybinding[] = [];\n\n    /**\n     * Merge two results together inside `this`\n     *\n     * @param other the other KeybindingsResult to merge with\n     * @return this\n     */\n    merge(other: KeybindingsResult): KeybindingsResult {\n      this.full.push(...other.full);\n      this.partial.push(...other.partial);\n      this.shadow.push(...other.shadow);\n      return this;\n    }\n\n    /**\n     * Returns a new filtered KeybindingsResult\n     *\n     * @param fn callback filter on the results\n     * @return filtered new result\n     */\n    filter(fn: (binding: common.Keybinding) => boolean): KeybindingsResult {\n      const result = new KeybindingsResult();\n      result.full = this.full.filter(fn);\n      result.partial = this.partial.filter(fn);\n      result.shadow = this.shadow.filter(fn);\n      return result;\n    }\n  }\n}\n"]}