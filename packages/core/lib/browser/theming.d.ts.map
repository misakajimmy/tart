{"version":3,"sources":["browser/theming.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,EAAC,OAAO,EAAE,KAAK,EAAC,MAAM,WAAW,CAAC;AACzC,OAAO,EAAC,UAAU,EAAC,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAC,KAAK,EAAE,gBAAgB,EAAC,MAAM,iBAAiB,CAAC;AAIxD;;GAEG;AACH,cAAc,iBAAiB,CAAC;AAEhC,eAAO,MAAM,kBAAkB,eAAyB,CAAC;AAEzD,qBAAa,YAAY;IAEvB,SAAS,CAAC,MAAM,EAAE;QAAE,CAAC,EAAE,EAAE,MAAM,GAAG,KAAK,CAAA;KAAE,CAAM;IAC/C,SAAS,CAAC,WAAW,EAAE,KAAK,GAAG,SAAS,CAAC;IACzC,SAAS,CAAC,QAAQ,CAAC,WAAW,4BAAmC;IAEjE,QAAQ,CAAC,qBAAqB,EAAE,KAAK,CAAC,gBAAgB,CAAC,CAA0B;IAEjF;;OAEG;IACH,IAAI,YAAY,IAAI,KAAK,CAExB;IAED,IAAI,YAAY,IAAI;QAAE,CAAC,EAAE,EAAE,MAAM,GAAG,KAAK,CAAA;KAAE,CAE1C;IAED,MAAM,CAAC,GAAG,IAAI,YAAY;IAW1B,QAAQ,CAAC,GAAG,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU;IAaxC,SAAS,IAAI,KAAK,EAAE;IAUpB,QAAQ,CAAC,OAAO,EAAE,MAAM,GAAG,KAAK;IAIhC,YAAY,IAAI,IAAI;IAMpB,aAAa,IAAI,IAAI;IAKrB,eAAe,CAAC,OAAO,EAAE,MAAM,GAAG,IAAI;IAiBtC,eAAe,IAAI,KAAK;IAKxB;;OAEG;IACH,KAAK,IAAI,IAAI;IAIb,SAAS,CAAC,mBAAmB,IAAI,IAAI;CAYtC;AAED,qBAAa,oBAAoB;IAE/B,MAAM,CAAC,QAAQ,CAAC,OAAO,MAAW;IAClC,MAAM,CAAC,QAAQ,CAAC,QAAQ,MAAY;IAIpC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,CAW9B;IAEF,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAW/B;IAEF,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAW5B;IAEF,MAAM,CAAC,QAAQ,CAAC,MAAM,UAIpB;CACH","file":"../../src/browser/theming.d.ts","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2017 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {Emitter, Event} from '../common';\r\nimport {Disposable} from '../common/disposable';\r\nimport {Theme, ThemeChangeEvent} from '../common/theme';\r\nimport darkCss from '../assets/style/variables-dark.useable.css';\r\nimport lightCss from '../assets/style/variables-bright.useable.css';\r\n\r\n/**\r\n * @deprecated since 1.20.0. Import from `@tart/core/lib/common/theme` instead.\r\n */\r\nexport * from '../common/theme';\r\n\r\nexport const ThemeServiceSymbol = Symbol('ThemeService');\r\n\r\nexport class ThemeService {\r\n\r\n  protected themes: { [id: string]: Theme } = {};\r\n  protected activeTheme: Theme | undefined;\r\n  protected readonly themeChange = new Emitter<ThemeChangeEvent>();\r\n\r\n  readonly onDidColorThemeChange: Event<ThemeChangeEvent> = this.themeChange.event;\r\n\r\n  /**\r\n   * The default theme. If that is not applicable, returns with the fallback theme.\r\n   */\r\n  get defaultTheme(): Theme {\r\n    return this.themes['dark'] || this.themes['dark'];\r\n  }\r\n\r\n  get getAllThemes(): { [id: string]: Theme } {\r\n    return this.themes;\r\n  }\r\n\r\n  static get(): ThemeService {\r\n    const global = window as any;\r\n    if (!global[ThemeServiceSymbol]) {\r\n      const themeService = new ThemeService();\r\n      themeService.register(...BuiltinThemeProvider.themes);\r\n      themeService.startupTheme();\r\n      global[ThemeServiceSymbol] = themeService;\r\n    }\r\n    return global[ThemeServiceSymbol];\r\n  }\r\n\r\n  register(...themes: Theme[]): Disposable {\r\n    for (const theme of themes) {\r\n      this.themes[theme.id] = theme;\r\n    }\r\n    this.validateActiveTheme();\r\n    return Disposable.create(() => {\r\n      for (const theme of themes) {\r\n        delete this.themes[theme.id];\r\n      }\r\n      this.validateActiveTheme();\r\n    });\r\n  }\r\n\r\n  getThemes(): Theme[] {\r\n    const result = [];\r\n    for (const o in this.themes) {\r\n      if (this.themes.hasOwnProperty(o)) {\r\n        result.push(this.themes[o]);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  getTheme(themeId: string): Theme {\r\n    return this.themes[themeId];\r\n  }\r\n\r\n  startupTheme(): void {\r\n    const theme = this.getCurrentTheme();\r\n    // console.log(theme);\r\n    theme.activate();\r\n  }\r\n\r\n  loadUserTheme(): void {\r\n    const theme = this.getCurrentTheme();\r\n    this.setCurrentTheme(theme.id);\r\n  }\r\n\r\n  setCurrentTheme(themeId: string): void {\r\n    const newTheme = this.getTheme(themeId);\r\n    const oldTheme = this.activeTheme;\r\n    if (oldTheme) {\r\n      if (oldTheme.id === newTheme.id) {\r\n        return;\r\n      }\r\n      oldTheme.deactivate();\r\n    }\r\n    newTheme.activate();\r\n    this.activeTheme = newTheme;\r\n    window.localStorage.setItem('theme', themeId);\r\n    this.themeChange.fire({\r\n      newTheme, oldTheme\r\n    });\r\n  }\r\n\r\n  getCurrentTheme(): Theme {\r\n    const themeId = window.localStorage.getItem('theme') || this.defaultTheme.id;\r\n    return this.getTheme(themeId);\r\n  }\r\n\r\n  /**\r\n   * Resets the state to the user's default, or to the fallback theme. Also discards any persisted state in the local storage.\r\n   */\r\n  reset(): void {\r\n    // this.setCurrentTheme(this.defaultTheme.id);\r\n  }\r\n\r\n  protected validateActiveTheme(): void {\r\n    if (!this.activeTheme) {\r\n      return;\r\n    }\r\n    const theme = this.themes[this.activeTheme.id];\r\n    if (!theme) {\r\n      this.loadUserTheme();\r\n    } else if (theme !== this.activeTheme) {\r\n      this.activeTheme = undefined;\r\n      this.setCurrentTheme(theme.id);\r\n    }\r\n  }\r\n}\r\n\r\nexport class BuiltinThemeProvider {\r\n\r\n  static readonly darkCss = darkCss;\r\n  static readonly lightCss = lightCss;\r\n\r\n  // Webpack converts these `require` in some Javascript object that wraps the `.css` files\r\n\r\n  static readonly darkTheme: Theme = {\r\n    id: 'dark',\r\n    type: 'dark',\r\n    label: 'Dark (Tart)',\r\n    editorTheme: 'dark-tart', // loaded in /packages/monaco/src/browser/textmate/monaco-theme-registry.ts\r\n    activate(): void {\r\n      BuiltinThemeProvider.darkCss.use();\r\n    },\r\n    deactivate(): void {\r\n      BuiltinThemeProvider.darkCss.unuse();\r\n    }\r\n  };\r\n\r\n  static readonly lightTheme: Theme = {\r\n    id: 'light',\r\n    type: 'light',\r\n    label: 'Light (Tart)',\r\n    editorTheme: 'light-tart', // loaded in /packages/monaco/src/browser/textmate/monaco-theme-registry.ts\r\n    activate(): void {\r\n      BuiltinThemeProvider.lightCss.use();\r\n    },\r\n    deactivate(): void {\r\n      BuiltinThemeProvider.lightCss.unuse();\r\n    }\r\n  };\r\n\r\n  static readonly hcTheme: Theme = {\r\n    id: 'hc-tart',\r\n    type: 'hc',\r\n    label: 'High Contrast (Tart)',\r\n    editorTheme: 'hc-tart', // loaded in /packages/monaco/src/browser/textmate/monaco-theme-registry.ts\r\n    activate(): void {\r\n      BuiltinThemeProvider.darkCss.use();\r\n    },\r\n    deactivate(): void {\r\n      BuiltinThemeProvider.darkCss.unuse();\r\n    }\r\n  };\r\n\r\n  static readonly themes = [\r\n    this.darkTheme,\r\n    this.lightTheme,\r\n    this.hcTheme\r\n  ];\r\n}\r\n"]}