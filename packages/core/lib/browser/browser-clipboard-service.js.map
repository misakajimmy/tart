{"version":3,"sources":["browser/browser-clipboard-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;AAElF,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,WAAW,CAAC;AAC7C,OAAO,EAAC,SAAS,EAAC,MAAM,WAAW,CAAC;AAEpC,OAAO,EAAC,cAAc,EAAC,MAAM,2BAA2B,CAAC;AAiBzD,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;IAGf,cAAc,CAAiB;IAElD,KAAK,CAAC,QAAQ;QACZ,IAAI,UAAU,CAAC;QACf,IAAI;YACF,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;SAC3D;QAAC,OAAO,EAAE,EAAE;YACX,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,EAAE,CAAC,CAAC;YAClE,6DAA6D;YAC7D,IAAI;gBACF,OAAO,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC,QAAQ,EAAE,CAAC;aAChD;YAAC,OAAO,EAAE,EAAE;gBACX,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,EAAE,CAAC,CAAC;gBACvD,IAAI,SAAS,EAAE;oBACb,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;;6FAE0D,CAAC,CAAC;iBACtF;gBACD,OAAO,EAAE,CAAC;aACX;SACF;QACD,IAAI,UAAU,CAAC,KAAK,KAAK,QAAQ,EAAE;YACjC,wDAAwD;YACxD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,qEAAqE,CAAC,CAAC;YAChG,OAAO,EAAE,CAAC;SACX;QACD,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,QAAQ,EAAE,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,KAAa;QAC3B,IAAI,UAAU,CAAC;QACf,IAAI;YACF,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;SAC5D;QAAC,OAAO,EAAE,EAAE;YACX,OAAO,CAAC,KAAK,CAAC,+CAA+C,EAAE,EAAE,CAAC,CAAC;YACnE,6DAA6D;YAC7D,IAAI;gBACF,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAC9C,OAAO;aACR;YAAC,OAAO,EAAE,EAAE;gBACX,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,EAAE,CAAC,CAAC;gBACtD,IAAI,SAAS,EAAE;oBACb,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;;6FAE0D,CAAC,CAAC;iBACtF;gBACD,OAAO;aACR;SACF;QACD,IAAI,UAAU,CAAC,KAAK,KAAK,QAAQ,EAAE;YACjC,wDAAwD;YACxD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,qEAAqE,CAAC,CAAC;YAChG,OAAO;SACR;QACD,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IAES,KAAK,CAAC,eAAe,CAAC,IAAY;QAC1C,IAAI,aAAa,IAAI,SAAS,EAAE;YAC9B,OAA8B,SAAS,CAAC,aAAa,CAAE,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;SAC7E;QACD,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACjD,CAAC;IAES,eAAe;QACvB,IAAI,WAAW,IAAI,SAAS,EAAE;YAC5B,OAA4B,SAAS,CAAC,WAAW,CAAE,CAAC;SACrD;QACD,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrD,CAAC;CACF,CAAA;AAtEC;IADC,MAAM,CAAC,cAAc,CAAC;+DAC2B;AAHvC,uBAAuB;IADnC,UAAU,EAAE;GACA,uBAAuB,CAyEnC;SAzEY,uBAAuB","file":"../../src/browser/browser-clipboard-service.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 RedHat and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable} from 'inversify';\nimport {isFirefox} from './browser';\nimport {ClipboardService} from './clipboard-service';\nimport {MessageService} from '../common/message-service';\n\nexport interface NavigatorClipboard {\n  readText(): Promise<string>;\n\n  writeText(value: string): Promise<void>;\n}\n\nexport interface PermissionStatus {\n  state: 'granted' | 'prompt' | 'denied'\n}\n\nexport interface NavigatorPermissions {\n  query(options: { name: string }): Promise<PermissionStatus>\n}\n\n@injectable()\nexport class BrowserClipboardService implements ClipboardService {\n\n  @inject(MessageService)\n  protected readonly messageService: MessageService;\n\n  async readText(): Promise<string> {\n    let permission;\n    try {\n      permission = await this.queryPermission('clipboard-read');\n    } catch (e1) {\n      console.error('Failed checking a clipboard-read permission.', e1);\n      // in FireFox, Clipboard API isn't gated with the permissions\n      try {\n        return await this.getClipboardAPI().readText();\n      } catch (e2) {\n        console.error('Failed reading clipboard content.', e2);\n        if (isFirefox) {\n          this.messageService.warn(`Clipboard API is not available.\n                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload tart.\n                    Note, it will allow FireFox getting full access to the system clipboard.`);\n        }\n        return '';\n      }\n    }\n    if (permission.state === 'denied') {\n      // most likely, the user intentionally denied the access\n      this.messageService.warn(\"Access to the clipboard is denied. Check your browser's permission.\");\n      return '';\n    }\n    return this.getClipboardAPI().readText();\n  }\n\n  async writeText(value: string): Promise<void> {\n    let permission;\n    try {\n      permission = await this.queryPermission('clipboard-write');\n    } catch (e1) {\n      console.error('Failed checking a clipboard-write permission.', e1);\n      // in FireFox, Clipboard API isn't gated with the permissions\n      try {\n        await this.getClipboardAPI().writeText(value);\n        return;\n      } catch (e2) {\n        console.error('Failed writing to the clipboard.', e2);\n        if (isFirefox) {\n          this.messageService.warn(`Clipboard API is not available.\n                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload tart.\n                    Note, it will allow FireFox getting full access to the system clipboard.`);\n        }\n        return;\n      }\n    }\n    if (permission.state === 'denied') {\n      // most likely, the user intentionally denied the access\n      this.messageService.warn(\"Access to the clipboard is denied. Check your browser's permission.\");\n      return;\n    }\n    return this.getClipboardAPI().writeText(value);\n  }\n\n  protected async queryPermission(name: string): Promise<PermissionStatus> {\n    if ('permissions' in navigator) {\n      return (<NavigatorPermissions>navigator['permissions']).query({name: name});\n    }\n    throw new Error('Permissions API unavailable');\n  }\n\n  protected getClipboardAPI(): NavigatorClipboard {\n    if ('clipboard' in navigator) {\n      return (<NavigatorClipboard>navigator['clipboard']);\n    }\n    throw new Error('Async Clipboard API unavailable');\n  }\n}\n"]}