{"version":3,"sources":["browser/tooltip-service.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,YAAY,MAAM,eAAe,CAAC;AACzC,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,EAAC,MAAM,WAAW,CAAC;AACtE,OAAO,EAAC,aAAa,EAAE,YAAY,EAAC,MAAM,WAAW,CAAC;AACtD,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAC,oBAAoB,EAAC,MAAM,WAAW,CAAC;AAC/C,OAAO,EAAC,EAAE,EAAC,MAAM,MAAM,CAAC;AAExB,MAAM,CAAC,MAAM,cAAc,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAyBvD,MAAM,gBAAgB,GAAG,uBAAuB,CAAC;AAGjD,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,aAAa;IAEnC,SAAS,CAAS;IAEf,eAAe,CAAkB;IAC1C,QAAQ,GAAG,KAAK,CAAC;IACjB,SAAS,GAAyB,IAAI,oBAAoB,EAAE,CAAC;IAEvE,YACsC,IAAmB;QAEvD,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,SAAS,GAAG,EAAE,EAAE,CAAC;IACxB,CAAC;IAEM,QAAQ,CAAC,IAAiB;QAC/B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAEM,MAAM,CAAC,UAAU,GAAG,KAAK;QAC9B,IAAI,UAAU,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChC,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACtB;QAED,YAAY,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;IAEM,OAAO;QACZ,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QACzB,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC;IAGS,IAAI;QACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,UAAU,CAAC,EAAE;YACxE,IAAI,UAAU,CAAC,cAAc,KAAK,gBAAgB,EAAE;gBAClD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACnB;QACH,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;IAES,QAAQ;QAChB,MAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC9D,OAAO,oBAAC,YAAY,IAAC,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,SAAS,EAAC,cAAc,EAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,GAAG,CAAC;IACzG,CAAC;CACF,CAAA;AA1CC;IADC,MAAM,CAAC,eAAe,CAAC;2DAC4B;AA8BpD;IADC,aAAa,EAAE;8CAOf;AAxCU,kBAAkB;IAD9B,UAAU,EAAE;IAUN,WAAA,MAAM,CAAC,YAAY,CAAC,CAAA;IAAE,WAAA,QAAQ,EAAE,CAAA;GAT1B,kBAAkB,CA8C9B;SA9CY,kBAAkB","file":"../../src/browser/tooltip-service.js","sourcesContent":["import * as React from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport {inject, injectable, optional, postConstruct} from 'inversify';\nimport {ReactRenderer, RendererHost} from './widgets';\nimport {CorePreferences} from './core-preferences';\nimport {DisposableCollection} from '../common';\nimport {v4} from 'uuid';\n\nexport const TooltipService = Symbol('TooltipService');\n\nexport interface TooltipService {\n  tooltipId: string;\n\n  attachTo(host: HTMLElement): void;\n\n  update(fullRender?: boolean): void;\n}\n\n/**\n * Attributes to be added to an HTML element to enable\n * rich HTML tooltip rendering\n */\nexport interface TooltipAttributes {\n  /**\n   * HTML to render in the tooltip.\n   */\n  'data-tip': string;\n  /**\n   * The ID of the tooltip renderer. Should be TOOLTIP_ID.\n   */\n  'data-for': string;\n}\n\nconst DELAY_PREFERENCE = 'workbench.hover.delay';\n\n@injectable()\nexport class TooltipServiceImpl extends ReactRenderer implements TooltipService {\n\n  public readonly tooltipId: string;\n  @inject(CorePreferences)\n  protected readonly corePreferences: CorePreferences;\n  protected rendered = false;\n  protected toDispose: DisposableCollection = new DisposableCollection();\n\n  constructor(\n      @inject(RendererHost) @optional() host?: RendererHost\n  ) {\n    super(host);\n    this.tooltipId = v4();\n  }\n\n  public attachTo(host: HTMLElement): void {\n    host.appendChild(this.host);\n  }\n\n  public update(fullRender = false): void {\n    if (fullRender || !this.rendered) {\n      this.render();\n      this.rendered = true;\n    }\n\n    ReactTooltip.rebuild();\n  }\n\n  public dispose(): void {\n    this.toDispose.dispose();\n    super.dispose();\n  }\n\n  @postConstruct()\n  protected init(): void {\n    this.toDispose.push(this.corePreferences.onPreferenceChanged(preference => {\n      if (preference.preferenceName === DELAY_PREFERENCE) {\n        this.update(true);\n      }\n    }));\n  }\n\n  protected doRender(): React.ReactNode {\n    const hoverDelay = this.corePreferences.get(DELAY_PREFERENCE);\n    return <ReactTooltip id={this.tooltipId} className='tart-tooltip' html={true} delayShow={hoverDelay}/>;\n  }\n}\n"]}