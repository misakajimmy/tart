{"version":3,"sources":["browser/window/default-window-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;AAElF,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAC,MAAM,WAAW,CAAC;AACpD,OAAO,EAAC,OAAO,EAAQ,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAC,oBAAoB,EAAC,MAAM,oCAAoC,CAAC;AACxE,OAAO,EAAsB,+BAA+B,EAAC,MAAM,yBAAyB,CAAC;AAE7F,OAAO,EAAC,mBAAmB,EAAC,MAAM,qBAAqB,CAAC;AAGxD,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAErB,mBAAmB,CAAsB;IAEzC,eAAe,GAAG,IAAI,OAAO,EAAQ,CAAC;IAG7B,aAAa,CAAwD;IAExF,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;IACpC,CAAC;IAED,OAAO,CAAC,GAAwB;QAC9B,IAAI,CAAC,mBAAmB,GAAG,GAAG,CAAC;QAC/B,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAED,aAAa,CAAC,GAAW;QACvB,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QACxC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;IAC1C,CAAC;IAED,SAAS;QACP,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACO,uBAAuB;QAC/B,MAAM,CAAC,gBAAgB,CAAC,cAAc,EAAE,KAAK,CAAC,EAAE;YAC9C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE;gBACrB,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAClC;QACH,CAAC,CAAC,CAAC;QACH,oFAAoF;QACpF,8EAA8E;QAC9E,2EAA2E;QAC3E,uEAAuE;QACvE,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;IACvE,CAAC;IAED;;;;;;;;OAQG;IACO,aAAa,CAAC,KAAwB;QAC9C,KAAK,CAAC,WAAW,GAAG,EAAE,CAAC;QACvB,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,OAAO,EAAE,CAAC;IACZ,CAAC;CAEF,CAAA;AAvDC;IAFC,MAAM,CAAC,oBAAoB,CAAC;IAC5B,KAAK,CAAC,+BAA+B,CAAC;2DACiD;AAP7E,oBAAoB;IADhC,UAAU,EAAE;GACA,oBAAoB,CA8DhC;SA9DY,oBAAoB","file":"../../../src/browser/window/default-window-service.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, named} from 'inversify';\nimport {Emitter, Event} from '../../common';\nimport {ContributionProvider} from '../../common/contribution-provider';\nimport {FrontendApplication, FrontendApplicationContribution} from '../frontend-application';\nimport {WindowService} from './window-service';\nimport {DEFAULT_WINDOW_HASH} from '../../common/window';\n\n@injectable()\nexport class DefaultWindowService implements WindowService, FrontendApplicationContribution {\n\n  protected frontendApplication: FrontendApplication;\n\n  protected onUnloadEmitter = new Emitter<void>();\n  @inject(ContributionProvider)\n  @named(FrontendApplicationContribution)\n  protected readonly contributions: ContributionProvider<FrontendApplicationContribution>;\n\n  get onUnload(): Event<void> {\n    return this.onUnloadEmitter.event;\n  }\n\n  onStart(app: FrontendApplication): void {\n    this.frontendApplication = app;\n    this.registerUnloadListeners();\n  }\n\n  openNewWindow(url: string): undefined {\n    window.open(url, undefined, 'noopener');\n    return undefined;\n  }\n\n  openNewDefaultWindow(): void {\n    this.openNewWindow(DEFAULT_WINDOW_HASH);\n  }\n\n  canUnload(): boolean {\n    return false;\n  }\n\n  /**\n   * Implement the mechanism to detect unloading of the page.\n   */\n  protected registerUnloadListeners(): void {\n    window.addEventListener('beforeunload', event => {\n      if (!this.canUnload()) {\n        return this.preventUnload(event);\n      }\n    });\n    // In a browser, `unload` is correctly fired when the page unloads, unlike Electron.\n    // If `beforeunload` is cancelled, the user will be prompted to leave or stay.\n    // If the user stays, the page won't be unloaded, so `unload` is not fired.\n    // If the user leaves, the page will be unloaded, so `unload` is fired.\n    window.addEventListener('unload', () => this.onUnloadEmitter.fire());\n  }\n\n  /**\n   * Notify the browser that we do not want to unload.\n   *\n   * Notes:\n   *  - Shows a confirmation popup in browsers.\n   *  - Prevents the window from closing without confirmation in electron.\n   *\n   * @param event The beforeunload event\n   */\n  protected preventUnload(event: BeforeUnloadEvent): string | void {\n    event.returnValue = '';\n    event.preventDefault();\n    return '';\n  }\n\n}\n"]}