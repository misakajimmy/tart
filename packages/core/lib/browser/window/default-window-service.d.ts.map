{"version":3,"sources":["browser/window/default-window-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,OAAO,EAAE,KAAK,EAAC,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAC,oBAAoB,EAAC,MAAM,oCAAoC,CAAC;AACxE,OAAO,EAAC,mBAAmB,EAAE,+BAA+B,EAAC,MAAM,yBAAyB,CAAC;AAC7F,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAG/C,qBACa,oBAAqB,YAAW,aAAa,EAAE,+BAA+B;IAEzF,SAAS,CAAC,mBAAmB,EAAE,mBAAmB,CAAC;IAEnD,SAAS,CAAC,eAAe,gBAAuB;IAGhD,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,oBAAoB,CAAC,+BAA+B,CAAC,CAAC;IAExF,IAAI,QAAQ,IAAI,KAAK,CAAC,IAAI,CAAC,CAE1B;IAED,OAAO,CAAC,GAAG,EAAE,mBAAmB,GAAG,IAAI;IAKvC,aAAa,CAAC,GAAG,EAAE,MAAM,GAAG,SAAS;IAKrC,oBAAoB,IAAI,IAAI;IAI5B,SAAS,IAAI,OAAO;IAIpB;;OAEG;IACH,SAAS,CAAC,uBAAuB,IAAI,IAAI;IAazC;;;;;;;;OAQG;IACH,SAAS,CAAC,aAAa,CAAC,KAAK,EAAE,iBAAiB,GAAG,MAAM,GAAG,IAAI;CAMjE","file":"../../../src/browser/window/default-window-service.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, named} from 'inversify';\nimport {Emitter, Event} from '../../common';\nimport {ContributionProvider} from '../../common/contribution-provider';\nimport {FrontendApplication, FrontendApplicationContribution} from '../frontend-application';\nimport {WindowService} from './window-service';\nimport {DEFAULT_WINDOW_HASH} from '../../common/window';\n\n@injectable()\nexport class DefaultWindowService implements WindowService, FrontendApplicationContribution {\n\n  protected frontendApplication: FrontendApplication;\n\n  protected onUnloadEmitter = new Emitter<void>();\n  @inject(ContributionProvider)\n  @named(FrontendApplicationContribution)\n  protected readonly contributions: ContributionProvider<FrontendApplicationContribution>;\n\n  get onUnload(): Event<void> {\n    return this.onUnloadEmitter.event;\n  }\n\n  onStart(app: FrontendApplication): void {\n    this.frontendApplication = app;\n    this.registerUnloadListeners();\n  }\n\n  openNewWindow(url: string): undefined {\n    window.open(url, undefined, 'noopener');\n    return undefined;\n  }\n\n  openNewDefaultWindow(): void {\n    this.openNewWindow(DEFAULT_WINDOW_HASH);\n  }\n\n  canUnload(): boolean {\n    return false;\n  }\n\n  /**\n   * Implement the mechanism to detect unloading of the page.\n   */\n  protected registerUnloadListeners(): void {\n    window.addEventListener('beforeunload', event => {\n      if (!this.canUnload()) {\n        return this.preventUnload(event);\n      }\n    });\n    // In a browser, `unload` is correctly fired when the page unloads, unlike Electron.\n    // If `beforeunload` is cancelled, the user will be prompted to leave or stay.\n    // If the user stays, the page won't be unloaded, so `unload` is not fired.\n    // If the user leaves, the page will be unloaded, so `unload` is fired.\n    window.addEventListener('unload', () => this.onUnloadEmitter.fire());\n  }\n\n  /**\n   * Notify the browser that we do not want to unload.\n   *\n   * Notes:\n   *  - Shows a confirmation popup in browsers.\n   *  - Prevents the window from closing without confirmation in electron.\n   *\n   * @param event The beforeunload event\n   */\n  protected preventUnload(event: BeforeUnloadEvent): string | void {\n    event.returnValue = '';\n    event.preventDefault();\n    return '';\n  }\n\n}\n"]}