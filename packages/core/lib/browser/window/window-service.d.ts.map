{"version":3,"sources":["browser/window/window-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,EAAC,KAAK,EAAC,MAAM,cAAc,CAAC;AACnC,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AAErD;;GAEG;AACH,eAAO,MAAM,aAAa,eAA0B,CAAC;AAErD,MAAM,WAAW,aAAa;IAE5B;;;OAGG;IACH,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;IAE/B;;;;OAIG;IACH,aAAa,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,gBAAgB,GAAG,SAAS,CAAC;IAElE;;;OAGG;IACH,oBAAoB,IAAI,IAAI,CAAC;IAE7B;;;;OAIG;IACH,SAAS,IAAI,OAAO,CAAC;CAEtB","file":"../../../src/browser/window/window-service.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {Event} from '../../common';\nimport {NewWindowOptions} from '../../common/window';\n\n/**\n * Service for opening new browser windows.\n */\nexport const WindowService = Symbol('WindowService');\n\nexport interface WindowService {\n\n  /**\n   * Fires when the `window` unloads. The unload event is inevitable. On this event, the frontend application can save its state and release resource.\n   * Saving the state and releasing any resources must be a synchronous call. Any asynchronous calls invoked after emitting this event might be ignored.\n   */\n  readonly onUnload: Event<void>;\n\n  /**\n   * Opens a new window and loads the content from the given URL.\n   * In a browser, opening a new Tart tab or open a link is the same thing.\n   * But in Electron, we want to open links in a browser, not in Electron.\n   */\n  openNewWindow(url: string, options?: NewWindowOptions): undefined;\n\n  /**\n   * Opens a new default window.\n   * - In electron and in the browser it will open the default window without a pre-defined content.\n   */\n  openNewDefaultWindow(): void;\n\n  /**\n   * Called when the `window` is about to `unload` its resources.\n   * At this point, the `document` is still visible and the [`BeforeUnloadEvent`](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event)\n   * event will be canceled if the return value of this method is `false`.\n   */\n  canUnload(): boolean;\n\n}\n"]}