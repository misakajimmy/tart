{"version":3,"sources":["browser/core-preferences.ts"],"names":[],"mappings":"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","file":"../../src/browser/core-preferences.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Google and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {interfaces} from 'inversify';\nimport {\n  createPreferenceProxy,\n  PreferenceContribution,\n  PreferenceProxy,\n  PreferenceSchema,\n  PreferenceService\n} from './preferences';\nimport {SUPPORTED_ENCODINGS} from './supported-encodings';\nimport {FrontendApplicationConfigProvider} from './frontend-application-config-provider';\nimport {isOSX} from '../common/os';\nimport {nls} from '../common/nls';\n\nexport const corePreferenceSchema: PreferenceSchema = {\n  'type': 'object',\n  properties: {\n    'application.confirmExit': {\n      type: 'string',\n      enum: [\n        'never',\n        'ifRequired',\n        'always',\n      ],\n      default: 'ifRequired',\n      // eslint-disable-next-line max-len\n      description: nls.localizeByDefault('Controls whether to show a confirmation dialog before closing the browser tab or window. Note that even if enabled, browsers may still decide to close a tab or window without confirmation and that this setting is only a hint that may not work in all cases.'),\n    },\n    'breadcrumbs.enabled': {\n      'type': 'boolean',\n      'default': true,\n      'description': nls.localizeByDefault('Enable/disable navigation breadcrumbs.'),\n      'scope': 'application'\n    },\n    'files.encoding': {\n      'type': 'string',\n      'enum': Object.keys(SUPPORTED_ENCODINGS),\n      'default': 'utf8',\n      'description': nls.localizeByDefault(\n          'The default character set encoding to use when reading and writing files. This setting can also be configured per language.'),\n      'scope': 'language-overridable',\n      'enumDescriptions': Object.keys(SUPPORTED_ENCODINGS).map(key => SUPPORTED_ENCODINGS[key].labelLong),\n      'included': Object.keys(SUPPORTED_ENCODINGS).length > 1\n    },\n    'keyboard.dispatch': {\n      type: 'string',\n      enum: [\n        'code',\n        'keyCode',\n      ],\n      default: 'code',\n      description: nls.localizeByDefault(\n          'Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.')\n    },\n    'window.menuBarVisibility': {\n      type: 'string',\n      enum: ['classic', 'visible', 'hidden', 'compact'],\n      markdownEnumDescriptions: [\n        nls.localizeByDefault('Menu is only hidden in full screen mode.'),\n        nls.localizeByDefault('Menu is always visible even in full screen mode.'),\n        nls.localizeByDefault('Menu is always hidden.'),\n        nls.localizeByDefault('Menu is displayed as a compact button in the sidebar. This value is ignored when `#window.titleBarStyle#` is `native`.')\n      ],\n      default: 'classic',\n      scope: 'application',\n      // eslint-disable-next-line max-len\n      markdownDescription: nls.localizeByDefault(\"Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. By default, the menu bar will be visible, unless the window is full screen.\"),\n      included: !isOSX\n    },\n    'workbench.list.openMode': {\n      type: 'string',\n      enum: [\n        'singleClick',\n        'doubleClick'\n      ],\n      default: 'singleClick',\n      // eslint-disable-next-line max-len\n      description: nls.localizeByDefault('Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. ')\n    },\n    'workbench.editor.highlightModifiedTabs': {\n      'type': 'boolean',\n      // eslint-disable-next-line max-len\n      'description': nls.localizeByDefault('Controls whether a top border is drawn on modified (dirty) editor tabs or not. This value is ignored when `#workbench.editor.showTabs#` is disabled.'),\n      'default': false\n    },\n    'workbench.editor.closeOnFileDelete': {\n      'type': 'boolean',\n      // eslint-disable-next-line max-len\n      'description': nls.localizeByDefault('Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.'),\n      'default': false\n    },\n    'workbench.commandPalette.history': {\n      type: 'number',\n      default: 50,\n      minimum: 0,\n      // eslint-disable-next-line max-len\n      description: nls.localizeByDefault('Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.')\n    },\n    'workbench.colorTheme': {\n      type: 'string',\n      default: FrontendApplicationConfigProvider.get().defaultTheme,\n      description: nls.localizeByDefault('Specifies the color theme used in the workbench.')\n    },\n    'workbench.iconTheme': {\n      type: ['string', 'null'],\n      default: FrontendApplicationConfigProvider.get().defaultIconTheme,\n      description: nls.localizeByDefault(\"Specifies the file icon theme used in the workbench or 'null' to not show any file icons.\")\n    },\n    'workbench.silentNotifications': {\n      type: 'boolean',\n      default: false,\n      description: nls.localize('tart/core/silentNotifications', 'Controls whether to suppress notification popups.')\n    },\n    'workbench.statusBar.visible': {\n      type: 'boolean',\n      default: true,\n      description: nls.localizeByDefault('Controls the visibility of the status bar at the bottom of the workbench.')\n    },\n    'workbench.tree.renderIndentGuides': {\n      type: 'string',\n      enum: ['onHover', 'none', 'always'],\n      default: 'onHover',\n      description: nls.localizeByDefault('Controls whether the tree should render indent guides.')\n    },\n    'workbench.hover.delay': {\n      type: 'number',\n      default: isOSX ? 1500 : 500,\n      description: nls.localizeByDefault('Controls the delay in milliseconds after which the hover is shown.')\n    },\n  }\n};\n\nexport interface CoreConfiguration {\n  'application.confirmExit': 'never' | 'ifRequired' | 'always';\n  'breadcrumbs.enabled': boolean;\n  'files.encoding': string\n  'keyboard.dispatch': 'code' | 'keyCode';\n  'window.menuBarVisibility': 'classic' | 'visible' | 'hidden' | 'compact';\n  'workbench.list.openMode': 'singleClick' | 'doubleClick';\n  'workbench.commandPalette.history': number;\n  'workbench.editor.highlightModifiedTabs': boolean;\n  'workbench.editor.closeOnFileDelete': boolean;\n  'workbench.colorTheme': string;\n  'workbench.iconTheme': string | null;\n  'workbench.silentNotifications': boolean;\n  'workbench.statusBar.visible': boolean;\n  'workbench.tree.renderIndentGuides': 'onHover' | 'none' | 'always';\n  'workbench.hover.delay': number;\n}\n\nexport const CorePreferenceContribution = Symbol('CorePreferenceContribution');\nexport const CorePreferences = Symbol('CorePreferences');\nexport type CorePreferences = PreferenceProxy<CoreConfiguration>;\n\nexport function createCorePreferences(preferences: PreferenceService, schema: PreferenceSchema = corePreferenceSchema): CorePreferences {\n  return createPreferenceProxy(preferences, schema);\n}\n\nexport function bindCorePreferences(bind: interfaces.Bind): void {\n  bind(CorePreferences).toDynamicValue(ctx => {\n    const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n    const contribution = ctx.container.get<PreferenceContribution>(CorePreferenceContribution);\n    return createCorePreferences(preferences, contribution.schema);\n  }).inSingletonScope();\n  bind(CorePreferenceContribution).toConstantValue({schema: corePreferenceSchema});\n  bind(PreferenceContribution).toService(CorePreferenceContribution);\n}\n"]}