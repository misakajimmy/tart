{"version":3,"sources":["browser/tree/tree-decorator.ts"],"names":[],"mappings":"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","file":"../../../src/browser/tree/tree-decorator.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {Tree, TreeNode} from './tree';\nimport {Disposable, DisposableCollection, Emitter, Event, MaybePromise} from '../../common';\nimport {WidgetDecoration} from '../widget-decoration';\n\n/**\n * The {@link TreeDecorator} allows adapting the look and the style of the tree items within a widget. Changes are reflected in\n * the form of `decoration data`. This `decoration data` is a map storing {@link TreeDecoration.Data} for affected tree nodes (using the unique node id as key).\n * It is important to notice that there is no common contribution point for `TreeDecorators`. Instead, each {@link TreeDecoratorService} is\n * supposed to declare its own contribution provider for `TreeDecorators`.\n *\n * ### Example usage\n * A simple tree decorator that changes the background color of each tree node to `red`.\n *\n * ```typescript\n * @injectable()\n * export class MyTreeDecorator implements TreeDecorator {\n *     id = 'myTreeDecorator';\n *\n *     protected readonly emitter = new Emitter<(tree: Tree) => Map<string, TreeDecoration.Data>>();\n *\n *     get onDidChangeDecorations(): Event<(tree: Tree) => Map<string, TreeDecoration.Data>> {\n *         return this.emitter.event;\n *     }\n *\n *     decorations(tree: Tree): MaybePromise<Map<string, TreeDecoration.Data>> {\n *         const result = new Map();\n *\n *         if (tree.root === undefined) {\n *             return result;\n *         }\n *         for (const treeNode of new DepthFirstTreeIterator(tree.root)) {\n *             result.set(treeNode.id,<TreeDecoration.Data>{backgroundColor:'red'})\n *         }\n *         return result;\n *     }\n * }\n * ```\n */\nexport interface TreeDecorator {\n\n  /**\n   * The unique identifier of the decorator. Ought to be unique in the application.\n   */\n  readonly id: string;\n\n  /**\n   * Fired when this decorator has calculated all the `decoration data` for the tree nodes.\n   */\n  readonly onDidChangeDecorations: Event<(tree: Tree) => Map<string, TreeDecoration.Data>>;\n\n  /**\n   * Computes the current `decoration data` for the given tree. Might return a promise if the computation is handled asynchronously.\n   *\n   * @param tree the tree to decorate.\n   *\n   * @returns (a promise of) a map containing the current {@linkTreeDecoration.Data} for each node. Keys are the unique identifier of the tree nodes.\n   */\n  decorations(tree: Tree): MaybePromise<Map<string, TreeDecoration.Data>>;\n\n}\n\nexport const TreeDecoratorService = Symbol('TreeDecoratorService');\n\n/**\n * The {@link TreeDecoratorService} manages a set of known {link TreeDecorator}s and emits events when\n * any of the known decorators has changes. Typically, a `TreeDecoratorService` provides a contribution point that can be used to\n * register {@link TreeDecorator}s exclusively for this service.\n *\n * ### Example usage\n * ```typescript\n * export const MyTreeDecorator = Symbol('MyTreeDecorator');\n *\n * @injectable()\n * export class MyDecorationService extends AbstractTreeDecoratorService {\n *     constructor(@inject(ContributionProvider) @named(MyTreeDecorator) protected readonly contributions: ContributionProvider<TreeDecorator>) {\n *         super(contributions.getContributions());\n *     }\n * }\n * ```\n */\nexport interface TreeDecoratorService extends Disposable {\n\n  /**\n   * Fired when any of the available tree decorators has changes.\n   */\n  readonly onDidChangeDecorations: Event<void>;\n\n  /**\n   * Computes the decorations for the tree based on the actual state of this decorator service.\n   *\n   * @param tree the tree to decorate\n   *\n   * @returns (a promise of) the computed `decoration data`\n   */\n  getDecorations(tree: Tree): MaybePromise<Map<string, TreeDecoration.Data[]>>;\n\n  /**\n   * Transforms the `decoration data` into an object, so that it can be safely serialized into JSON.\n   * @param decorations the `decoration data` that should be deflated\n   *\n   * @returns the `decoration data` as serializable JSON object\n   */\n  deflateDecorators(decorations: Map<string, TreeDecoration.Data[]>): object;\n\n  /**\n   * Counterpart of the [deflateDecorators](#deflateDecorators) method. Restores the argument into a Map\n   * of tree node IDs and the corresponding decorations data array (`decoration data`).\n   *\n   * @returns the deserialized `decoration data\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  inflateDecorators(state: any): Map<string, TreeDecoration.Data[]>;\n\n}\n\n/**\n * The default tree decorator service. Does nothing at all. One has to rebind to a concrete implementation\n * if decorators have to be supported in the tree widget.\n */\n@injectable()\nexport class NoopTreeDecoratorService implements TreeDecoratorService {\n\n  protected readonly emitter = new Emitter<void>();\n  readonly onDidChangeDecorations = this.emitter.event;\n\n  dispose(): void {\n    this.emitter.dispose();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getDecorations(): Map<any, any> {\n    return new Map();\n  }\n\n  deflateDecorators(): object {\n    return {};\n  }\n\n  inflateDecorators(): Map<string, TreeDecoration.Data[]> {\n    return new Map();\n  }\n\n}\n\n/**\n * Abstract decorator service implementation which emits events from all known tree decorators and caches the current state.\n */\n@injectable()\nexport abstract class AbstractTreeDecoratorService implements TreeDecoratorService {\n\n  protected readonly onDidChangeDecorationsEmitter = new Emitter<void>();\n  readonly onDidChangeDecorations = this.onDidChangeDecorationsEmitter.event;\n\n  protected readonly toDispose = new DisposableCollection();\n\n  constructor(protected readonly decorators: ReadonlyArray<TreeDecorator>) {\n    this.toDispose.push(this.onDidChangeDecorationsEmitter);\n    this.toDispose.pushAll(this.decorators.map(decorator =>\n        decorator.onDidChangeDecorations(data =>\n            this.onDidChangeDecorationsEmitter.fire(undefined)\n        ))\n    );\n  }\n\n  dispose(): void {\n    this.toDispose.dispose();\n  }\n\n  async getDecorations(tree: Tree): Promise<Map<string, TreeDecoration.Data[]>> {\n    const changes = new Map();\n    for (const decorator of this.decorators) {\n      for (const [id, data] of (await decorator.decorations(tree)).entries()) {\n        if (changes.has(id)) {\n          changes.get(id)!.push(data);\n        } else {\n          changes.set(id, [data]);\n        }\n      }\n    }\n    return changes;\n  }\n\n  deflateDecorators(decorations: Map<string, TreeDecoration.Data[]>): object {\n    // eslint-disable-next-line no-null/no-null\n    const state = Object.create(null);\n    for (const [id, data] of decorations) {\n      state[id] = data;\n    }\n    return state;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  inflateDecorators(state: any): Map<string, TreeDecoration.Data[]> {\n    const decorators = new Map<string, TreeDecoration.Data[]>();\n    for (const id of Object.keys(state)) {\n      decorators.set(id, state[id]);\n    }\n    return decorators;\n  }\n\n}\n\n/**\n * @deprecated import from `@tart/core/lib/browser/widget-decoration` instead.\n */\nexport import TreeDecoration = WidgetDecoration;\n\nexport interface DecoratedTreeNode extends TreeNode {\n  /**\n   * The additional tree decoration data attached to the tree node itself.\n   */\n  readonly decorationData: TreeDecoration.Data;\n}\n\nexport namespace DecoratedTreeNode {\n  /**\n   * Type-guard for decorated tree nodes.\n   */\n  export function is(node: TreeNode | undefined): node is DecoratedTreeNode {\n    return !!node && 'decorationData' in node;\n  }\n}\n"]}