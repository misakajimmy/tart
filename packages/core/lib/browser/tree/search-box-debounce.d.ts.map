{"version":3,"sources":["browser/tree/search-box-debounce.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,OAAO,EAAE,KAAK,EAAC,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAC,UAAU,EAAE,oBAAoB,EAAC,MAAM,yBAAyB,CAAC;AAEzE;;GAEG;AACH,MAAM,WAAW,wBAAwB;IAEvC;;OAEG;IACH,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;CAExB;AAED,yBAAiB,wBAAwB,CAAC;IAExC;;OAEG;IACI,MAAM,OAAO,EAAE,wBAErB,CAAC;CAEH;AAED;;GAEG;AACH,qBAAa,iBAAkB,YAAW,UAAU;IAQtC,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,wBAAwB;IANhE,SAAS,CAAC,QAAQ,CAAC,WAAW,uBAA8B;IAC5D,SAAS,CAAC,QAAQ,CAAC,OAAO,kBAAqC;IAC/D,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC;IAEvC,SAAS,CAAC,KAAK,EAAE,MAAM,GAAG,SAAS,CAAC;gBAEL,OAAO,EAAE,wBAAwB;IAKhE,IAAI,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC,CAEzC;IAED,MAAM,CAAC,KAAK,EAAE,MAAM,GAAG,SAAS,GAAG,MAAM,GAAG,SAAS;IAkBrD,OAAO,IAAI,IAAI;IAIf,SAAS,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,GAAG,SAAS,GAAG,IAAI;IAItD,SAAS,CAAC,KAAK,IAAI,IAAI;CAKxB","file":"../../../src/browser/tree/search-box-debounce.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {debounce} from 'lodash';\nimport {Emitter, Event} from '../../common';\nimport {Disposable, DisposableCollection} from '../../common/disposable';\n\n/**\n * Options for the search term debounce.\n */\nexport interface SearchBoxDebounceOptions {\n\n  /**\n   * The delay (in milliseconds) before the debounce notifies clients about its content change.\n   */\n  readonly delay: number;\n\n}\n\nexport namespace SearchBoxDebounceOptions {\n\n  /**\n   * The default debounce option.\n   */\n  export const DEFAULT: SearchBoxDebounceOptions = {\n    delay: 200\n  };\n\n}\n\n/**\n * It notifies the clients, once if the underlying search term has changed after a given amount of delay.\n */\nexport class SearchBoxDebounce implements Disposable {\n\n  protected readonly disposables = new DisposableCollection();\n  protected readonly emitter = new Emitter<string | undefined>();\n  protected readonly handler: () => void;\n\n  protected state: string | undefined;\n\n  constructor(protected readonly options: SearchBoxDebounceOptions) {\n    this.disposables.push(this.emitter);\n    this.handler = debounce(() => this.fireChanged(this.state), this.options.delay).bind(this);\n  }\n\n  get onChanged(): Event<string | undefined> {\n    return this.emitter.event;\n  }\n\n  append(input: string | undefined): string | undefined {\n    if (input === undefined) {\n      this.reset();\n      return undefined;\n    }\n    if (this.state === undefined) {\n      this.state = input;\n    } else {\n      if (input === '\\b') {\n        this.state = this.state.length === 1 ? '' : this.state.substr(0, this.state.length - 1);\n      } else {\n        this.state += input;\n      }\n    }\n    this.handler();\n    return this.state;\n  }\n\n  dispose(): void {\n    this.disposables.dispose();\n  }\n\n  protected fireChanged(value: string | undefined): void {\n    this.emitter.fire(value);\n  }\n\n  protected reset(): void {\n    this.state = undefined;\n    this.fireChanged(undefined);\n  }\n\n}\n"]}