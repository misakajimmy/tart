{"version":3,"sources":["browser/tree/tree-selection.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,EAAC,QAAQ,EAAC,MAAM,QAAQ,CAAC;AAGhC;;GAEG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAmDnE,MAAM,KAAW,aAAa,CA+B7B;AA/BD,WAAiB,aAAa;IAE5B;;OAEG;IACH,IAAY,aAIX;IAJD,WAAY,aAAa;QACvB,uDAAO,CAAA;QACP,qDAAM,CAAA;QACN,mDAAK,CAAA;IACP,CAAC,EAJW,aAAa,GAAb,2BAAa,KAAb,2BAAa,QAIxB;IAED,SAAgB,EAAE,CAAC,GAAuB;QACxC,OAAO,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,GAAG,CAAC;IAChC,CAAC;IAFe,gBAAE,KAEjB,CAAA;IAED,SAAgB,OAAO,CAAC,GAA8C;QACpE,OAAO,iBAAiB,CAAC,GAAG,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC;IAFe,qBAAO,UAEtB,CAAA;IAED,SAAgB,QAAQ,CAAC,GAA8C;QACrE,OAAO,iBAAiB,CAAC,GAAG,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;IACtD,CAAC;IAFe,sBAAQ,WAEvB,CAAA;IAED,SAAS,iBAAiB,CAAC,GAA8C,EAAE,QAAuB;QAChG,IAAI,GAAG,KAAK,SAAS,EAAE;YACrB,OAAO,KAAK,CAAC;SACd;QACD,MAAM,IAAI,GAAG,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;QACtD,OAAO,IAAI,KAAK,QAAQ,CAAC;IAC3B,CAAC;AAEH,CAAC,EA/BgB,aAAa,KAAb,aAAa,QA+B7B;AAmBD,MAAM,KAAW,kBAAkB,CA0BlC;AA1BD,WAAiB,kBAAkB;IAEjC,SAAgB,EAAE,CAAC,IAA0B;QAC3C,OAAO,CAAC,CAAC,IAAI,IAAI,UAAU,IAAI,IAAI,CAAC;IACtC,CAAC;IAFe,qBAAE,KAEjB,CAAA;IAED,SAAgB,UAAU,CAAC,IAA0B;QACnD,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC;IACnC,CAAC;IAFe,6BAAU,aAEzB,CAAA;IAED,SAAgB,QAAQ,CAAC,IAA0B;QACjD,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC;IACzC,CAAC;IAFe,2BAAQ,WAEvB,CAAA;IAED,SAAgB,SAAS,CAAC,IAA0B;QAClD,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAFe,4BAAS,YAExB,CAAA;IAED,SAAgB,gBAAgB,CAAC,IAA0B;QACzD,IAAI,IAAI,EAAE;YACR,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBAC1B,OAAO,IAAI,CAAC,MAAM,CAAC;aACpB;YACD,OAAO,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACtC;IACH,CAAC;IAPe,mCAAgB,mBAO/B,CAAA;AACH,CAAC,EA1BgB,kBAAkB,KAAlB,kBAAkB,QA0BlC","file":"../../../src/browser/tree/tree-selection.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {TreeNode} from './tree';\nimport {Disposable, Event, SelectionProvider} from '../../common';\n\n/**\n * The tree selection service.\n */\nexport const TreeSelectionService = Symbol('TreeSelectionService');\n\nexport interface TreeSelectionService extends Disposable, SelectionProvider<ReadonlyArray<Readonly<SelectableTreeNode>>> {\n\n  /**\n   * The tree selection, representing the selected nodes from the tree. If nothing is selected, the\n   * result will be empty.\n   */\n  readonly selectedNodes: ReadonlyArray<Readonly<SelectableTreeNode>>;\n\n  /**\n   * Emitted when the selection has changed in the tree.\n   */\n  readonly onSelectionChanged: Event<ReadonlyArray<Readonly<SelectableTreeNode>>>;\n\n  /**\n   * Registers the given selection into the tree selection service. If the selection state changes after adding the\n   * `selectionOrTreeNode` argument, a selection changed event will be fired. If the argument is a tree node,\n   * a it will be treated as a tree selection with the default selection type.\n   */\n  addSelection(selectionOrTreeNode: TreeSelection | Readonly<SelectableTreeNode>): void;\n\n  /**\n   * Store selection state.\n   */\n  storeState(): object;\n\n  /**\n   * Restore selection state.\n   */\n  restoreState(state: object): void;\n\n}\n\n/**\n * Representation of a tree selection.\n */\nexport interface TreeSelection {\n\n  /**\n   * The actual item that has been selected.\n   */\n  readonly node: Readonly<SelectableTreeNode>;\n\n  /**\n   * The optional tree selection type. Defaults to `SelectionType.DEFAULT`;\n   */\n  readonly type?: TreeSelection.SelectionType;\n\n}\n\nexport namespace TreeSelection {\n\n  /**\n   * Enumeration of selection types.\n   */\n  export enum SelectionType {\n    DEFAULT,\n    TOGGLE,\n    RANGE\n  }\n\n  export function is(arg: Object | undefined): arg is TreeSelection {\n    return !!arg && 'node' in arg;\n  }\n\n  export function isRange(arg: TreeSelection | SelectionType | undefined): boolean {\n    return isSelectionTypeOf(arg, SelectionType.RANGE);\n  }\n\n  export function isToggle(arg: TreeSelection | SelectionType | undefined): boolean {\n    return isSelectionTypeOf(arg, SelectionType.TOGGLE);\n  }\n\n  function isSelectionTypeOf(arg: TreeSelection | SelectionType | undefined, expected: SelectionType): boolean {\n    if (arg === undefined) {\n      return false;\n    }\n    const type = typeof arg === 'number' ? arg : arg.type;\n    return type === expected;\n  }\n\n}\n\n/**\n * A selectable tree node.\n */\nexport interface SelectableTreeNode extends TreeNode {\n\n  /**\n   * `true` if the tree node is selected. Otherwise, `false`.\n   */\n  selected: boolean;\n\n  /**\n   * `true` if the tree node has the focus. Otherwise, `false`. Defaults to `false`.\n   */\n  focus?: boolean;\n\n}\n\nexport namespace SelectableTreeNode {\n\n  export function is(node: TreeNode | undefined): node is SelectableTreeNode {\n    return !!node && 'selected' in node;\n  }\n\n  export function isSelected(node: TreeNode | undefined): node is SelectableTreeNode {\n    return is(node) && node.selected;\n  }\n\n  export function hasFocus(node: TreeNode | undefined): boolean {\n    return is(node) && node.focus === true;\n  }\n\n  export function isVisible(node: TreeNode | undefined): node is SelectableTreeNode {\n    return is(node) && TreeNode.isVisible(node);\n  }\n\n  export function getVisibleParent(node: TreeNode | undefined): SelectableTreeNode | undefined {\n    if (node) {\n      if (isVisible(node.parent)) {\n        return node.parent;\n      }\n      return getVisibleParent(node.parent);\n    }\n  }\n}\n"]}