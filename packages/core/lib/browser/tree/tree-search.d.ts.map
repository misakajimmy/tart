{"version":3,"sources":["browser/tree/tree-search.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,UAAU,EAAE,oBAAoB,EAAC,MAAM,yBAAyB,CAAC;AACzE,OAAO,EAAC,OAAO,EAAE,KAAK,EAAC,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAC,IAAI,EAAE,QAAQ,EAAC,MAAM,QAAQ,CAAC;AACtC,OAAO,EAAC,cAAc,EAAC,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAEhD,qBACa,UAAW,YAAW,UAAU;IAG3C,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;IAG9B,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC;IAG5C,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC;IAEhD,SAAS,CAAC,QAAQ,CAAC,WAAW,uBAA8B;IAC5D,SAAS,CAAC,QAAQ,CAAC,oBAAoB,yCAAoD;IAE3F,SAAS,CAAC,aAAa,EAAE,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAM;IAC5D,SAAS,CAAC,wBAAwB,EAAE,GAAG,CAAC,MAAM,CAAC,CAAa;IAE5D,SAAS,CAAC,cAAc,EAAE,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAM;IAEjE;;OAEG;IACH,IAAI,aAAa,IAAI,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAErD;IAED;;OAEG;IACH,IAAI,sBAAsB,IAAI,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAErE;IAED,aAAa,IAAI,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC,gBAAgB,CAAC;IAI7D;;OAEG;IACG,MAAM,CAAC,OAAO,EAAE,MAAM,GAAG,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IAwBrF,aAAa,CAAC,IAAI,EAAE,QAAQ,GAAG,OAAO;IAItC,OAAO,IAAI,IAAI;IAKf,SAAS,CAAC,IAAI,IAAI,IAAI;IAItB,SAAS,CAAC,0BAA0B,CAAC,IAAI,EAAE,QAAQ,GAAG,IAAI;IAS1D,SAAS,CAAC,wBAAwB,CAAC,KAAK,EAAE,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI;IAIlF,SAAS,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,cAAc,CAAC,gBAAgB;IAMjG,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,KAAK,GAAG,cAAc,CAAC,gBAAgB,CAAC,KAAK;CAOpF","file":"../../../src/browser/tree/tree-search.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, postConstruct} from 'inversify';\nimport {Disposable, DisposableCollection} from '../../common/disposable';\nimport {Emitter, Event} from '../../common';\nimport {Tree, TreeNode} from './tree';\nimport {TreeDecoration} from './tree-decorator';\nimport {FuzzySearch} from './fuzzy-search';\nimport {TopDownTreeIterator} from './tree-iterator';\nimport {LabelProvider} from '../label-provider';\n\n@injectable()\nexport class TreeSearch implements Disposable {\n\n  @inject(Tree)\n  protected readonly tree: Tree;\n\n  @inject(FuzzySearch)\n  protected readonly fuzzySearch: FuzzySearch;\n\n  @inject(LabelProvider)\n  protected readonly labelProvider: LabelProvider;\n\n  protected readonly disposables = new DisposableCollection();\n  protected readonly filteredNodesEmitter = new Emitter<ReadonlyArray<Readonly<TreeNode>>>();\n\n  protected _filterResult: FuzzySearch.Match<TreeNode>[] = [];\n  protected _filteredNodesAndParents: Set<string> = new Set();\n\n  protected _filteredNodes: ReadonlyArray<Readonly<TreeNode>> = [];\n\n  /**\n   * Returns with the filtered nodes after invoking the `filter` method.\n   */\n  get filteredNodes(): ReadonlyArray<Readonly<TreeNode>> {\n    return this._filteredNodes.slice();\n  }\n\n  /**\n   * Event that is fired when the filtered nodes have been changed.\n   */\n  get onFilteredNodesChanged(): Event<ReadonlyArray<Readonly<TreeNode>>> {\n    return this.filteredNodesEmitter.event;\n  }\n\n  getHighlights(): Map<string, TreeDecoration.CaptionHighlight> {\n    return new Map(this._filterResult.map(m => [m.item.id, this.toCaptionHighlight(m)] as [string, TreeDecoration.CaptionHighlight]));\n  }\n\n  /**\n   * Resolves to all the visible tree nodes that match the search pattern.\n   */\n  async filter(pattern: string | undefined): Promise<ReadonlyArray<Readonly<TreeNode>>> {\n    const {root} = this.tree;\n    this._filteredNodesAndParents = new Set();\n    if (!pattern || !root) {\n      this._filterResult = [];\n      this._filteredNodes = [];\n      this.fireFilteredNodesChanged(this._filteredNodes);\n      return [];\n    }\n    const items = [...new TopDownTreeIterator(root)];\n    const transform = (node: TreeNode) => this.labelProvider.getName(node);\n    this._filterResult = await this.fuzzySearch.filter({\n      items,\n      pattern,\n      transform\n    });\n    this._filteredNodes = this._filterResult.map(({item}) => {\n      this.addAllParentsToFilteredSet(item);\n      return item;\n    });\n    this.fireFilteredNodesChanged(this._filteredNodes);\n    return this._filteredNodes.slice();\n  }\n\n  passesFilters(node: TreeNode): boolean {\n    return this._filteredNodesAndParents.has(node.id);\n  }\n\n  dispose(): void {\n    this.disposables.dispose();\n  }\n\n  @postConstruct()\n  protected init(): void {\n    this.disposables.push(this.filteredNodesEmitter);\n  }\n\n  protected addAllParentsToFilteredSet(node: TreeNode): void {\n    let toAdd: TreeNode | undefined = node;\n    while (toAdd && !this._filteredNodesAndParents.has(toAdd.id)) {\n      this._filteredNodesAndParents.add(toAdd.id);\n      toAdd = toAdd.parent;\n    }\n\n  }\n\n  protected fireFilteredNodesChanged(nodes: ReadonlyArray<Readonly<TreeNode>>): void {\n    this.filteredNodesEmitter.fire(nodes);\n  }\n\n  protected toCaptionHighlight(match: FuzzySearch.Match<TreeNode>): TreeDecoration.CaptionHighlight {\n    return {\n      ranges: match.ranges.map(this.mapRange.bind(this))\n    };\n  }\n\n  protected mapRange(range: FuzzySearch.Range): TreeDecoration.CaptionHighlight.Range {\n    const {offset, length} = range;\n    return {\n      offset,\n      length\n    };\n  }\n}\n"]}