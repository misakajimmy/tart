{"version":3,"sources":["browser/tree/tree-selection.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,EAAC,QAAQ,EAAC,MAAM,QAAQ,CAAC;AAChC,OAAO,EAAC,UAAU,EAAE,KAAK,EAAE,iBAAiB,EAAC,MAAM,cAAc,CAAC;AAElE;;GAEG;AACH,eAAO,MAAM,oBAAoB,eAAiC,CAAC;AAEnE,MAAM,WAAW,oBAAqB,SAAQ,UAAU,EAAE,iBAAiB,CAAC,aAAa,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAEtH;;;OAGG;IACH,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAEpE;;OAEG;IACH,QAAQ,CAAC,kBAAkB,EAAE,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAEhF;;;;OAIG;IACH,YAAY,CAAC,mBAAmB,EAAE,aAAa,GAAG,QAAQ,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;IAEtF;;OAEG;IACH,UAAU,IAAI,MAAM,CAAC;IAErB;;OAEG;IACH,YAAY,CAAC,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;CAEnC;AAED;;GAEG;AACH,MAAM,WAAW,aAAa;IAE5B;;OAEG;IACH,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,kBAAkB,CAAC,CAAC;IAE5C;;OAEG;IACH,QAAQ,CAAC,IAAI,CAAC,EAAE,aAAa,CAAC,aAAa,CAAC;CAE7C;AAED,yBAAiB,aAAa,CAAC;IAE7B;;OAEG;IACH,KAAY,aAAa;QACvB,OAAO,IAAA;QACP,MAAM,IAAA;QACN,KAAK,IAAA;KACN;IAED,SAAgB,EAAE,CAAC,GAAG,EAAE,MAAM,GAAG,SAAS,GAAG,GAAG,IAAI,aAAa,CAEhE;IAED,SAAgB,OAAO,CAAC,GAAG,EAAE,aAAa,GAAG,aAAa,GAAG,SAAS,GAAG,OAAO,CAE/E;IAED,SAAgB,QAAQ,CAAC,GAAG,EAAE,aAAa,GAAG,aAAa,GAAG,SAAS,GAAG,OAAO,CAEhF;CAUF;AAED;;GAEG;AACH,MAAM,WAAW,kBAAmB,SAAQ,QAAQ;IAElD;;OAEG;IACH,QAAQ,EAAE,OAAO,CAAC;IAElB;;OAEG;IACH,KAAK,CAAC,EAAE,OAAO,CAAC;CAEjB;AAED,yBAAiB,kBAAkB,CAAC;IAElC,SAAgB,EAAE,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,IAAI,IAAI,kBAAkB,CAEzE;IAED,SAAgB,UAAU,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,IAAI,IAAI,kBAAkB,CAEjF;IAED,SAAgB,QAAQ,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,OAAO,CAE5D;IAED,SAAgB,SAAS,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,IAAI,IAAI,kBAAkB,CAEhF;IAED,SAAgB,gBAAgB,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,kBAAkB,GAAG,SAAS,CAO3F;CACF","file":"../../../src/browser/tree/tree-selection.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {TreeNode} from './tree';\nimport {Disposable, Event, SelectionProvider} from '../../common';\n\n/**\n * The tree selection service.\n */\nexport const TreeSelectionService = Symbol('TreeSelectionService');\n\nexport interface TreeSelectionService extends Disposable, SelectionProvider<ReadonlyArray<Readonly<SelectableTreeNode>>> {\n\n  /**\n   * The tree selection, representing the selected nodes from the tree. If nothing is selected, the\n   * result will be empty.\n   */\n  readonly selectedNodes: ReadonlyArray<Readonly<SelectableTreeNode>>;\n\n  /**\n   * Emitted when the selection has changed in the tree.\n   */\n  readonly onSelectionChanged: Event<ReadonlyArray<Readonly<SelectableTreeNode>>>;\n\n  /**\n   * Registers the given selection into the tree selection service. If the selection state changes after adding the\n   * `selectionOrTreeNode` argument, a selection changed event will be fired. If the argument is a tree node,\n   * a it will be treated as a tree selection with the default selection type.\n   */\n  addSelection(selectionOrTreeNode: TreeSelection | Readonly<SelectableTreeNode>): void;\n\n  /**\n   * Store selection state.\n   */\n  storeState(): object;\n\n  /**\n   * Restore selection state.\n   */\n  restoreState(state: object): void;\n\n}\n\n/**\n * Representation of a tree selection.\n */\nexport interface TreeSelection {\n\n  /**\n   * The actual item that has been selected.\n   */\n  readonly node: Readonly<SelectableTreeNode>;\n\n  /**\n   * The optional tree selection type. Defaults to `SelectionType.DEFAULT`;\n   */\n  readonly type?: TreeSelection.SelectionType;\n\n}\n\nexport namespace TreeSelection {\n\n  /**\n   * Enumeration of selection types.\n   */\n  export enum SelectionType {\n    DEFAULT,\n    TOGGLE,\n    RANGE\n  }\n\n  export function is(arg: Object | undefined): arg is TreeSelection {\n    return !!arg && 'node' in arg;\n  }\n\n  export function isRange(arg: TreeSelection | SelectionType | undefined): boolean {\n    return isSelectionTypeOf(arg, SelectionType.RANGE);\n  }\n\n  export function isToggle(arg: TreeSelection | SelectionType | undefined): boolean {\n    return isSelectionTypeOf(arg, SelectionType.TOGGLE);\n  }\n\n  function isSelectionTypeOf(arg: TreeSelection | SelectionType | undefined, expected: SelectionType): boolean {\n    if (arg === undefined) {\n      return false;\n    }\n    const type = typeof arg === 'number' ? arg : arg.type;\n    return type === expected;\n  }\n\n}\n\n/**\n * A selectable tree node.\n */\nexport interface SelectableTreeNode extends TreeNode {\n\n  /**\n   * `true` if the tree node is selected. Otherwise, `false`.\n   */\n  selected: boolean;\n\n  /**\n   * `true` if the tree node has the focus. Otherwise, `false`. Defaults to `false`.\n   */\n  focus?: boolean;\n\n}\n\nexport namespace SelectableTreeNode {\n\n  export function is(node: TreeNode | undefined): node is SelectableTreeNode {\n    return !!node && 'selected' in node;\n  }\n\n  export function isSelected(node: TreeNode | undefined): node is SelectableTreeNode {\n    return is(node) && node.selected;\n  }\n\n  export function hasFocus(node: TreeNode | undefined): boolean {\n    return is(node) && node.focus === true;\n  }\n\n  export function isVisible(node: TreeNode | undefined): node is SelectableTreeNode {\n    return is(node) && TreeNode.isVisible(node);\n  }\n\n  export function getVisibleParent(node: TreeNode | undefined): SelectableTreeNode | undefined {\n    if (node) {\n      if (isVisible(node.parent)) {\n        return node.parent;\n      }\n      return getVisibleParent(node.parent);\n    }\n  }\n}\n"]}