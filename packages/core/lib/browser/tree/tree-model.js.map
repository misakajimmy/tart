{"version":3,"sources":["browser/tree/tree-model.ts"],"names":[],"mappings":"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","file":"../../../src/browser/tree/tree-model.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, postConstruct} from 'inversify';\nimport {Emitter, Event, WaitUntilEvent} from '../../common';\nimport {DisposableCollection} from '../../common/disposable';\nimport {CancellationToken} from '../../common/cancellation';\nimport {SelectionProvider} from '../../common/selection-service';\nimport {CompositeTreeNode, Tree, TreeNode} from './tree';\nimport {SelectableTreeNode, TreeSelection, TreeSelectionService} from './tree-selection';\nimport {ExpandableTreeNode, TreeExpansionService} from './tree-expansion';\nimport {TreeNavigationService} from './tree-navigation';\nimport {BottomUpTreeIterator, Iterators, TopDownTreeIterator, TreeIterator} from './tree-iterator';\nimport {TreeSearch} from './tree-search';\n\n/**\n * The tree model.\n */\nexport const TreeModel = Symbol('TreeModel');\n\nexport interface TreeModel extends Tree, TreeSelectionService, TreeExpansionService {\n\n  /**\n   * Event when a node should be opened.\n   */\n  readonly onOpenNode: Event<Readonly<TreeNode>>;\n\n  /**\n   * Expands the given node. If the `node` argument is `undefined`, then expands the currently selected tree node.\n   * If multiple tree nodes are selected, expands the most recently selected tree node.\n   */\n  expandNode(node?: Readonly<ExpandableTreeNode>): Promise<Readonly<ExpandableTreeNode> | undefined>;\n\n  /**\n   * Collapses the given node. If the `node` argument is `undefined`, then collapses the currently selected tree node.\n   * If multiple tree nodes are selected, collapses the most recently selected tree node.\n   */\n  collapseNode(node?: Readonly<ExpandableTreeNode>): Promise<boolean>;\n\n  /**\n   * Collapses recursively. If the `node` argument is `undefined`, then collapses the currently selected tree node.\n   * If multiple tree nodes are selected, collapses the most recently selected tree node.\n   */\n  collapseAll(node?: Readonly<CompositeTreeNode>): Promise<boolean>;\n\n  /**\n   * Toggles the expansion state of the given node. If not give, then it toggles the expansion state of the currently selected node.\n   * If multiple nodes are selected, then the most recently selected tree node's expansion state will be toggled.\n   */\n  toggleNodeExpansion(node?: Readonly<ExpandableTreeNode>): Promise<void>;\n\n  /**\n   * Opens the given node or the currently selected on if the argument is `undefined`.\n   * If multiple nodes are selected, open the most recently selected node.\n   */\n  openNode(node?: Readonly<TreeNode> | undefined): void;\n\n  /**\n   * Selects the parent node relatively to the selected taking into account node expansion.\n   */\n  selectParent(): void;\n\n  /**\n   * Navigates to the given node if it is defined. This method accepts both the tree node and its ID as an argument.\n   * Navigation sets a node as a root node and expand it. Resolves to the node if the navigation was successful. Otherwise,\n   * resolves to `undefined`.\n   */\n  navigateTo(nodeOrId: Readonly<TreeNode> | string | undefined): Promise<TreeNode | undefined>;\n\n  /**\n   * Tests whether it is possible to navigate forward.\n   */\n  canNavigateForward(): boolean;\n\n  /**\n   * Tests whether it is possible to navigate backward.\n   */\n  canNavigateBackward(): boolean;\n\n  /**\n   * Navigates forward.\n   */\n  navigateForward(): Promise<void>;\n\n  /**\n   * Navigates backward.\n   */\n  navigateBackward(): Promise<void>;\n\n  /**\n   * Selects the previous node relatively to the currently selected one. This method takes the expansion state of the tree into consideration.\n   */\n  selectPrevNode(type?: TreeSelection.SelectionType): void;\n\n  /**\n   * Returns the previous selectable tree node.\n   */\n  getPrevSelectableNode(node?: TreeNode): SelectableTreeNode | undefined;\n\n  /**\n   * Selects the next node relatively to the currently selected one. This method takes the expansion state of the tree into consideration.\n   */\n  selectNextNode(type?: TreeSelection.SelectionType): void;\n\n  /**\n   * Returns the next selectable tree node.\n   */\n  getNextSelectableNode(node?: TreeNode): SelectableTreeNode | undefined;\n\n  /**\n   * Selects the given tree node. Has no effect when the node does not exist in the tree. Discards any previous selection state.\n   */\n  selectNode(node: Readonly<SelectableTreeNode>): void;\n\n  /**\n   * Selects the given node if it was not yet selected, or unselects it if it was. Keeps the previous selection state and updates it\n   * with the current toggle selection.\n   */\n  toggleNode(node: Readonly<SelectableTreeNode>): void;\n\n  /**\n   * Selects a range of tree nodes. The target of the selection range is the argument, the from tree node is the previous selected node.\n   * If no node was selected previously, invoking this method does nothing.\n   */\n  selectRange(node: Readonly<SelectableTreeNode>): void;\n}\n\n@injectable()\nexport class TreeModelImpl implements TreeModel, SelectionProvider<ReadonlyArray<Readonly<SelectableTreeNode>>> {\n\n  @inject(Tree) protected readonly tree: Tree;\n  @inject(TreeSelectionService) protected readonly selectionService: TreeSelectionService;\n  @inject(TreeExpansionService) protected readonly expansionService: TreeExpansionService;\n  @inject(TreeNavigationService) protected readonly navigationService: TreeNavigationService;\n  @inject(TreeSearch) protected readonly treeSearch: TreeSearch;\n\n  protected readonly onChangedEmitter = new Emitter<void>();\n  protected readonly onOpenNodeEmitter = new Emitter<TreeNode>();\n  protected readonly toDispose = new DisposableCollection();\n\n  get root(): TreeNode | undefined {\n    return this.tree.root;\n  }\n\n  set root(root: TreeNode | undefined) {\n    this.tree.root = root;\n  }\n\n  get onChanged(): Event<void> {\n    return this.onChangedEmitter.event;\n  }\n\n  get onOpenNode(): Event<TreeNode> {\n    return this.onOpenNodeEmitter.event;\n  }\n\n  get onNodeRefreshed(): Event<Readonly<CompositeTreeNode> & WaitUntilEvent> {\n    return this.tree.onNodeRefreshed;\n  }\n\n  // tslint:disable-next-line:typedef\n  get selectedNodes() {\n    return this.selectionService.selectedNodes;\n  }\n\n  // tslint:disable-next-line:typedef\n  get onSelectionChanged() {\n    return this.selectionService.onSelectionChanged;\n  }\n\n  get onExpansionChanged(): Event<Readonly<ExpandableTreeNode>> {\n    return this.expansionService.onExpansionChanged;\n  }\n\n  get onDidChangeBusy(): Event<TreeNode> {\n    return this.tree.onDidChangeBusy;\n  }\n\n  dispose(): void {\n    this.toDispose.dispose();\n  }\n\n  getNode(id: string | undefined): TreeNode | undefined {\n    return this.tree.getNode(id);\n  }\n\n  validateNode(node: TreeNode | undefined): TreeNode | undefined {\n    return this.tree.validateNode(node);\n  }\n\n  async refresh(parent?: Readonly<CompositeTreeNode>): Promise<CompositeTreeNode | undefined> {\n    if (parent) {\n      return this.tree.refresh(parent);\n    }\n    return this.tree.refresh();\n  }\n\n  async expandNode(raw?: Readonly<ExpandableTreeNode>): Promise<ExpandableTreeNode | undefined> {\n    for (const node of raw ? [raw] : this.selectedNodes) {\n      if (ExpandableTreeNode.is(node)) {\n        return this.expansionService.expandNode(node);\n      }\n    }\n    return undefined;\n  }\n\n  async collapseNode(raw?: Readonly<ExpandableTreeNode>): Promise<boolean> {\n    for (const node of raw ? [raw] : this.selectedNodes) {\n      if (ExpandableTreeNode.is(node)) {\n        return this.expansionService.collapseNode(node);\n      }\n    }\n    return false;\n  }\n\n  async collapseAll(raw?: Readonly<CompositeTreeNode>): Promise<boolean> {\n    const node = raw || this.selectedNodes[0];\n    if (SelectableTreeNode.is(node)) {\n      this.selectNode(node);\n    }\n    if (CompositeTreeNode.is(node)) {\n      return this.expansionService.collapseAll(node);\n    }\n    return false;\n  }\n\n  async toggleNodeExpansion(raw?: Readonly<ExpandableTreeNode>): Promise<void> {\n    for (const node of raw ? [raw] : this.selectedNodes) {\n      if (ExpandableTreeNode.is(node)) {\n        await this.expansionService.toggleNodeExpansion(node);\n        return;\n      }\n    }\n  }\n\n  selectPrevNode(type: TreeSelection.SelectionType = TreeSelection.SelectionType.DEFAULT): void {\n    const node = this.getPrevSelectableNode();\n    if (node) {\n      this.addSelection({node, type});\n    }\n  }\n\n  getPrevSelectableNode(node: TreeNode = this.selectedNodes[0]): SelectableTreeNode | undefined {\n    const iterator = this.createBackwardIterator(node);\n    return iterator && this.doGetNextNode(iterator);\n  }\n\n  selectNextNode(type: TreeSelection.SelectionType = TreeSelection.SelectionType.DEFAULT): void {\n    const node = this.getNextSelectableNode();\n    if (node) {\n      this.addSelection({node, type});\n    }\n  }\n\n  getNextSelectableNode(node: TreeNode = this.selectedNodes[0]): SelectableTreeNode | undefined {\n    const iterator = this.createIterator(node);\n    return iterator && this.doGetNextNode(iterator);\n  }\n\n  openNode(raw?: TreeNode | undefined): void {\n    const node = raw || this.selectedNodes[0];\n    if (node) {\n      this.doOpenNode(node);\n      this.onOpenNodeEmitter.fire(node);\n    }\n  }\n\n  selectParent(): void {\n    if (this.selectedNodes.length === 1) {\n      const node = this.selectedNodes[0];\n      const parent = SelectableTreeNode.getVisibleParent(node);\n      if (parent) {\n        this.selectNode(parent);\n      }\n    }\n  }\n\n  async navigateTo(nodeOrId: TreeNode | string | undefined): Promise<TreeNode | undefined> {\n    if (nodeOrId) {\n      const node = typeof nodeOrId === 'string' ? this.getNode(nodeOrId) : nodeOrId;\n      if (node) {\n        this.navigationService.push(node);\n        await this.doNavigate(node);\n        return node;\n      }\n    }\n    return undefined;\n  }\n\n  canNavigateForward(): boolean {\n    return !!this.navigationService.next;\n  }\n\n  canNavigateBackward(): boolean {\n    return !!this.navigationService.prev;\n  }\n\n  async navigateForward(): Promise<void> {\n    const node = this.navigationService.advance();\n    if (node) {\n      await this.doNavigate(node);\n    }\n  }\n\n  async navigateBackward(): Promise<void> {\n    const node = this.navigationService.retreat();\n    if (node) {\n      await this.doNavigate(node);\n    }\n  }\n\n  addSelection(selectionOrTreeNode: TreeSelection | Readonly<SelectableTreeNode>): void {\n    this.selectionService.addSelection(selectionOrTreeNode);\n  }\n\n  selectNode(node: Readonly<SelectableTreeNode>): void {\n    this.addSelection(node);\n  }\n\n  toggleNode(node: Readonly<SelectableTreeNode>): void {\n    this.addSelection({node, type: TreeSelection.SelectionType.TOGGLE});\n  }\n\n  selectRange(node: Readonly<SelectableTreeNode>): void {\n    this.addSelection({node, type: TreeSelection.SelectionType.RANGE});\n  }\n\n  storeState(): TreeModelImpl.State {\n    return {\n      selection: this.selectionService.storeState()\n    };\n  }\n\n  restoreState(state: TreeModelImpl.State): void {\n    if (state.selection) {\n      this.selectionService.restoreState(state.selection);\n    }\n  }\n\n  markAsBusy(node: Readonly<TreeNode>, ms: number, token: CancellationToken): Promise<void> {\n    return this.tree.markAsBusy(node, ms, token);\n  }\n\n  @postConstruct()\n  protected init(): void {\n    this.toDispose.push(this.tree);\n    this.toDispose.push(this.tree.onChanged(() => this.fireChanged()));\n\n    this.toDispose.push(this.selectionService);\n\n    this.toDispose.push(this.expansionService);\n    this.toDispose.push(this.expansionService.onExpansionChanged(node => {\n      this.fireChanged();\n      this.handleExpansion(node);\n    }));\n\n    this.toDispose.push(this.onOpenNodeEmitter);\n    this.toDispose.push(this.onChangedEmitter);\n    this.toDispose.push(this.treeSearch);\n  }\n\n  protected handleExpansion(node: Readonly<ExpandableTreeNode>): void {\n    this.selectIfAncestorOfSelected(node);\n  }\n\n  /**\n   * Select the given node if it is the ancestor of a selected node.\n   */\n  protected selectIfAncestorOfSelected(node: Readonly<ExpandableTreeNode>): void {\n    if (!node.expanded && [...this.selectedNodes].some(selectedNode => CompositeTreeNode.isAncestor(node, selectedNode))) {\n      if (SelectableTreeNode.isVisible(node)) {\n        this.selectNode(node);\n      }\n    }\n  }\n\n  protected fireChanged(): void {\n    this.onChangedEmitter.fire(undefined);\n  }\n\n  protected doGetNextNode(iterator: TreeIterator): SelectableTreeNode | undefined {\n    // Skip the first item. // TODO: clean this up, and skip the first item in a different way without loading everything.\n    iterator.next();\n    let result = iterator.next();\n    while (!result.done && !this.isVisibleSelectableNode(result.value)) {\n      result = iterator.next();\n    }\n    const node = result.value;\n    if (SelectableTreeNode.isVisible(node)) {\n      return node;\n    }\n    return undefined;\n  }\n\n  protected isVisibleSelectableNode(node: TreeNode): node is SelectableTreeNode {\n    return SelectableTreeNode.isVisible(node);\n  }\n\n  protected createBackwardIterator(node: TreeNode | undefined): TreeIterator | undefined {\n    const {filteredNodes} = this.treeSearch;\n    if (filteredNodes.length === 0) {\n      return node ? new BottomUpTreeIterator(node!, {pruneCollapsed: true}) : undefined;\n    }\n    if (node && filteredNodes.indexOf(node) === -1) {\n      return undefined;\n    }\n    return Iterators.cycle(filteredNodes.slice().reverse(), node);\n  }\n\n  protected createIterator(node: TreeNode | undefined): TreeIterator | undefined {\n    const {filteredNodes} = this.treeSearch;\n    if (filteredNodes.length === 0) {\n      return node ? new TopDownTreeIterator(node!, {pruneCollapsed: true}) : undefined;\n    }\n    if (node && filteredNodes.indexOf(node) === -1) {\n      return undefined;\n    }\n    return Iterators.cycle(filteredNodes, node);\n  }\n\n  protected doOpenNode(node: TreeNode): void {\n    if (ExpandableTreeNode.is(node)) {\n      this.toggleNodeExpansion(node);\n    }\n  }\n\n  protected async doNavigate(node: TreeNode): Promise<void> {\n    this.tree.root = node;\n    if (ExpandableTreeNode.is(node)) {\n      await this.expandNode(node);\n    }\n    if (SelectableTreeNode.is(node)) {\n      this.selectNode(node);\n    }\n  }\n\n}\n\nexport namespace TreeModelImpl {\n  export interface State {\n    selection: object\n  }\n}\n"]}