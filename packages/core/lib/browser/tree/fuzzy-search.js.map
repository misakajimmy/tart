{"version":3,"sources":["browser/tree/fuzzy-search.ts"],"names":[],"mappings":"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","file":"../../../src/browser/tree/fuzzy-search.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as fuzzy from 'fuzzy';\nimport {injectable} from 'inversify';\n\n@injectable()\nexport class FuzzySearch {\n\n  private static readonly PRE = '\\x01';\n  private static readonly POST = '\\x02';\n\n  /**\n   * Filters the input and returns with an array that contains all items that match the pattern.\n   */\n  async filter<T>(input: FuzzySearch.Input<T>): Promise<FuzzySearch.Match<T>[]> {\n    return fuzzy.filter(input.pattern, input.items.slice(), {\n      pre: FuzzySearch.PRE,\n      post: FuzzySearch.POST,\n      extract: input.transform\n    }).sort(this.sortResults.bind(this)).map(this.mapResult.bind(this));\n  }\n\n  protected sortResults<T>(left: fuzzy.FilterResult<T>, right: fuzzy.FilterResult<T>): number {\n    return left.index - right.index;\n  }\n\n  protected mapResult<T>(result: fuzzy.FilterResult<T>): FuzzySearch.Match<T> {\n    return {\n      item: result.original,\n      ranges: this.mapRanges(result.string)\n    };\n  }\n\n  protected mapRanges(input: string): ReadonlyArray<FuzzySearch.Range> {\n    const copy = input.split('').filter(s => s !== '');\n    const ranges: FuzzySearch.Range[] = [];\n    const validate = (pre: number, post: number) => {\n      if (preIndex > postIndex || (preIndex === -1) !== (postIndex === -1)) {\n        throw new Error(`Error when trying to map ranges. Escaped string was: '${input}. [${[...input].join('|')}]'`);\n      }\n    };\n    let preIndex = copy.indexOf(FuzzySearch.PRE);\n    let postIndex = copy.indexOf(FuzzySearch.POST);\n    validate(preIndex, postIndex);\n    while (preIndex !== -1 && postIndex !== -1) {\n      ranges.push({\n        offset: preIndex,\n        length: postIndex - preIndex - 1\n      });\n      copy.splice(postIndex, 1);\n      copy.splice(preIndex, 1);\n      preIndex = copy.indexOf(FuzzySearch.PRE);\n      postIndex = copy.indexOf(FuzzySearch.POST);\n    }\n    if (ranges.length === 0) {\n      throw new Error(`Unexpected zero ranges for match-string: ${input}.`);\n    }\n    return ranges;\n  }\n\n}\n\n/**\n * Fuzzy searcher.\n */\nexport namespace FuzzySearch {\n\n  /**\n   * A range representing the match region.\n   */\n  export interface Range {\n\n    /**\n     * The zero based offset of the match region.\n     */\n    readonly offset: number;\n\n    /**\n     * The length of the match region.\n     */\n    readonly length: number;\n  }\n\n  /**\n   * A fuzzy search match.\n   */\n  export interface Match<T> {\n\n    /**\n     * The original item.\n     */\n    readonly item: T;\n\n    /**\n     * An array of ranges representing the match regions.\n     */\n    readonly ranges: ReadonlyArray<Range>;\n  }\n\n  /**\n   * The fuzzy search input.\n   */\n  export interface Input<T> {\n\n    /**\n     * The pattern to match.\n     */\n    readonly pattern: string;\n\n    /**\n     * The items to filter based on the `pattern`.\n     */\n    readonly items: ReadonlyArray<T>;\n\n    /**\n     * Function that extracts the string from the inputs which will be used to evaluate the fuzzy matching filter.\n     */\n    readonly transform: (item: T) => string;\n\n  }\n\n}\n"]}