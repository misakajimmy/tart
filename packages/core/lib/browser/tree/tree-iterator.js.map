{"version":3,"sources":["browser/tree/tree-iterator.ts"],"names":[],"mappings":"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","file":"../../../src/browser/tree/tree-iterator.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {CompositeTreeNode, TreeNode} from './tree';\nimport {ExpandableTreeNode} from './tree-expansion';\n\nexport interface TreeIterator extends Iterator<TreeNode> {\n}\n\nexport namespace TreeIterator {\n\n  export interface Options {\n    readonly pruneCollapsed: boolean\n    readonly pruneSiblings: boolean\n  }\n\n  export const DEFAULT_OPTIONS: Options = {\n    pruneCollapsed: false,\n    pruneSiblings: false\n  };\n\n}\n\nexport abstract class AbstractTreeIterator implements TreeIterator, Iterable<TreeNode> {\n\n  protected readonly delegate: IterableIterator<TreeNode>;\n  protected readonly options: TreeIterator.Options;\n\n  constructor(protected readonly root: TreeNode, options?: Partial<TreeIterator.Options>) {\n    this.options = {\n      ...TreeIterator.DEFAULT_OPTIONS,\n      ...options\n    };\n    this.delegate = this.iterator(this.root);\n  }\n\n  // tslint:disable-next-line:typedef\n  [Symbol.iterator]() {\n    return this.delegate;\n  }\n\n  next(): IteratorResult<TreeNode> {\n    return this.delegate.next();\n  }\n\n  protected abstract iterator(node: TreeNode): IterableIterator<TreeNode>;\n\n  protected children(node: TreeNode): TreeNode[] | undefined {\n    if (!CompositeTreeNode.is(node)) {\n      return undefined;\n    }\n    if (this.options.pruneCollapsed && this.isCollapsed(node)) {\n      return undefined;\n    }\n    return node.children.slice();\n  }\n\n  protected isCollapsed(node: TreeNode): boolean {\n    return ExpandableTreeNode.isCollapsed(node);\n  }\n\n  protected isEmpty(nodes: TreeNode[] | undefined): boolean {\n    return nodes === undefined || nodes.length === 0;\n  }\n\n}\n\nexport class DepthFirstTreeIterator extends AbstractTreeIterator {\n\n  protected iterator(root: TreeNode): IterableIterator<TreeNode> {\n    return Iterators.depthFirst(root, this.children.bind(this));\n  }\n\n}\n\nexport class BreadthFirstTreeIterator extends AbstractTreeIterator {\n\n  protected iterator(root: TreeNode): IterableIterator<TreeNode> {\n    return Iterators.breadthFirst(root, this.children.bind(this));\n  }\n\n}\n\n/**\n * This tree iterator visits all nodes from top to bottom considering the following rules.\n *\n * Let assume the following tree:\n * ```\n *   R\n *   |\n *   +---1\n *   |   |\n *   |   +---1.1\n *   |   |\n *   |   +---1.2\n *   |   |\n *   |   +---1.3\n *   |   |    |\n *   |   |    +---1.3.1\n *   |   |    |\n *   |   |    +---1.3.2\n *   |   |\n *   |   +---1.4\n *   |\n *   +---2\n *       |\n *       +---2.1\n * ```\n * When selecting `1.2` as the root, the normal `DepthFirstTreeIterator` would stop on `1.2` as it does not have children,\n * but this iterator will visit the next sibling (`1.3` and `1.4` but **not** `1.1`) nodes. So the expected traversal order will be\n * `1.2`, `1.3`, `1.3.1`, `1.3.2`,  and `1.4` then jumps to `2` and continues with `2.1`.\n */\nexport class TopDownTreeIterator extends AbstractTreeIterator {\n\n  protected iterator(root: TreeNode): IterableIterator<TreeNode> {\n    const doNext = this.doNext.bind(this);\n    return (function* (): IterableIterator<TreeNode> {\n      let next = root;\n      while (next) {\n        yield next;\n        next = doNext(next);\n      }\n    }).bind(this)();\n  }\n\n  protected doNext(node: TreeNode): TreeNode | undefined {\n    return this.findFirstChild(node) || this.findNextSibling(node);\n  }\n\n  protected findFirstChild(node: TreeNode): TreeNode | undefined {\n    return (this.children(node) || [])[0];\n  }\n\n  protected findNextSibling(node: TreeNode | undefined): TreeNode | undefined {\n    if (!node) {\n      return undefined;\n    }\n    if (this.options.pruneSiblings && node === this.root) {\n      return undefined;\n    }\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    return this.findNextSibling(node.parent);\n  }\n\n}\n\n/**\n * Unlike other tree iterators, this does not visit all the nodes, it stops once it reaches the root node\n * while traversing up the tree hierarchy in an inverse pre-order fashion. This is the counterpart of the `TopDownTreeIterator`.\n */\nexport class BottomUpTreeIterator extends AbstractTreeIterator {\n\n  protected iterator(root: TreeNode): IterableIterator<TreeNode> {\n    const doNext = this.doNext.bind(this);\n    return (function* (): IterableIterator<TreeNode> {\n      let next = root;\n      while (next) {\n        yield next;\n        next = doNext(next);\n      }\n    }).bind(this)();\n  }\n\n  protected doNext(node: TreeNode): TreeNode | undefined {\n    const previousSibling = node.previousSibling;\n    const lastChild = this.lastChild(previousSibling);\n    return lastChild || node.parent;\n  }\n\n  protected lastChild(node: TreeNode | undefined): TreeNode | undefined {\n    const children = node ? this.children(node) : [];\n    if (this.isEmpty(children)) {\n      return node;\n    }\n    if (CompositeTreeNode.is(node)) {\n      const lastChild = CompositeTreeNode.getLastChild(node);\n      return this.lastChild(lastChild);\n    }\n    return undefined;\n  }\n\n}\n\nexport namespace Iterators {\n\n  /**\n   * Generator for depth first, pre-order tree traversal iteration.\n   */\n  export function* depthFirst<T>(root: T, children: (node: T) => T[] | undefined, include: (node: T) => boolean = () => true): IterableIterator<T> {\n    const stack: T[] = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      const top = stack.pop()!;\n      yield top;\n      stack.push(...(children(top) || []).filter(include).reverse());\n    }\n  }\n\n  /**\n   * Generator for breadth first tree traversal iteration.\n   */\n  export function* breadthFirst<T>(root: T, children: (node: T) => T[] | undefined, include: (node: T) => boolean = () => true): IterableIterator<T> {\n    const queue: T[] = [];\n    queue.push(root);\n    while (queue.length > 0) {\n      const head = queue.shift()!;\n      yield head;\n      queue.push(...(children(head) || []).filter(include));\n    }\n  }\n\n  /**\n   * Returns with the iterator of the argument.\n   */\n  export function asIterator<T>(elements: ReadonlyArray<T>): IterableIterator<T> {\n    return elements.slice()[Symbol.iterator]();\n  }\n\n  /**\n   * Returns an iterator that cycles indefinitely over the elements of iterable.\n   *  - If `start` is given it starts the iteration from that element. Otherwise, it starts with the first element of the array.\n   *  - If `start` is given, it must contain by the `elements` array. Otherwise, an error will be thrown.\n   *\n   * **Warning**: Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit break.\n   */\n  export function* cycle<T>(elements: ReadonlyArray<T>, start?: T): IterableIterator<T> {\n    const copy = elements.slice();\n    let index = !!start ? copy.indexOf(start) : 0;\n    if (index === -1) {\n      throw new Error(`${start} is not contained in ${copy}.`);\n    }\n    while (true) {\n      yield copy[index];\n      index++;\n      if (index === copy.length) {\n        index = 0;\n      }\n    }\n  }\n\n}\n"]}