{"version":3,"sources":["browser/tree/tree-expansion.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,UAAU,EAAE,OAAO,EAAE,KAAK,EAAC,MAAM,cAAc,CAAC;AACxD,OAAO,EAAC,iBAAiB,EAAE,IAAI,EAAE,QAAQ,EAAC,MAAM,QAAQ,CAAC;AAEzD,eAAO,MAAM,oBAAoB,eAAiC,CAAC;AAEnE;;GAEG;AACH,MAAM,WAAW,oBAAqB,SAAQ,UAAU;IACtD;;OAEG;IACH,QAAQ,CAAC,kBAAkB,EAAE,KAAK,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAEjE;;;;;OAKG;IACH,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,GAAG,SAAS,CAAC,CAAC;IAElG;;;;OAIG;IACH,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;IAEnE;;;;OAIG;IACH,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,iBAAiB,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;IAEjE;;;OAGG;IACH,mBAAmB,CAAC,IAAI,EAAE,QAAQ,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;CACxE;AAED;;GAEG;AACH,MAAM,WAAW,kBAAmB,SAAQ,iBAAiB;IAC3D;;OAEG;IACH,QAAQ,EAAE,OAAO,CAAC;CACnB;AAED,yBAAiB,kBAAkB,CAAC;IAClC,SAAgB,EAAE,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,GAAG,IAAI,IAAI,kBAAkB,CAEvE;IAED,SAAgB,UAAU,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,GAAG,IAAI,IAAI,kBAAkB,CAE/E;IAED,SAAgB,WAAW,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,GAAG,IAAI,IAAI,kBAAkB,CAEhF;CACF;AAED,qBACa,wBAAyB,YAAW,oBAAoB;IAErD,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;IAC5C,SAAS,CAAC,QAAQ,CAAC,yBAAyB,8BAAqC;IAEjF,IAAI,kBAAkB,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAElD;IAED,OAAO,IAAI,IAAI;IAIT,UAAU,CAAC,GAAG,EAAE,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,GAAG,SAAS,CAAC;IAQ5E,YAAY,CAAC,GAAG,EAAE,kBAAkB,GAAG,OAAO,CAAC,OAAO,CAAC;IAKvD,WAAW,CAAC,GAAG,EAAE,iBAAiB,GAAG,OAAO,CAAC,OAAO,CAAC;IAKrD,mBAAmB,CAAC,IAAI,EAAE,kBAAkB,GAAG,OAAO,CAAC,IAAI,CAAC;IASlE,SAAS,CAAC,IAAI,IAAI,IAAI;IAUtB,SAAS,CAAC,oBAAoB,CAAC,IAAI,EAAE,kBAAkB,GAAG,IAAI;cAI9C,YAAY,CAAC,IAAI,EAAE,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,GAAG,SAAS,CAAC;IAU/F,SAAS,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,OAAO;IAU5D,SAAS,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,OAAO;CAS9D","file":"../../../src/browser/tree/tree-expansion.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, postConstruct} from 'inversify';\nimport {Disposable, Emitter, Event} from '../../common';\nimport {CompositeTreeNode, Tree, TreeNode} from './tree';\n\nexport const TreeExpansionService = Symbol('TreeExpansionService');\n\n/**\n * The tree expandable service.\n */\nexport interface TreeExpansionService extends Disposable {\n  /**\n   * Emit when the node is expanded or collapsed.\n   */\n  readonly onExpansionChanged: Event<Readonly<ExpandableTreeNode>>;\n\n  /**\n   * Expand a node for the given node id if it is valid and collapsed.\n   * Expanding a node refreshes all its children.\n   *\n   * Return a valid expanded refreshed node or `undefined` if such does not exist.\n   */\n  expandNode(node: Readonly<ExpandableTreeNode>): Promise<Readonly<ExpandableTreeNode> | undefined>;\n\n  /**\n   * If the given node is valid and expanded then collapse it.\n   *\n   * Return true if a node has been collapsed; otherwise false.\n   */\n  collapseNode(node: Readonly<ExpandableTreeNode>): Promise<boolean>;\n\n  /**\n   * If the given node is valid then collapse it recursively.\n   *\n   * Return true if a node has been collapsed; otherwise false.\n   */\n  collapseAll(node: Readonly<CompositeTreeNode>): Promise<boolean>;\n\n  /**\n   * If the given node is invalid then does nothing.\n   * If the given node is collapsed then expand it; otherwise collapse it.\n   */\n  toggleNodeExpansion(node: Readonly<ExpandableTreeNode>): Promise<void>;\n}\n\n/**\n * The expandable tree node.\n */\nexport interface ExpandableTreeNode extends CompositeTreeNode {\n  /**\n   * Test whether this tree node is expanded.\n   */\n  expanded: boolean;\n}\n\nexport namespace ExpandableTreeNode {\n  export function is(node: Object | undefined): node is ExpandableTreeNode {\n    return !!node && CompositeTreeNode.is(node) && 'expanded' in node;\n  }\n\n  export function isExpanded(node: Object | undefined): node is ExpandableTreeNode {\n    return ExpandableTreeNode.is(node) && node.expanded;\n  }\n\n  export function isCollapsed(node: Object | undefined): node is ExpandableTreeNode {\n    return ExpandableTreeNode.is(node) && !node.expanded;\n  }\n}\n\n@injectable()\nexport class TreeExpansionServiceImpl implements TreeExpansionService {\n\n  @inject(Tree) protected readonly tree: Tree;\n  protected readonly onExpansionChangedEmitter = new Emitter<ExpandableTreeNode>();\n\n  get onExpansionChanged(): Event<ExpandableTreeNode> {\n    return this.onExpansionChangedEmitter.event;\n  }\n\n  dispose(): void {\n    this.onExpansionChangedEmitter.dispose();\n  }\n\n  async expandNode(raw: ExpandableTreeNode): Promise<ExpandableTreeNode | undefined> {\n    const node = this.tree.validateNode(raw);\n    if (ExpandableTreeNode.isCollapsed(node)) {\n      return this.doExpandNode(node);\n    }\n    return undefined;\n  }\n\n  async collapseNode(raw: ExpandableTreeNode): Promise<boolean> {\n    const node = this.tree.validateNode(raw);\n    return this.doCollapseNode(node);\n  }\n\n  async collapseAll(raw: CompositeTreeNode): Promise<boolean> {\n    const node = this.tree.validateNode(raw);\n    return this.doCollapseAll(node);\n  }\n\n  async toggleNodeExpansion(node: ExpandableTreeNode): Promise<void> {\n    if (node.expanded) {\n      await this.collapseNode(node);\n    } else {\n      await this.expandNode(node);\n    }\n  }\n\n  @postConstruct()\n  protected init(): void {\n    this.tree.onNodeRefreshed(node => {\n      for (const child of node.children) {\n        if (ExpandableTreeNode.isExpanded(child)) {\n          node.waitUntil(this.tree.refresh(child));\n        }\n      }\n    });\n  }\n\n  protected fireExpansionChanged(node: ExpandableTreeNode): void {\n    this.onExpansionChangedEmitter.fire(node);\n  }\n\n  protected async doExpandNode(node: ExpandableTreeNode): Promise<ExpandableTreeNode | undefined> {\n    const refreshed = await this.tree.refresh(node);\n    if (ExpandableTreeNode.is(refreshed)) {\n      refreshed.expanded = true;\n      this.fireExpansionChanged(refreshed);\n      return refreshed;\n    }\n    return undefined;\n  }\n\n  protected doCollapseAll(node: TreeNode | undefined): boolean {\n    let result = false;\n    if (CompositeTreeNode.is(node)) {\n      for (const child of node.children) {\n        result = this.doCollapseAll(child) || result;\n      }\n    }\n    return this.doCollapseNode(node) || result;\n  }\n\n  protected doCollapseNode(node: TreeNode | undefined): boolean {\n    if (!ExpandableTreeNode.isExpanded(node)) {\n      return false;\n    }\n    node.expanded = false;\n    this.fireExpansionChanged(node);\n    return true;\n  }\n\n}\n"]}