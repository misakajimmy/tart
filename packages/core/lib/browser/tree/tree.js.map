{"version":3,"sources":["browser/tree/tree.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;AAElF,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAEL,uBAAuB,EAEvB,oBAAoB,EACpB,OAAO,EAGP,cAAc,EACf,MAAM,cAAc,CAAC;AACtB,OAAO,EAAC,OAAO,EAAC,MAAM,2BAA2B,CAAC;AAElD,MAAM,CAAC,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AA0GnC,MAAM,KAAW,QAAQ,CAYxB;AAZD,WAAiB,QAAQ;IACvB,SAAgB,EAAE,CAAC,IAAwB;QACzC,OAAO,CAAC,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,CAAC;IAChF,CAAC;IAFe,WAAE,KAEjB,CAAA;IAED,SAAgB,MAAM,CAAC,IAA0B,EAAE,KAA2B;QAC5E,OAAO,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC;IACvE,CAAC;IAFe,eAAM,SAErB,CAAA;IAED,SAAgB,SAAS,CAAC,IAA0B;QAClD,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;IAChE,CAAC;IAFe,kBAAS,YAExB,CAAA;AACH,CAAC,EAZgB,QAAQ,KAAR,QAAQ,QAYxB;AAYD,MAAM,KAAW,iBAAiB,CA6EjC;AA7ED,WAAiB,iBAAiB;IAChC,SAAgB,EAAE,CAAC,IAAwB;QACzC,OAAO,CAAC,CAAC,IAAI,IAAI,UAAU,IAAI,IAAI,CAAC;IACtC,CAAC;IAFe,oBAAE,KAEjB,CAAA;IAED,SAAgB,aAAa,CAAC,MAAyB;QACrD,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IAFe,+BAAa,gBAE5B,CAAA;IAED,SAAgB,YAAY,CAAC,MAAyB;QACpD,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACrD,CAAC;IAFe,8BAAY,eAE3B,CAAA;IAED,SAAgB,UAAU,CAAC,MAAyB,EAAE,KAA2B;QAC/E,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QACD,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE;YACzC,OAAO,IAAI,CAAC;SACb;QACD,OAAO,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IAC1C,CAAC;IARe,4BAAU,aAQzB,CAAA;IAED,SAAgB,OAAO,CAAC,MAAyB,EAAE,IAA0B;QAC3E,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,CAAC,CAAC,CAAC;SACX;QACD,OAAO,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1E,CAAC;IALe,yBAAO,UAKtB,CAAA;IAED,SAAgB,WAAW,CAAC,MAAyB,EAAE,QAAoB;QACzE,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE;YAC5B,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACzB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IALe,6BAAW,cAK1B,CAAA;IAED,SAAgB,QAAQ,CAAC,MAAyB,EAAE,KAAe;QACjE,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAsB,CAAC;QAC/C,MAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC;QACjE,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YAChB,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;YACjC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;SACjC;aAAM;YACL,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrB,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;SACtD;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAXe,0BAAQ,WAWvB,CAAA;IAED,SAAgB,WAAW,CAAC,MAAyB,EAAE,KAAe;QACpE,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAsB,CAAC;QAC/C,MAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC;QACjE,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YAChB,OAAO;SACR;QACD,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1B,MAAM,EAAC,eAAe,EAAE,WAAW,EAAC,GAAG,KAAK,CAAC;QAC7C,IAAI,eAAe,EAAE;YACnB,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,EAAC,WAAW,EAAC,CAAC,CAAC;SAC/C;QACD,IAAI,WAAW,EAAE;YACf,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,EAAC,eAAe,EAAC,CAAC,CAAC;SAC/C;IACH,CAAC;IAde,6BAAW,cAc1B,CAAA;IAED,SAAgB,SAAS,CAAC,KAAe,EAAE,KAAa,EAAE,MAAyB;QACjF,MAAM,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,eAAe,EAAE,WAAW,EAAC,CAAC,CAAC;QAC7D,IAAI,eAAe,EAAE;YACnB,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,EAAC,WAAW,EAAE,KAAK,EAAC,CAAC,CAAC;SACtD;QACD,IAAI,WAAW,EAAE;YACf,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,EAAC,eAAe,EAAE,KAAK,EAAC,CAAC,CAAC;SACtD;IACH,CAAC;IAVe,2BAAS,YAUxB,CAAA;AACH,CAAC,EA7EgB,iBAAiB,KAAjB,iBAAiB,QA6EjC;AAED;;GAEG;AAEH,IAAa,QAAQ,GAArB,MAAa,QAAQ;IAEA,gBAAgB,GAAG,IAAI,OAAO,EAAQ,CAAC;IACvC,sBAAsB,GAAG,IAAI,OAAO,EAAsC,CAAC;IAC3E,SAAS,GAAG,IAAI,oBAAoB,EAAE,CAAC;IACvC,sBAAsB,GAAG,IAAI,OAAO,EAAY,CAAC;IAC3D,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC;IACnD,KAAK,GAEX,EAAE,CAAC;IAEP;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC3C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACjD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;IACnD,CAAC;IAES,KAAK,CAAuB;IAEtC,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,IAAI,CAAC,IAA0B;QACjC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;IACrC,CAAC;IAED,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC;IAC3C,CAAC;IAED,OAAO;QACL,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,OAAO,CAAC,EAAsB;QAC5B,OAAO,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACvD,CAAC;IAED,YAAY,CAAC,IAA0B;QACrC,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QACxC,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAAuB;QACnC,MAAM,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC1D,IAAI,MAAqC,CAAC;QAC1C,IAAI,iBAAiB,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;YAChC,MAAM,UAAU,GAAG,IAAI,uBAAuB,EAAE,CAAC;YACjD,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI;gBACF,MAAM,GAAG,MAAM,CAAC;gBAChB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;gBACpD,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;aACnD;oBAAS;gBACR,UAAU,CAAC,MAAM,EAAE,CAAC;aACrB;SACF;QACD,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,GAAa,EAAE,EAAU,EAAE,KAAwB;QAClE,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,IAAI,EAAE;YACR,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;SAC1C;IACH,CAAC;IAES,WAAW;QACnB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAES,KAAK,CAAC,iBAAiB,CAAC,MAAyB;QACzD,MAAM,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;QAC/D,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAES,eAAe,CAAC,MAAyB;QACjD,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtD,CAAC;IAES,KAAK,CAAC,WAAW,CAAC,MAAyB,EAAE,QAAoB;QACzE,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACtC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;YACvD,OAAO,CAAC,KAAK,CAAC,eAAe,MAAM,CAAC,EAAE,8BAA8B,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;YACtF,OAAO,SAAS,CAAC;SAClB;QACD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACxB,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC3B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACrB,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACrC,OAAO,MAAM,CAAC;IAChB,CAAC;IAES,UAAU,CAAC,IAA0B;QAC7C,IAAI,iBAAiB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YAC9B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;SACxD;QACD,IAAI,IAAI,EAAE;YACR,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC5B;IACH,CAAC;IAES,WAAW,CAAC,IAAc;QAClC,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;YAC7B,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACtC;IACH,CAAC;IAES,OAAO,CAAC,IAA0B;QAC1C,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;SAC5B;QACD,IAAI,iBAAiB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YAC9B,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;YACxB,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;gBAChC,iBAAiB,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;gBAChD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAES,KAAK,CAAC,YAAY,CAAC,IAAuB,EAAE,EAAU,EAAE,KAAwB;QACxF,IAAI;YACF,MAAM,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACrB,KAAK,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;SAC7D;QAAC,MAAM;YACN,WAAW;SACZ;IACH,CAAC;IAES,SAAS,CAAC,IAAuB;QACzC,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,OAAO,GAAG,CAAC,CAAC;QACxB,IAAI,OAAO,KAAK,CAAC,EAAE;YACjB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACxC;IACH,CAAC;IAES,WAAW,CAAC,IAAuB;QAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;QAC/B,IAAI,OAAO,GAAG,CAAC,EAAE;YACf,IAAI,CAAC,IAAI,GAAG,OAAO,GAAG,CAAC,CAAC;YACxB,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE;gBACnB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACxC;SACF;IACH,CAAC;CAEF,CAAA;AAjKY,QAAQ;IADpB,UAAU,EAAE;GACA,QAAQ,CAiKpB;SAjKY,QAAQ","file":"../../../src/browser/tree/tree.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {\n  CancellationToken,\n  CancellationTokenSource,\n  Disposable,\n  DisposableCollection,\n  Emitter,\n  Event,\n  Mutable,\n  WaitUntilEvent\n} from '../../common';\nimport {timeout} from '../../common/promise-util';\n\nexport const Tree = Symbol('Tree');\n\n/**\n * The tree - an abstract data type.\n */\nexport interface Tree extends Disposable {\n  /**\n   * A root node of this tree.\n   * Undefined if there is no root node.\n   * Setting a root node refreshes the tree.\n   */\n  root: TreeNode | undefined;\n  /**\n   * Emit when the tree is changed.\n   */\n  readonly onChanged: Event<void>;\n  /**\n   * Emit when the children of the given node are refreshed.\n   */\n  readonly onNodeRefreshed: Event<Readonly<CompositeTreeNode> & WaitUntilEvent>;\n  /**\n   * Emits when the busy state of the given node is changed.\n   */\n  readonly onDidChangeBusy: Event<TreeNode>;\n\n  /**\n   * Return a node for the given identifier or undefined if such does not exist.\n   */\n  getNode(id: string | undefined): TreeNode | undefined;\n\n  /**\n   * Return a valid node in this tree matching to the given; otherwise undefined.\n   */\n  validateNode(node: TreeNode | undefined): TreeNode | undefined;\n\n  /**\n   * Refresh children of the root node.\n   *\n   * Return a valid refreshed composite root or `undefined` if such does not exist.\n   */\n  refresh(): Promise<Readonly<CompositeTreeNode> | undefined>;\n\n  /**\n   * Refresh children of a node for the give node id if it is valid.\n   *\n   * Return a valid refreshed composite node or `undefined` if such does not exist.\n   */\n  refresh(parent: Readonly<CompositeTreeNode>): Promise<Readonly<CompositeTreeNode> | undefined>;\n\n  /**\n   * Marks the give node as busy after a specified number of milliseconds.\n   * A token source of the given token should be canceled to unmark.\n   */\n  markAsBusy(node: Readonly<TreeNode>, ms: number, token: CancellationToken): Promise<void>;\n}\n\n/**\n * The tree node.\n */\nexport interface TreeNode {\n  /**\n   * An unique id of this node.\n   */\n  readonly id: string;\n  /**\n   * A human-readable name of this tree node.\n   *\n   * @deprecated use `LabelProvider.getName` instead or move this property to your tree node type\n   */\n  readonly name?: string;\n  /**\n   * A css string for this tree node icon.\n   *\n   * @deprecated use `LabelProvider.getIcon` instead or move this property to your tree node type\n   */\n  readonly icon?: string;\n  /**\n   * A human-readable description of this tree node.\n   *\n   * @deprecated use `LabelProvider.getLongName` instead or move this property to your tree node type\n   */\n  readonly description?: string;\n  /**\n   * Test whether this node should be rendered.\n   * If undefined then node will be rendered.\n   */\n  readonly visible?: boolean;\n  /**\n   * A parent node of this tree node.\n   * Undefined if this node is root.\n   */\n  readonly parent: Readonly<CompositeTreeNode> | undefined;\n  /**\n   * A previous sibling of this tree node.\n   */\n  readonly previousSibling?: TreeNode;\n  /**\n   * A next sibling of this tree node.\n   */\n  readonly nextSibling?: TreeNode;\n  /**\n   * Whether this node is busy. Greater than 0 then busy; otherwise not.\n   */\n  readonly busy?: number;\n}\n\nexport namespace TreeNode {\n  export function is(node: Object | undefined): node is TreeNode {\n    return !!node && typeof node === 'object' && 'id' in node && 'parent' in node;\n  }\n\n  export function equals(left: TreeNode | undefined, right: TreeNode | undefined): boolean {\n    return left === right || (!!left && !!right && left.id === right.id);\n  }\n\n  export function isVisible(node: TreeNode | undefined): boolean {\n    return !!node && (node.visible === undefined || node.visible);\n  }\n}\n\n/**\n * The composite tree node.\n */\nexport interface CompositeTreeNode extends TreeNode {\n  /**\n   * Child nodes of this tree node.\n   */\n  children: ReadonlyArray<TreeNode>;\n}\n\nexport namespace CompositeTreeNode {\n  export function is(node: Object | undefined): node is CompositeTreeNode {\n    return !!node && 'children' in node;\n  }\n\n  export function getFirstChild(parent: CompositeTreeNode): TreeNode | undefined {\n    return parent.children[0];\n  }\n\n  export function getLastChild(parent: CompositeTreeNode): TreeNode | undefined {\n    return parent.children[parent.children.length - 1];\n  }\n\n  export function isAncestor(parent: CompositeTreeNode, child: TreeNode | undefined): boolean {\n    if (!child) {\n      return false;\n    }\n    if (TreeNode.equals(parent, child.parent)) {\n      return true;\n    }\n    return isAncestor(parent, child.parent);\n  }\n\n  export function indexOf(parent: CompositeTreeNode, node: TreeNode | undefined): number {\n    if (!node) {\n      return -1;\n    }\n    return parent.children.findIndex(child => TreeNode.equals(node, child));\n  }\n\n  export function addChildren(parent: CompositeTreeNode, children: TreeNode[]): CompositeTreeNode {\n    for (const child of children) {\n      addChild(parent, child);\n    }\n    return parent;\n  }\n\n  export function addChild(parent: CompositeTreeNode, child: TreeNode): CompositeTreeNode {\n    const children = parent.children as TreeNode[];\n    const index = children.findIndex(value => value.id === child.id);\n    if (index !== -1) {\n      children.splice(index, 1, child);\n      setParent(child, index, parent);\n    } else {\n      children.push(child);\n      setParent(child, parent.children.length - 1, parent);\n    }\n    return parent;\n  }\n\n  export function removeChild(parent: CompositeTreeNode, child: TreeNode): void {\n    const children = parent.children as TreeNode[];\n    const index = children.findIndex(value => value.id === child.id);\n    if (index === -1) {\n      return;\n    }\n    children.splice(index, 1);\n    const {previousSibling, nextSibling} = child;\n    if (previousSibling) {\n      Object.assign(previousSibling, {nextSibling});\n    }\n    if (nextSibling) {\n      Object.assign(nextSibling, {previousSibling});\n    }\n  }\n\n  export function setParent(child: TreeNode, index: number, parent: CompositeTreeNode): void {\n    const previousSibling = parent.children[index - 1];\n    const nextSibling = parent.children[index + 1];\n    Object.assign(child, {parent, previousSibling, nextSibling});\n    if (previousSibling) {\n      Object.assign(previousSibling, {nextSibling: child});\n    }\n    if (nextSibling) {\n      Object.assign(nextSibling, {previousSibling: child});\n    }\n  }\n}\n\n/**\n * A default implementation of the tree.\n */\n@injectable()\nexport class TreeImpl implements Tree {\n\n  protected readonly onChangedEmitter = new Emitter<void>();\n  protected readonly onNodeRefreshedEmitter = new Emitter<CompositeTreeNode & WaitUntilEvent>();\n  protected readonly toDispose = new DisposableCollection();\n  protected readonly onDidChangeBusyEmitter = new Emitter<TreeNode>();\n  readonly onDidChangeBusy = this.onDidChangeBusyEmitter.event;\n  protected nodes: {\n    [id: string]: Mutable<TreeNode> | undefined\n  } = {};\n\n  constructor() {\n    this.toDispose.push(this.onChangedEmitter);\n    this.toDispose.push(this.onNodeRefreshedEmitter);\n    this.toDispose.push(this.onDidChangeBusyEmitter);\n  }\n\n  protected _root: TreeNode | undefined;\n\n  get root(): TreeNode | undefined {\n    return this._root;\n  }\n\n  set root(root: TreeNode | undefined) {\n    this.nodes = {};\n    this._root = root;\n    this.addNode(root);\n    this.refresh();\n  }\n\n  get onChanged(): Event<void> {\n    return this.onChangedEmitter.event;\n  }\n\n  get onNodeRefreshed(): Event<CompositeTreeNode & WaitUntilEvent> {\n    return this.onNodeRefreshedEmitter.event;\n  }\n\n  dispose(): void {\n    this.nodes = {};\n    this.toDispose.dispose();\n  }\n\n  getNode(id: string | undefined): TreeNode | undefined {\n    return id !== undefined ? this.nodes[id] : undefined;\n  }\n\n  validateNode(node: TreeNode | undefined): TreeNode | undefined {\n    const id = !!node ? node.id : undefined;\n    return this.getNode(id);\n  }\n\n  async refresh(raw?: CompositeTreeNode): Promise<CompositeTreeNode | undefined> {\n    const parent = !raw ? this._root : this.validateNode(raw);\n    let result: CompositeTreeNode | undefined;\n    if (CompositeTreeNode.is(parent)) {\n      const busySource = new CancellationTokenSource();\n      this.doMarkAsBusy(parent, 800, busySource.token);\n      try {\n        result = parent;\n        const children = await this.resolveChildren(parent);\n        result = await this.setChildren(parent, children);\n      } finally {\n        busySource.cancel();\n      }\n    }\n    this.fireChanged();\n    return result;\n  }\n\n  async markAsBusy(raw: TreeNode, ms: number, token: CancellationToken): Promise<void> {\n    const node = this.validateNode(raw);\n    if (node) {\n      await this.doMarkAsBusy(node, ms, token);\n    }\n  }\n\n  protected fireChanged(): void {\n    this.onChangedEmitter.fire(undefined);\n  }\n\n  protected async fireNodeRefreshed(parent: CompositeTreeNode): Promise<void> {\n    await WaitUntilEvent.fire(this.onNodeRefreshedEmitter, parent);\n    this.fireChanged();\n  }\n\n  protected resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]> {\n    return Promise.resolve(Array.from(parent.children));\n  }\n\n  protected async setChildren(parent: CompositeTreeNode, children: TreeNode[]): Promise<CompositeTreeNode | undefined> {\n    const root = this.getRootNode(parent);\n    if (this.nodes[root.id] && this.nodes[root.id] !== root) {\n      console.error(`Child node '${parent.id}' does not belong to this '${root.id}' tree.`);\n      return undefined;\n    }\n    this.removeNode(parent);\n    parent.children = children;\n    this.addNode(parent);\n    await this.fireNodeRefreshed(parent);\n    return parent;\n  }\n\n  protected removeNode(node: TreeNode | undefined): void {\n    if (CompositeTreeNode.is(node)) {\n      node.children.forEach(child => this.removeNode(child));\n    }\n    if (node) {\n      delete this.nodes[node.id];\n    }\n  }\n\n  protected getRootNode(node: TreeNode): TreeNode {\n    if (node.parent === undefined) {\n      return node;\n    } else {\n      return this.getRootNode(node.parent);\n    }\n  }\n\n  protected addNode(node: TreeNode | undefined): void {\n    if (node) {\n      this.nodes[node.id] = node;\n    }\n    if (CompositeTreeNode.is(node)) {\n      const {children} = node;\n      children.forEach((child, index) => {\n        CompositeTreeNode.setParent(child, index, node);\n        this.addNode(child);\n      });\n    }\n  }\n\n  protected async doMarkAsBusy(node: Mutable<TreeNode>, ms: number, token: CancellationToken): Promise<void> {\n    try {\n      await timeout(ms, token);\n      this.doSetBusy(node);\n      token.onCancellationRequested(() => this.doResetBusy(node));\n    } catch {\n      /* no-op */\n    }\n  }\n\n  protected doSetBusy(node: Mutable<TreeNode>): void {\n    const oldBusy = node.busy || 0;\n    node.busy = oldBusy + 1;\n    if (oldBusy === 0) {\n      this.onDidChangeBusyEmitter.fire(node);\n    }\n  }\n\n  protected doResetBusy(node: Mutable<TreeNode>): void {\n    const oldBusy = node.busy || 0;\n    if (oldBusy > 0) {\n      node.busy = oldBusy - 1;\n      if (node.busy === 0) {\n        this.onDidChangeBusyEmitter.fire(node);\n      }\n    }\n  }\n\n}\n"]}