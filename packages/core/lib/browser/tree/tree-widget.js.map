{"version":3,"sources":["browser/tree/tree-widget.tsx"],"names":[],"mappings":"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","file":"../../../src/browser/tree/tree-widget.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {debounce} from 'lodash';\nimport {inject, injectable, postConstruct} from 'inversify';\nimport {Message} from '@lumino/messaging';\nimport {Disposable, MenuPath, SelectionService} from '../../common';\nimport {Key, KeyCode, KeyModifier} from '../keyboard/keys';\nimport {ContextMenuRenderer} from '../context-menu-renderer';\nimport {StatefulWidget} from '../shell';\nimport {\n  BUSY_CLASS,\n  CODICON_LOADING_CLASSES,\n  CODICON_TREE_ITEM_CLASSES,\n  COLLAPSED_CLASS,\n  EXPANSION_TOGGLE_CLASS,\n  FOCUS_CLASS,\n  SELECTED_CLASS,\n  UnsafeWidgetUtilities,\n  Widget\n} from '../widgets';\nimport {CompositeTreeNode, TreeNode} from './tree';\nimport {TreeModel} from './tree-model';\nimport {ExpandableTreeNode} from './tree-expansion';\nimport {SelectableTreeNode, TreeSelection} from './tree-selection';\nimport {DecoratedTreeNode, TreeDecoration, TreeDecoratorService} from './tree-decorator';\nimport {notEmpty} from '../../common/objects';\nimport {isOSX} from '../../common/os';\nimport {ReactWidget} from '../widgets/react-widget';\nimport * as React from 'react';\nimport {CellMeasurer, CellMeasurerCache, List, ListRowRenderer, ScrollParams} from 'react-virtualized';\nimport {TopDownTreeIterator} from './tree-iterator';\nimport {SearchBox, SearchBoxFactory, SearchBoxProps} from './search-box';\nimport {TreeSearch} from './tree-search';\nimport {ElementExt} from '@lumino/domutils';\nimport {TreeWidgetSelection} from './tree-widget-selection';\nimport {MaybePromise} from '../../common/types';\nimport {LabelProvider} from '../label-provider';\nimport {CorePreferences} from '../core-preferences';\n\nexport const TREE_CLASS = 'tart-Tree';\nexport const TREE_CONTAINER_CLASS = 'tart-TreeContainer';\nexport const TREE_NODE_CLASS = 'tart-TreeNode';\nexport const TREE_NODE_CONTENT_CLASS = 'tart-TreeNodeContent';\nexport const TREE_NODE_INFO_CLASS = 'tart-TreeNodeInfo';\nexport const TREE_NODE_TAIL_CLASS = 'tart-TreeNodeTail';\nexport const TREE_NODE_SEGMENT_CLASS = 'tart-TreeNodeSegment';\nexport const TREE_NODE_SEGMENT_GROW_CLASS = 'tart-TreeNodeSegmentGrow';\n\nexport const EXPANDABLE_TREE_NODE_CLASS = 'tart-ExpandableTreeNode';\nexport const COMPOSITE_TREE_NODE_CLASS = 'tart-CompositeTreeNode';\nexport const TREE_NODE_CAPTION_CLASS = 'tart-TreeNodeCaption';\nexport const TREE_NODE_INDENT_GUIDE_CLASS = 'tart-tree-node-indent';\n\nexport const TreeProps = Symbol('TreeProps');\n\n/**\n * Representation of tree properties.\n */\nexport interface TreeProps {\n\n  /**\n   * The path of the context menu that one can use to contribute context menu items to the tree widget.\n   */\n  readonly contextMenuPath?: MenuPath;\n\n  /**\n   * The size of the padding (in pixels) per hierarchy depth. The root element won't have left padding but\n   * the padding for the children will be calculated as `leftPadding * hierarchyDepth` and so on.\n   */\n  readonly leftPadding: number;\n\n  readonly expansionTogglePadding: number;\n\n  /**\n   * `true` if the tree widget support multi-selection. Otherwise, `false`. Defaults to `false`.\n   */\n  readonly multiSelect?: boolean;\n\n  /**\n   * `true` if the tree widget support searching. Otherwise, `false`. Defaults to `false`.\n   */\n  readonly search?: boolean\n\n  /**\n   * `true` if the tree widget should be virtualized searching. Otherwise, `false`. Defaults to `true`.\n   */\n  readonly virtualized?: boolean\n\n  /**\n   * `true` if the selected node should be auto scrolled only if the widget is active. Otherwise, `false`. Defaults to `false`.\n   */\n  readonly scrollIfActive?: boolean\n\n  /**\n   * `true` if a tree widget contributes to the global selection. Defaults to `false`.\n   */\n  readonly globalSelection?: boolean;\n\n  /**\n   *  `true` if the tree widget supports expansion only when clicking the expansion toggle. Defaults to `false`.\n   */\n  readonly expandOnlyOnExpansionToggleClick?: boolean;\n\n}\n\n/**\n * Representation of node properties.\n */\nexport interface NodeProps {\n\n  /**\n   * A root relative number representing the hierarchical depth of the actual node. Root is `0`, its children have `1` and so on.\n   */\n  readonly depth: number;\n\n}\n\n/**\n * The default tree properties.\n */\nexport const defaultTreeProps: TreeProps = {\n  leftPadding: 8,\n  expansionTogglePadding: 22\n};\n\nexport namespace TreeWidget {\n\n  /**\n   * Bare minimum common interface of the keyboard and the mouse event with respect to the key maskings.\n   */\n  export interface ModifierAwareEvent {\n    /**\n     * Determines if the modifier aware event has the `meta` key masking.\n     */\n    readonly metaKey: boolean;\n    /**\n     * Determines if the modifier aware event has the `ctrl` key masking.\n     */\n    readonly ctrlKey: boolean;\n    /**\n     * Determines if the modifier aware event has the `shift` key masking.\n     */\n    readonly shiftKey: boolean;\n  }\n\n}\n\n@injectable()\nexport class TreeWidget extends ReactWidget implements StatefulWidget {\n\n  scrollArea: Element = this.node;\n  protected searchBox: SearchBox;\n  protected searchHighlights: Map<string, TreeDecoration.CaptionHighlight>;\n  @inject(TreeDecoratorService)\n  protected readonly decoratorService: TreeDecoratorService;\n  @inject(TreeSearch)\n  protected readonly treeSearch: TreeSearch;\n  @inject(SearchBoxFactory)\n  protected readonly searchBoxFactory: SearchBoxFactory;\n  protected decorations: Map<string, TreeDecoration.Data[]> = new Map();\n  @inject(SelectionService)\n  protected readonly selectionService: SelectionService;\n  @inject(LabelProvider)\n  protected readonly labelProvider: LabelProvider;\n  @inject(CorePreferences)\n  protected readonly corePreferences: CorePreferences;\n  protected shouldScrollToRow = true;\n  protected rows = new Map<string, TreeWidget.NodeRow>();\n  protected updateRows = debounce(() => this.doUpdateRows(), 10);\n  /**\n   * Row index to ensure visibility.\n   * - Used to forcefully scroll if necessary.\n   */\n  protected scrollToRow: number | undefined;\n  /**\n   * Update tree decorations.\n   * - Updating decorations are debounced in order to limit the number of expensive updates.\n   */\n  protected readonly updateDecorations = debounce(() => this.doUpdateDecorations(), 150);\n  protected view: TreeWidget.View | undefined;\n  /**\n   * Store the last scroll state.\n   */\n  protected lastScrollState: {\n    /**\n     * The scroll top value.\n     */\n    scrollTop: number,\n    /**\n     * The scroll left value.\n     */\n    scrollLeft: number\n  } | undefined;\n\n  constructor(\n      @inject(TreeProps) readonly props: TreeProps,\n      @inject(TreeModel) readonly model: TreeModel,\n      @inject(ContextMenuRenderer) protected readonly contextMenuRenderer: ContextMenuRenderer,\n  ) {\n    super();\n    this.scrollOptions = {\n      suppressScrollX: true,\n      minScrollbarLength: 35\n    };\n    this.addClass(TREE_CLASS);\n    this.node.tabIndex = 0;\n  }\n\n  /**\n   * Store the tree state.\n   */\n  storeState(): object {\n    const decorations = this.decoratorService.deflateDecorators(this.decorations);\n    let state: object = {\n      decorations\n    };\n    if (this.model.root) {\n      state = {\n        ...state,\n        root: this.deflateForStorage(this.model.root),\n        model: this.model.storeState()\n      };\n    }\n\n    return state;\n  }\n\n  /**\n   * Restore the state.\n   * @param oldState the old state object.\n   */\n  restoreState(oldState: object): void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const {root, decorations, model} = (oldState as any);\n    if (root) {\n      this.model.root = this.inflateFromStorage(root);\n    }\n    if (decorations) {\n      this.decorations = this.decoratorService.inflateDecorators(decorations);\n    }\n    if (model) {\n      this.model.restoreState(model);\n    }\n  }\n\n  @postConstruct()\n  protected init(): void {\n    if (this.props.search) {\n      this.searchBox = this.searchBoxFactory({...SearchBoxProps.DEFAULT, showButtons: true, showFilter: true});\n      this.searchBox.node.addEventListener('focus', () => {\n        this.node.focus();\n      });\n      this.toDispose.pushAll([\n        this.searchBox,\n        this.searchBox.onTextChange(async data => {\n          await this.treeSearch.filter(data);\n          this.searchHighlights = this.treeSearch.getHighlights();\n          this.searchBox.updateHighlightInfo({\n            filterText: data,\n            total: this.rows.size,\n            matched: this.searchHighlights.size\n          });\n          this.update();\n        }),\n        this.searchBox.onClose(data => this.treeSearch.filter(undefined)),\n        this.searchBox.onNext(() => {\n          // Enable next selection if there are currently highlights.\n          if (this.searchHighlights.size > 1) {\n            this.model.selectNextNode();\n          }\n        }),\n        this.searchBox.onPrevious(() => {\n          // Enable previous selection if there are currently highlights.\n          if (this.searchHighlights.size > 1) {\n            this.model.selectPrevNode();\n          }\n        }),\n        this.searchBox.onFilterToggled(e => {\n          this.updateRows();\n        }),\n        this.treeSearch,\n        this.treeSearch.onFilteredNodesChanged(nodes => {\n          if (this.searchBox.isFiltering) {\n            this.updateRows();\n          }\n          const node = nodes.find(SelectableTreeNode.is);\n          if (node) {\n            this.model.selectNode(node);\n          }\n        }),\n      ]);\n    }\n    this.toDispose.pushAll([\n      this.model,\n      this.model.onChanged(() => this.updateRows()),\n      this.model.onSelectionChanged(() => this.updateScrollToRow({resize: false})),\n      this.model.onDidChangeBusy(() => this.update()),\n      this.model.onNodeRefreshed(() => this.updateDecorations()),\n      this.model.onExpansionChanged(() => this.updateDecorations()),\n      this.decoratorService,\n      this.decoratorService.onDidChangeDecorations(() => this.updateDecorations()),\n      this.labelProvider.onDidChange(e => {\n        for (const row of this.rows.values()) {\n          if (e.affects(row)) {\n            this.forceUpdate();\n            return;\n          }\n        }\n      })\n    ]);\n    setTimeout(() => {\n      this.updateRows();\n      this.updateDecorations();\n    });\n    if (this.props.globalSelection) {\n      this.toDispose.pushAll([\n        this.model.onSelectionChanged(() => {\n          if (this.node.contains(document.activeElement)) {\n            this.updateGlobalSelection();\n          }\n        }),\n        Disposable.create(() => {\n          const selection = this.selectionService.selection;\n          if (TreeWidgetSelection.isSource(selection, this)) {\n            this.selectionService.selection = undefined;\n          }\n        })\n      ]);\n    }\n    this.toDispose.push(this.corePreferences.onPreferenceChanged(preference => {\n      if (preference.preferenceName === 'workbench.tree.renderIndentGuides') {\n        this.update();\n      }\n    }));\n  }\n\n  /**\n   * Update the global selection for the tree.\n   */\n  protected updateGlobalSelection(): void {\n    this.selectionService.selection = TreeWidgetSelection.create(this);\n  }\n\n  protected doUpdateRows(): void {\n    const root = this.model.root;\n    const rowsToUpdate: Array<[string, TreeWidget.NodeRow]> = [];\n    if (root) {\n      const depths = new Map<CompositeTreeNode | undefined, number>();\n      let index = 0;\n      const c = new TopDownTreeIterator(root, {\n        pruneCollapsed: true,\n        pruneSiblings: true\n      });\n      for (const node of c) {\n        if (this.shouldDisplayNode(node)) {\n          const parentDepth = depths.get(node.parent);\n          const depth = parentDepth === undefined ? 0 : TreeNode.isVisible(node.parent) ? parentDepth + 1 : parentDepth;\n          if (CompositeTreeNode.is(node)) {\n            depths.set(node, depth);\n          }\n          rowsToUpdate.push([node.id, {\n            index: index++,\n            node,\n            depth\n          }]);\n        }\n      }\n    }\n    this.rows = new Map(rowsToUpdate);\n    this.updateScrollToRow();\n  }\n\n  protected shouldDisplayNode(node: TreeNode): boolean {\n    return TreeNode.isVisible(node) && (!this.searchBox?.isFiltering || this.treeSearch.passesFilters(node));\n  }\n\n  /**\n   * Update the `scrollToRow`.\n   * @param updateOptions the tree widget force update options.\n   */\n  protected updateScrollToRow(updateOptions?: TreeWidget.ForceUpdateOptions): void {\n    this.scrollToRow = this.getScrollToRow();\n    this.forceUpdate(updateOptions);\n  }\n\n  /**\n   * Get the `scrollToRow`.\n   *\n   * @returns the `scrollToRow` if available.\n   */\n  protected getScrollToRow(): number | undefined {\n    if (!this.shouldScrollToRow) {\n      return undefined;\n    }\n    const selected = this.model.selectedNodes;\n    const node: TreeNode | undefined = selected.find(SelectableTreeNode.hasFocus) || selected[0];\n    const row = node && this.rows.get(node.id);\n    return row && row.index;\n  }\n\n  protected async doUpdateDecorations(): Promise<void> {\n    this.decorations = await this.decoratorService.getDecorations(this.model);\n    this.forceUpdate();\n  }\n\n  /**\n   * Force deep resizing and rendering of rows.\n   * https://github.com/bvaughn/react-virtualized/blob/master/docs/List.md#recomputerowheights-index-number\n   */\n  protected forceUpdate({resize}: TreeWidget.ForceUpdateOptions = {resize: false}): void {\n    if (this.view && this.view.list) {\n      if (resize && this.isVisible) {\n        this.view.cache.clearAll();\n        this.view.list.recomputeRowHeights();\n      } else {\n        this.view.list.forceUpdateGrid();\n      }\n    }\n    this.update();\n  }\n\n  protected onActivateRequest(msg: Message): void {\n    super.onActivateRequest(msg);\n    this.node.focus({preventScroll: true});\n  }\n\n  /**\n   * Actually focus the tree node.\n   */\n  protected doFocus(): void {\n    if (!this.model.selectedNodes.length) {\n      const node = this.getNodeToFocus();\n      if (SelectableTreeNode.is(node)) {\n        this.model.selectNode(node);\n      }\n    }\n    // It has to be called after nodes are selected.\n    if (this.props.globalSelection) {\n      this.updateGlobalSelection();\n    }\n    this.forceUpdate();\n  }\n\n  /**\n   * Get the tree node to focus.\n   *\n   * @returns the node to focus if available.\n   */\n  protected getNodeToFocus(): SelectableTreeNode | undefined {\n    const root = this.model.root;\n    if (SelectableTreeNode.isVisible(root)) {\n      return root;\n    }\n    return this.model.getNextSelectableNode(root);\n  }\n\n  protected onUpdateRequest(msg: Message): void {\n    if (!this.isAttached) {\n      // if (!this.isAttached || !this.isVisible) {\n      return;\n    }\n    super.onUpdateRequest(msg);\n  }\n\n  protected onResize(msg: Widget.ResizeMessage): void {\n    super.onResize(msg);\n    this.forceUpdate({resize: true});\n  }\n\n  protected render(): React.ReactNode {\n    return React.createElement('div', this.createContainerAttributes(), this.renderTree(this.model));\n  }\n\n  /**\n   * Create the container attributes for the widget.\n   */\n  protected createContainerAttributes(): React.HTMLAttributes<HTMLElement> {\n    const classNames = [TREE_CONTAINER_CLASS];\n    if (!this.rows.size) {\n      classNames.push('empty');\n    }\n    return {\n      className: classNames.join(' '),\n      onContextMenu: event => this.handleContextMenuEvent(this.getContainerTreeNode(), event)\n    };\n  }\n\n  /**\n   * Get the container tree node.\n   *\n   * @returns the tree node for the container if available.\n   */\n  protected getContainerTreeNode(): TreeNode | undefined {\n    return this.model.root;\n  }\n\n  /**\n   * Render the tree widget.\n   * @param model the tree model.\n   */\n  protected renderTree(model: TreeModel): React.ReactNode {\n    if (model.root) {\n      const rows = Array.from(this.rows.values());\n      if (this.props.virtualized === false) {\n        this.onRender.push(Disposable.create(() => this.scrollToSelected()));\n        return rows.map(row => <div key={row.index}>{this.renderNodeRow(row)}</div>);\n      }\n      return <TreeWidget.View\n          ref={view => this.view = (view || undefined)}\n          width={this.node.offsetWidth}\n          height={this.node.offsetHeight}\n          rows={rows}\n          renderNodeRow={this.renderNodeRow}\n          scrollToRow={this.scrollToRow}\n          handleScroll={this.handleScroll}\n      />;\n    }\n    // eslint-disable-next-line no-null/no-null\n    return null;\n  }\n\n  /**\n   * Scroll to the selected tree node.\n   */\n  protected scrollToSelected(): void {\n    if (this.props.scrollIfActive === true && !this.node.contains(document.activeElement)) {\n      return;\n    }\n    const focus = this.node.getElementsByClassName(FOCUS_CLASS)[0];\n    if (focus) {\n      ElementExt.scrollIntoViewIfNeeded(this.scrollArea, focus);\n    } else {\n      const selected = this.node.getElementsByClassName(SELECTED_CLASS)[0];\n      if (selected) {\n        ElementExt.scrollIntoViewIfNeeded(this.scrollArea, selected);\n      }\n    }\n  }\n\n  /**\n   * Handle the scroll event.\n   */\n  protected readonly handleScroll = (info: ScrollParams) => {\n    this.node.scrollTop = info.scrollTop;\n  };\n\n  /**\n   * Render the node row.\n   */\n  protected readonly renderNodeRow = (row: TreeWidget.NodeRow) => this.doRenderNodeRow(row);\n\n  /**\n   * Actually render the node row.\n   */\n  protected doRenderNodeRow({index, node, depth}: TreeWidget.NodeRow): React.ReactNode {\n    return <React.Fragment>\n      {this.renderIndent(node, {depth})}\n      {this.renderNode(node, {depth})}\n    </React.Fragment>;\n  }\n\n  /**\n   * Render the tree node given the node properties.\n   * @param node the tree node.\n   * @param props the node properties.\n   */\n  protected renderIcon(node: TreeNode, props: NodeProps): React.ReactNode {\n    // eslint-disable-next-line no-null/no-null\n    return null;\n  }\n\n  /**\n   * Toggle the node.\n   */\n  protected readonly toggle = (event: React.MouseEvent<HTMLElement>) => this.doToggle(event);\n\n  /**\n   * Actually toggle the tree node.\n   * @param event the mouse click event.\n   */\n  protected doToggle(event: React.MouseEvent<HTMLElement>): void {\n    const nodeId = event.currentTarget.getAttribute('data-node-id');\n    if (nodeId) {\n      const node = this.model.getNode(nodeId);\n      if (node && this.props.expandOnlyOnExpansionToggleClick) {\n        if (this.isExpandable(node) && !this.hasShiftMask(event) && !this.hasCtrlCmdMask(event)) {\n          this.model.toggleNodeExpansion(node);\n        }\n      } else {\n        this.handleClickEvent(node, event);\n      }\n    }\n    event.stopPropagation();\n  }\n\n  /**\n   * Render the node expansion toggle.\n   * @param node the tree node.\n   * @param props the node properties.\n   */\n  protected renderExpansionToggle(node: TreeNode, props: NodeProps): React.ReactNode {\n    if (!this.isExpandable(node)) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n    const classes = [TREE_NODE_SEGMENT_CLASS, EXPANSION_TOGGLE_CLASS];\n    if (!node.expanded) {\n      classes.push(COLLAPSED_CLASS);\n    }\n    if (node.busy) {\n      classes.push(BUSY_CLASS, ...CODICON_LOADING_CLASSES);\n    } else {\n      classes.push(...CODICON_TREE_ITEM_CLASSES);\n    }\n    const className = classes.join(' ');\n    return <div\n        data-node-id={node.id}\n        className={className}\n        onClick={this.toggle}\n        onDoubleClick={this.handleExpansionToggleDblClickEvent}>\n    </div>;\n  }\n\n  /**\n   * Render the tree node caption given the node properties.\n   * @param node the tree node.\n   * @param props the node properties.\n   */\n  protected renderCaption(node: TreeNode, props: NodeProps): React.ReactNode {\n    const tooltip = this.getDecorationData(node, 'tooltip').filter(notEmpty).join(' • ');\n    const classes = [TREE_NODE_SEGMENT_CLASS];\n    if (!this.hasTrailingSuffixes(node)) {\n      classes.push(TREE_NODE_SEGMENT_GROW_CLASS);\n    }\n    const className = classes.join(' ');\n    let attrs = this.decorateCaption(node, {\n      className, id: node.id\n    });\n    if (tooltip.length > 0) {\n      attrs = {\n        ...attrs,\n        title: tooltip\n      };\n    }\n    const children: React.ReactNode[] = [];\n    const caption = this.toNodeName(node);\n    const highlight = this.getDecorationData(node, 'highlight')[0];\n    if (highlight) {\n      children.push(this.toReactNode(caption, highlight));\n    }\n    const searchHighlight = this.searchHighlights ? this.searchHighlights.get(node.id) : undefined;\n    if (searchHighlight) {\n      children.push(...this.toReactNode(caption, searchHighlight));\n    } else if (!highlight) {\n      children.push(caption);\n    }\n    return React.createElement('div', attrs, ...children);\n  }\n\n  /**\n   * Update the node given the caption and highlight.\n   * @param caption the caption.\n   * @param highlight the tree decoration caption highlight.\n   */\n  protected toReactNode(caption: string, highlight: TreeDecoration.CaptionHighlight): React.ReactNode[] {\n    let style: React.CSSProperties = {};\n    if (highlight.color) {\n      style = {\n        ...style,\n        color: highlight.color\n      };\n    }\n    if (highlight.backgroundColor) {\n      style = {\n        ...style,\n        backgroundColor: highlight.backgroundColor\n      };\n    }\n    const createChildren = (fragment: TreeDecoration.CaptionHighlight.Fragment, index: number) => {\n      const {data} = fragment;\n      if (fragment.highlight) {\n        return <mark className={TreeDecoration.Styles.CAPTION_HIGHLIGHT_CLASS} style={style}\n                     key={index}>{data}</mark>;\n      } else {\n        return data;\n      }\n    };\n    return TreeDecoration.CaptionHighlight.split(caption, highlight).map(createChildren);\n  }\n\n  /**\n   * Decorate the tree caption.\n   * @param node the tree node.\n   * @param attrs the additional attributes.\n   */\n  protected decorateCaption(node: TreeNode, attrs: React.HTMLAttributes<HTMLElement>): React.Attributes & React.HTMLAttributes<HTMLElement> {\n    const style = this.getDecorationData(node, 'fontData')\n        .filter(notEmpty)\n        .reverse()\n        .map(fontData => this.applyFontStyles({}, fontData))\n        .reduce((acc, current) => ({\n          ...acc,\n          ...current\n        }), {});\n    return {\n      ...attrs,\n      style\n    };\n  }\n\n  /**\n   * Determine if the tree node contains trailing suffixes.\n   * @param node the tree node.\n   *\n   * @returns `true` if the tree node contains trailing suffices.\n   */\n  protected hasTrailingSuffixes(node: TreeNode): boolean {\n    return this.getDecorationData(node, 'captionSuffixes').filter(notEmpty).reduce((acc, current) => acc.concat(current), []).length > 0;\n  }\n\n  /**\n   * Apply font styles to the tree.\n   * @param original the original css properties.\n   * @param fontData the optional `fontData`.\n   */\n  protected applyFontStyles(original: React.CSSProperties, fontData: TreeDecoration.FontData | undefined): React.CSSProperties {\n    if (fontData === undefined) {\n      return original;\n    }\n    const modified = {...original}; // make a copy to mutate\n    const {color, style} = fontData;\n    if (color) {\n      modified.color = color;\n    }\n    if (style) {\n      (Array.isArray(style) ? style : [style]).forEach(s => {\n        switch (s) {\n          case 'bold':\n            modified.fontWeight = s;\n            break;\n          case 'normal':\n          case 'oblique':\n          case 'italic':\n            modified.fontStyle = s;\n            break;\n          case 'underline':\n          case 'line-through':\n            modified.textDecoration = s;\n            break;\n          default:\n            throw new Error(`Unexpected font style: \"${s}\".`);\n        }\n      });\n    }\n    return modified;\n  }\n\n  /**\n   * Render caption affixes for the given tree node.\n   * @param node the tree node.\n   * @param props the node properties.\n   * @param affixKey the affix key.\n   */\n  protected renderCaptionAffixes(node: TreeNode, props: NodeProps, affixKey: 'captionPrefixes' | 'captionSuffixes'): React.ReactNode {\n    const suffix = affixKey === 'captionSuffixes';\n    const affixClass = suffix ? TreeDecoration.Styles.CAPTION_SUFFIX_CLASS : TreeDecoration.Styles.CAPTION_PREFIX_CLASS;\n    const classes = [TREE_NODE_SEGMENT_CLASS, affixClass];\n    const affixes = this.getDecorationData(node, affixKey).filter(notEmpty).reduce((acc, current) => acc.concat(current), []);\n    const children: React.ReactNode[] = [];\n    for (let i = 0; i < affixes.length; i++) {\n      const affix = affixes[i];\n      if (suffix && i === affixes.length - 1) {\n        classes.push(TREE_NODE_SEGMENT_GROW_CLASS);\n      }\n      const style = this.applyFontStyles({}, affix.fontData);\n      const className = classes.join(' ');\n      const key = node.id + '_' + i;\n      const attrs = {\n        className,\n        style,\n        key\n      };\n      children.push(React.createElement('div', attrs, affix.data));\n    }\n    return <React.Fragment>{children}</React.Fragment>;\n  }\n\n  /**\n   * Decorate the tree node icon.\n   * @param node the tree node.\n   * @param icon the icon.\n   */\n  protected decorateIcon(node: TreeNode, icon: React.ReactNode): React.ReactNode {\n    if (!icon) {\n      return;\n    }\n    const overlayIcons: React.ReactNode[] = [];\n    // if multiple overlays have the same overlay.position attribute, we'll de-duplicate those and only process the first one from the decoration array\n    const seenPositions = new Set<TreeDecoration.IconOverlayPosition>();\n    const overlays = this.getDecorationData(node, 'iconOverlay').filter(notEmpty);\n\n    for (const overlay of overlays) {\n      if (!seenPositions.has(overlay.position)) {\n        seenPositions.add(overlay.position);\n        const iconClasses = [TreeDecoration.Styles.DECORATOR_SIZE_CLASS, TreeDecoration.IconOverlayPosition.getStyle(overlay.position)];\n        const style = (color?: string) => color === undefined ? {} : {color};\n\n        if (overlay.background) {\n          overlayIcons.push(<span key={node.id + 'bg'}\n                                  className={this.getIconClass(overlay.background.shape, iconClasses)}\n                                  style={style(overlay.background.color)}></span>);\n        }\n\n        const overlayIcon = 'icon' in overlay ? overlay.icon : overlay.iconClass;\n        overlayIcons.push(<span key={node.id} className={this.getIconClass(overlayIcon, iconClasses)}\n                                style={style(overlay.color)}></span>);\n      }\n    }\n\n    if (overlayIcons.length > 0) {\n      return <div className={TreeDecoration.Styles.ICON_WRAPPER_CLASS}>{icon}{overlayIcons}</div>;\n    }\n\n    return icon;\n  }\n\n  /**\n   * Render the tree node tail decorations.\n   * @param node the tree node.\n   * @param props the node properties.\n   */\n  protected renderTailDecorations(node: TreeNode, props: NodeProps): React.ReactNode {\n    const tailDecorations = this.getDecorationData(node, 'tailDecorations').filter(notEmpty).reduce((acc, current) => acc.concat(current), []);\n    if (tailDecorations.length === 0) {\n      return;\n    }\n    return this.renderTailDecorationsForNode(node, props, tailDecorations);\n  }\n\n  protected renderTailDecorationsForNode(node: TreeNode, props: NodeProps, tailDecorations:\n      (TreeDecoration.TailDecoration | TreeDecoration.TailDecorationIcon | TreeDecoration.TailDecorationIconClass)[]): React.ReactNode {\n    return <React.Fragment>\n      {tailDecorations.map((decoration, index) => {\n        const {tooltip} = decoration;\n        const {data, fontData} = decoration as TreeDecoration.TailDecoration;\n        const color = (decoration as TreeDecoration.TailDecorationIcon).color;\n        const className = [TREE_NODE_SEGMENT_CLASS, TREE_NODE_TAIL_CLASS].join(' ');\n        const style = fontData ? this.applyFontStyles({}, fontData) : color ? {color} : undefined;\n        const icon = (decoration as TreeDecoration.TailDecorationIcon).icon || (decoration as TreeDecoration.TailDecorationIconClass).iconClass;\n        const content = data ? data : icon ?\n            <span key={node.id + 'icon' + index} className={this.getIconClass(icon)}></span> : '';\n        return <div key={node.id + className + index} className={className} style={style} title={tooltip}>\n          {content}\n        </div>;\n      })}\n    </React.Fragment>;\n  }\n\n  /**\n   * Determine the classes to use for an icon\n   * - Assumes a Font Awesome name when passed a single string, otherwise uses the passed string array\n   * @param iconName the icon name or list of icon names.\n   * @param additionalClasses additional CSS classes.\n   *\n   * @returns the icon class name.\n   */\n  protected getIconClass(iconName: string | string[], additionalClasses: string[] = []): string {\n    const iconClass = (typeof iconName === 'string') ? ['a', 'fa', `fa-${iconName}`] : ['a'].concat(iconName);\n    return iconClass.concat(additionalClasses).join(' ');\n  }\n\n  /**\n   * Render indent for the file tree based on the depth\n   * @param node the tree node.\n   * @param depth the depth of the tree node.\n   */\n  protected renderIndent(node: TreeNode, props: NodeProps): React.ReactNode {\n    const renderIndentGuides = this.corePreferences['workbench.tree.renderIndentGuides'];\n    if (renderIndentGuides === 'none') {\n      return undefined;\n    }\n\n    const indentDivs: React.ReactNode[] = [];\n    let current: TreeNode | undefined = node;\n    let depth = props.depth;\n    while (current && depth) {\n      const classNames: string[] = [TREE_NODE_INDENT_GUIDE_CLASS];\n      if (this.needsActiveIndentGuideline(current)) {\n        classNames.push('active');\n      } else {\n        classNames.push(renderIndentGuides === 'onHover' ? 'hover' : 'always');\n      }\n      const paddingLeft = this.props.leftPadding * depth;\n      indentDivs.unshift(<div key={depth} className={classNames.join(' ')} style={{\n        paddingLeft: `${paddingLeft}px`\n      }}/>);\n      current = current.parent;\n      depth--;\n    }\n    return indentDivs;\n  }\n\n  protected needsActiveIndentGuideline(node: TreeNode): boolean {\n    const parent = node.parent;\n    if (!parent || !this.isExpandable(parent)) {\n      return false;\n    }\n    if (SelectableTreeNode.isSelected(parent)) {\n      return true;\n    }\n    if (parent.expanded) {\n      for (const sibling of parent.children) {\n        if (SelectableTreeNode.isSelected(sibling) && !(this.isExpandable(sibling) && sibling.expanded)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Render the node given the tree node and node properties.\n   * @param node the tree node.\n   * @param props the node properties.\n   */\n  protected renderNode(node: TreeNode, props: NodeProps): React.ReactNode {\n    if (!TreeNode.isVisible(node)) {\n      return undefined;\n    }\n    const attributes = this.createNodeAttributes(node, props);\n    const content = <div className={TREE_NODE_CONTENT_CLASS}>\n      {this.renderExpansionToggle(node, props)}\n      {this.decorateIcon(node, this.renderIcon(node, props))}\n      {this.renderCaptionAffixes(node, props, 'captionPrefixes')}\n      {this.renderCaption(node, props)}\n      {this.renderCaptionAffixes(node, props, 'captionSuffixes')}\n      {this.renderTailDecorations(node, props)}\n    </div>;\n    return React.createElement('div', attributes, content);\n  }\n\n  /**\n   * Create node attributes for the tree node given the node properties.\n   * @param node the tree node.\n   * @param props the node properties.\n   */\n  protected createNodeAttributes(node: TreeNode, props: NodeProps): React.Attributes & React.HTMLAttributes<HTMLElement> {\n    const className = this.createNodeClassNames(node, props).join(' ');\n    const style = this.createNodeStyle(node, props);\n    return {\n      className,\n      style,\n      onClick: event => this.handleClickEvent(node, event),\n      onDoubleClick: event => this.handleDblClickEvent(node, event),\n      onContextMenu: event => this.handleContextMenuEvent(node, event)\n    };\n  }\n\n  /**\n   * Create the node class names.\n   * @param node the tree node.\n   * @param props the node properties.\n   *\n   * @returns the list of tree node class names.\n   */\n  protected createNodeClassNames(node: TreeNode, props: NodeProps): string[] {\n    const classNames = [TREE_NODE_CLASS];\n    if (CompositeTreeNode.is(node)) {\n      classNames.push(COMPOSITE_TREE_NODE_CLASS);\n    }\n    if (this.isExpandable(node)) {\n      classNames.push(EXPANDABLE_TREE_NODE_CLASS);\n    }\n    if (SelectableTreeNode.isSelected(node)) {\n      classNames.push(SELECTED_CLASS);\n    }\n    if (SelectableTreeNode.hasFocus(node)) {\n      classNames.push(FOCUS_CLASS);\n    }\n    return classNames;\n  }\n\n  /**\n   * Get the default node style.\n   * @param node the tree node.\n   * @param props the node properties.\n   *\n   * @returns the CSS properties if available.\n   */\n  protected getDefaultNodeStyle(node: TreeNode, props: NodeProps): React.CSSProperties | undefined {\n    const paddingLeft = this.getPaddingLeft(node, props) + 'px';\n    return {paddingLeft};\n  }\n\n  protected getPaddingLeft(node: TreeNode, props: NodeProps): number {\n    return props.depth * this.props.leftPadding + (this.needsExpansionTogglePadding(node) ? this.props.expansionTogglePadding : 0);\n  }\n\n  /**\n   * If the node is a composite, a toggle will be rendered.\n   * Otherwise we need to add the width and the left, right padding => 18px\n   */\n  protected needsExpansionTogglePadding(node: TreeNode): boolean {\n    return !this.isExpandable(node);\n  }\n\n  /**\n   * Create the tree node style.\n   * @param node the tree node.\n   * @param props the node properties.\n   */\n  protected createNodeStyle(node: TreeNode, props: NodeProps): React.CSSProperties | undefined {\n    return this.decorateNodeStyle(node, this.getDefaultNodeStyle(node, props));\n  }\n\n  /**\n   * Decorate the node style.\n   * @param node the tree node.\n   * @param style the optional CSS properties.\n   *\n   * @returns the CSS styles if available.\n   */\n  protected decorateNodeStyle(node: TreeNode, style: React.CSSProperties | undefined): React.CSSProperties | undefined {\n    const backgroundColor = this.getDecorationData(node, 'backgroundColor').filter(notEmpty).shift();\n    if (backgroundColor) {\n      style = {\n        ...(style || {}),\n        backgroundColor\n      };\n    }\n    return style;\n  }\n\n  /**\n   * Determine if the tree node is expandable.\n   * @param node the tree node.\n   *\n   * @returns `true` if the tree node is expandable.\n   */\n  protected isExpandable(node: TreeNode): node is ExpandableTreeNode {\n    return ExpandableTreeNode.is(node);\n  }\n\n  /**\n   * Get the tree node decorations.\n   * @param node the tree node.\n   *\n   * @returns the list of tree decoration data.\n   */\n  protected getDecorations(node: TreeNode): TreeDecoration.Data[] {\n    const decorations: TreeDecoration.Data[] = [];\n    if (DecoratedTreeNode.is(node)) {\n      decorations.push(node.decorationData);\n    }\n    if (this.decorations.has(node.id)) {\n      decorations.push(...this.decorations.get(node.id)!);\n    }\n    return decorations.sort(TreeDecoration.Data.comparePriority);\n  }\n\n  /**\n   * Get the tree decoration data for the given key.\n   * @param node the tree node.\n   * @param key the tree decoration data key.\n   *\n   * @returns the tree decoration data at the given key.\n   */\n  protected getDecorationData<K extends keyof TreeDecoration.Data>(node: TreeNode, key: K): TreeDecoration.Data[K][] {\n    return this.getDecorations(node).filter(data => data[key] !== undefined).map(data => data[key]).filter(notEmpty);\n  }\n\n  /**\n   * Get the scroll container.\n   */\n  protected getScrollContainer(): MaybePromise<HTMLElement> {\n    this.toDisposeOnDetach.push(Disposable.create(() => {\n      const {scrollTop, scrollLeft} = this.node;\n      this.lastScrollState = {scrollTop, scrollLeft};\n    }));\n    if (this.lastScrollState) {\n      const {scrollTop, scrollLeft} = this.lastScrollState;\n      this.node.scrollTop = scrollTop;\n      this.node.scrollLeft = scrollLeft;\n    }\n    return this.node;\n  }\n\n  protected onAfterAttach(msg: Message): void {\n    const up = [\n      Key.ARROW_UP,\n      KeyCode.createKeyCode({first: Key.ARROW_UP, modifiers: [KeyModifier.Shift]})\n    ];\n    const down = [\n      Key.ARROW_DOWN,\n      KeyCode.createKeyCode({first: Key.ARROW_DOWN, modifiers: [KeyModifier.Shift]})\n    ];\n    if (this.props.search) {\n      if (this.searchBox.isAttached) {\n        Widget.detach(this.searchBox);\n      }\n      UnsafeWidgetUtilities.attach(this.searchBox, this.node.parentElement!);\n      this.addKeyListener(this.node, this.searchBox.keyCodePredicate.bind(this.searchBox), this.searchBox.handle.bind(this.searchBox));\n      this.toDisposeOnDetach.push(Disposable.create(() => {\n        Widget.detach(this.searchBox);\n      }));\n    }\n    super.onAfterAttach(msg);\n    this.addKeyListener(this.node, Key.ARROW_LEFT, event => this.handleLeft(event));\n    this.addKeyListener(this.node, Key.ARROW_RIGHT, event => this.handleRight(event));\n    this.addKeyListener(this.node, up, event => this.handleUp(event));\n    this.addKeyListener(this.node, down, event => this.handleDown(event));\n    this.addKeyListener(this.node, Key.ENTER, event => this.handleEnter(event));\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.addEventListener<any>(this.node, 'ps-scroll-y', (e: Event & { target: { scrollTop: number } }) => {\n      if (this.view && this.view.list && this.view.list.Grid) {\n        const {scrollTop} = e.target;\n        this.view.list.Grid.handleScrollEvent({scrollTop});\n      }\n    });\n    this.addEventListener(this.node, 'focus', () => this.doFocus());\n  }\n\n  /**\n   * Handle the `left arrow` keyboard event.\n   * @param event the `left arrow` keyboard event.\n   */\n  protected async handleLeft(event: KeyboardEvent): Promise<void> {\n    if (!!this.props.multiSelect && (this.hasCtrlCmdMask(event) || this.hasShiftMask(event))) {\n      return;\n    }\n    if (!await this.model.collapseNode()) {\n      this.model.selectParent();\n    }\n  }\n\n  /**\n   * Handle the `right arrow` keyboard event.\n   * @param event the `right arrow` keyboard event.\n   */\n  protected async handleRight(event: KeyboardEvent): Promise<void> {\n    if (!!this.props.multiSelect && (this.hasCtrlCmdMask(event) || this.hasShiftMask(event))) {\n      return;\n    }\n    if (!await this.model.expandNode()) {\n      this.model.selectNextNode();\n    }\n  }\n\n  /**\n   * Handle the `up arrow` keyboard event.\n   * @param event the `up arrow` keyboard event.\n   */\n  protected handleUp(event: KeyboardEvent): void {\n    if (!!this.props.multiSelect && this.hasShiftMask(event)) {\n      this.model.selectPrevNode(TreeSelection.SelectionType.RANGE);\n    } else {\n      this.model.selectPrevNode();\n    }\n  }\n\n  /**\n   * Handle the `down arrow` keyboard event.\n   * @param event the `down arrow` keyboard event.\n   */\n  protected handleDown(event: KeyboardEvent): void {\n    if (!!this.props.multiSelect && this.hasShiftMask(event)) {\n      this.model.selectNextNode(TreeSelection.SelectionType.RANGE);\n    } else {\n      this.model.selectNextNode();\n    }\n  }\n\n  /**\n   * Handle the `enter key` keyboard event.\n   * - `enter` opens the tree node.\n   * @param event the `enter key` keyboard event.\n   */\n  protected handleEnter(event: KeyboardEvent): void {\n    this.model.openNode();\n  }\n\n  /**\n   * Handle the single-click mouse event.\n   * @param node the tree node if available.\n   * @param event the mouse single-click event.\n   */\n  protected handleClickEvent(node: TreeNode | undefined, event: React.MouseEvent<HTMLElement>): void {\n    if (node) {\n      const shiftMask = this.hasShiftMask(event);\n      const ctrlCmdMask = this.hasCtrlCmdMask(event);\n      if (!!this.props.multiSelect) {\n        if (SelectableTreeNode.is(node)) {\n          if (shiftMask) {\n            this.model.selectRange(node);\n          } else if (ctrlCmdMask) {\n            this.model.toggleNode(node);\n          } else {\n            this.model.selectNode(node);\n          }\n        }\n      } else {\n        if (SelectableTreeNode.is(node)) {\n          this.model.selectNode(node);\n        }\n      }\n      if (!this.props.expandOnlyOnExpansionToggleClick) {\n        if (this.isExpandable(node) && !shiftMask && !ctrlCmdMask) {\n          this.model.toggleNodeExpansion(node);\n        }\n      }\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Handle the double-click mouse event.\n   * @param node the tree node if available.\n   * @param event the double-click mouse event.\n   */\n  protected handleDblClickEvent(node: TreeNode | undefined, event: React.MouseEvent<HTMLElement>): void {\n    this.model.openNode(node);\n    event.stopPropagation();\n  }\n\n  /**\n   * Handle the context menu click event.\n   * - The context menu click event is triggered by the right-click.\n   * @param node the tree node if available.\n   * @param event the right-click mouse event.\n   */\n  protected handleContextMenuEvent(node: TreeNode | undefined, event: React.MouseEvent<HTMLElement>): void {\n    if (SelectableTreeNode.is(node)) {\n      // Keep the selection for the context menu, if the widget support multi-selection and the right click happens on an already selected node.\n      if (!this.props.multiSelect || !node.selected) {\n        const type = !!this.props.multiSelect && this.hasCtrlCmdMask(event) ? TreeSelection.SelectionType.TOGGLE : TreeSelection.SelectionType.DEFAULT;\n        this.model.addSelection({node, type});\n      }\n      const contextMenuPath = this.props.contextMenuPath;\n      if (contextMenuPath) {\n        const {x, y} = event.nativeEvent;\n        const args = this.toContextMenuArgs(node);\n        this.onRender.push(Disposable.create(() =>\n            setTimeout(() => this.contextMenuRenderer.render({\n              menuPath: contextMenuPath,\n              anchor: {x, y},\n              args\n            }))\n        ));\n      }\n      this.doFocus();\n    }\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  /**\n   * Handle the double-click mouse event on the expansion toggle.\n   */\n  protected readonly handleExpansionToggleDblClickEvent = (event: React.MouseEvent<HTMLElement>) => this.doHandleExpansionToggleDblClickEvent(event);\n\n  /**\n   * Actually handle the double-click mouse event on the expansion toggle.\n   * @param event the double-click mouse event.\n   */\n  protected doHandleExpansionToggleDblClickEvent(event: React.MouseEvent<HTMLElement>): void {\n    if (this.props.expandOnlyOnExpansionToggleClick) {\n      // Ignore the double-click event.\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Convert the tree node to context menu arguments.\n   * @param node the selectable tree node.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected toContextMenuArgs(node: SelectableTreeNode): any[] | undefined {\n    return undefined;\n  }\n\n  /**\n   * Determine if the tree modifier aware event has a `ctrlcmd` mask.\n   * @param event the tree modifier aware event.\n   *\n   * @returns `true` if the tree modifier aware event contains the `ctrlcmd` mask.\n   */\n  protected hasCtrlCmdMask(event: TreeWidget.ModifierAwareEvent): boolean {\n    const {metaKey, ctrlKey} = event;\n    return (isOSX && metaKey) || ctrlKey;\n  }\n\n  /**\n   * Determine if the tree modifier aware event has a `shift` mask.\n   * @param event the tree modifier aware event.\n   *\n   * @returns `true` if the tree modifier aware event contains the `shift` mask.\n   */\n  protected hasShiftMask(event: TreeWidget.ModifierAwareEvent): boolean {\n    // Ctrl/Cmd mask overrules the Shift mask.\n    if (this.hasCtrlCmdMask(event)) {\n      return false;\n    }\n    return event.shiftKey;\n  }\n\n  /**\n   * Deflate the tree node for storage.\n   * @param node the tree node.\n   */\n  protected deflateForStorage(node: TreeNode): object {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const copy = Object.assign({}, node) as any;\n    if (copy.parent) {\n      delete copy.parent;\n    }\n    if ('previousSibling' in copy) {\n      delete copy.previousSibling;\n    }\n    if ('nextSibling' in copy) {\n      delete copy.nextSibling;\n    }\n    if ('busy' in copy) {\n      delete copy.busy;\n    }\n    if (CompositeTreeNode.is(node)) {\n      copy.children = [];\n      for (const child of node.children) {\n        copy.children.push(this.deflateForStorage(child));\n      }\n    }\n    return copy;\n  }\n\n  /**\n   * Inflate the tree node from storage.\n   * @param node the tree node.\n   * @param parent the optional tree node.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected inflateFromStorage(node: any, parent?: TreeNode): TreeNode {\n    if (node.selected) {\n      node.selected = false;\n    }\n    if (parent) {\n      node.parent = parent;\n    }\n    if (Array.isArray(node.children)) {\n      for (const child of node.children as TreeNode[]) {\n        this.inflateFromStorage(child, node);\n      }\n    }\n    return node;\n  }\n\n  protected toNodeIcon(node: TreeNode): string {\n    return this.labelProvider.getIcon(node);\n  }\n\n  protected toNodeName(node: TreeNode): string {\n    return this.labelProvider.getName(node);\n  }\n\n  protected toNodeDescription(node: TreeNode): string {\n    return this.labelProvider.getLongName(node);\n  }\n\n}\n\nexport namespace TreeWidget {\n  /**\n   * Representation of the tree force update options.\n   */\n  export interface ForceUpdateOptions {\n    /**\n     * Controls whether to force a resize of the widget.\n     */\n    resize: boolean\n  }\n\n  /**\n   * Representation of a tree node row.\n   */\n  export interface NodeRow {\n    /**\n     * The node row index.\n     */\n    index: number\n    /**\n     * The actual node.\n     */\n    node: TreeNode\n    /**\n     * A root relative number representing the hierarchical depth of the actual node. Root is `0`, its children have `1` and so on.\n     */\n    depth: number\n  }\n\n  /**\n   * Representation of the tree view properties.\n   */\n  export interface ViewProps {\n    /**\n     * The width property.\n     */\n    width: number\n    /**\n     * The height property.\n     */\n    height: number\n    /**\n     * The scroll to row value.\n     */\n    scrollToRow?: number\n    /**\n     * The list of node rows.\n     */\n    rows: NodeRow[]\n    handleScroll: (info: ScrollParams) => void\n    renderNodeRow: (row: NodeRow) => React.ReactNode\n  }\n\n  export class View extends React.Component<ViewProps> {\n    list: List | undefined;\n    readonly cache = new CellMeasurerCache({\n      fixedWidth: true\n    });\n\n    render(): React.ReactNode {\n      const {rows, width, height, scrollToRow, handleScroll} = this.props;\n      return <div>\n        {\n          console.log('loading') === undefined ? <div style={{height: '1px'}}/> : <div/>\n        }\n        <List\n            ref={list => this.list = (list || undefined)}\n            width={width}\n            height={height}\n            rowCount={rows.length}\n            rowHeight={this.cache.rowHeight}\n            rowRenderer={this.renderTreeRow}\n            scrollToIndex={scrollToRow}\n            onScroll={handleScroll}\n            tabIndex={-1}\n        />\n      </div>;\n    }\n\n    protected renderTreeRow: ListRowRenderer = ({key, index, style, parent}) => {\n      const row = this.props.rows[index]!;\n      return <CellMeasurer\n          cache={this.cache}\n          columnIndex={0}\n          key={key}\n          parent={parent}\n          rowIndex={index}>\n        <div key={key} style={style}>{this.props.renderNodeRow(row)}</div>\n      </CellMeasurer>;\n    };\n  }\n}\n"]}