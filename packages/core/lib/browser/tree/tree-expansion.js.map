{"version":3,"sources":["browser/tree/tree-expansion.ts"],"names":[],"mappings":"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","file":"../../../src/browser/tree/tree-expansion.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, postConstruct} from 'inversify';\nimport {Disposable, Emitter, Event} from '../../common';\nimport {CompositeTreeNode, Tree, TreeNode} from './tree';\n\nexport const TreeExpansionService = Symbol('TreeExpansionService');\n\n/**\n * The tree expandable service.\n */\nexport interface TreeExpansionService extends Disposable {\n  /**\n   * Emit when the node is expanded or collapsed.\n   */\n  readonly onExpansionChanged: Event<Readonly<ExpandableTreeNode>>;\n\n  /**\n   * Expand a node for the given node id if it is valid and collapsed.\n   * Expanding a node refreshes all its children.\n   *\n   * Return a valid expanded refreshed node or `undefined` if such does not exist.\n   */\n  expandNode(node: Readonly<ExpandableTreeNode>): Promise<Readonly<ExpandableTreeNode> | undefined>;\n\n  /**\n   * If the given node is valid and expanded then collapse it.\n   *\n   * Return true if a node has been collapsed; otherwise false.\n   */\n  collapseNode(node: Readonly<ExpandableTreeNode>): Promise<boolean>;\n\n  /**\n   * If the given node is valid then collapse it recursively.\n   *\n   * Return true if a node has been collapsed; otherwise false.\n   */\n  collapseAll(node: Readonly<CompositeTreeNode>): Promise<boolean>;\n\n  /**\n   * If the given node is invalid then does nothing.\n   * If the given node is collapsed then expand it; otherwise collapse it.\n   */\n  toggleNodeExpansion(node: Readonly<ExpandableTreeNode>): Promise<void>;\n}\n\n/**\n * The expandable tree node.\n */\nexport interface ExpandableTreeNode extends CompositeTreeNode {\n  /**\n   * Test whether this tree node is expanded.\n   */\n  expanded: boolean;\n}\n\nexport namespace ExpandableTreeNode {\n  export function is(node: Object | undefined): node is ExpandableTreeNode {\n    return !!node && CompositeTreeNode.is(node) && 'expanded' in node;\n  }\n\n  export function isExpanded(node: Object | undefined): node is ExpandableTreeNode {\n    return ExpandableTreeNode.is(node) && node.expanded;\n  }\n\n  export function isCollapsed(node: Object | undefined): node is ExpandableTreeNode {\n    return ExpandableTreeNode.is(node) && !node.expanded;\n  }\n}\n\n@injectable()\nexport class TreeExpansionServiceImpl implements TreeExpansionService {\n\n  @inject(Tree) protected readonly tree: Tree;\n  protected readonly onExpansionChangedEmitter = new Emitter<ExpandableTreeNode>();\n\n  get onExpansionChanged(): Event<ExpandableTreeNode> {\n    return this.onExpansionChangedEmitter.event;\n  }\n\n  dispose(): void {\n    this.onExpansionChangedEmitter.dispose();\n  }\n\n  async expandNode(raw: ExpandableTreeNode): Promise<ExpandableTreeNode | undefined> {\n    const node = this.tree.validateNode(raw);\n    if (ExpandableTreeNode.isCollapsed(node)) {\n      return this.doExpandNode(node);\n    }\n    return undefined;\n  }\n\n  async collapseNode(raw: ExpandableTreeNode): Promise<boolean> {\n    const node = this.tree.validateNode(raw);\n    return this.doCollapseNode(node);\n  }\n\n  async collapseAll(raw: CompositeTreeNode): Promise<boolean> {\n    const node = this.tree.validateNode(raw);\n    return this.doCollapseAll(node);\n  }\n\n  async toggleNodeExpansion(node: ExpandableTreeNode): Promise<void> {\n    if (node.expanded) {\n      await this.collapseNode(node);\n    } else {\n      await this.expandNode(node);\n    }\n  }\n\n  @postConstruct()\n  protected init(): void {\n    this.tree.onNodeRefreshed(node => {\n      for (const child of node.children) {\n        if (ExpandableTreeNode.isExpanded(child)) {\n          node.waitUntil(this.tree.refresh(child));\n        }\n      }\n    });\n  }\n\n  protected fireExpansionChanged(node: ExpandableTreeNode): void {\n    this.onExpansionChangedEmitter.fire(node);\n  }\n\n  protected async doExpandNode(node: ExpandableTreeNode): Promise<ExpandableTreeNode | undefined> {\n    const refreshed = await this.tree.refresh(node);\n    if (ExpandableTreeNode.is(refreshed)) {\n      refreshed.expanded = true;\n      this.fireExpansionChanged(refreshed);\n      return refreshed;\n    }\n    return undefined;\n  }\n\n  protected doCollapseAll(node: TreeNode | undefined): boolean {\n    let result = false;\n    if (CompositeTreeNode.is(node)) {\n      for (const child of node.children) {\n        result = this.doCollapseAll(child) || result;\n      }\n    }\n    return this.doCollapseNode(node) || result;\n  }\n\n  protected doCollapseNode(node: TreeNode | undefined): boolean {\n    if (!ExpandableTreeNode.isExpanded(node)) {\n      return false;\n    }\n    node.expanded = false;\n    this.fireExpansionChanged(node);\n    return true;\n  }\n\n}\n"]}