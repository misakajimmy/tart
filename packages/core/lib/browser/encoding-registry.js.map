{"version":3,"sources":["browser/encoding-registry.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAClF;;;gGAGgG;;;;;;;AAEhG,gKAAgK;AAEhK,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,WAAW,CAAC;AAE7C,OAAO,EAAC,UAAU,EAAC,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAC,eAAe,IAAI,eAAe,EAAC,MAAM,4BAA4B,CAAC;AAC9E,OAAO,EAAC,IAAI,EAAC,MAAM,qBAAqB,CAAC;AAUzC,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAER,iBAAiB,GAAuB,EAAE,CAAC;IAG3C,WAAW,CAAkB;IAG7B,eAAe,CAAkB;IAEpD,gBAAgB,CAAC,QAA0B;QACzC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtC,OAAO,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE;YAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACvD,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBAChB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aACzC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB,CAAC,QAAa,EAAE,iBAA0B;QAC9D,IAAI,YAAoB,CAAC;QAEzB,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACpD,IAAI,QAAQ,EAAE;YACZ,YAAY,GAAG,QAAQ,CAAC,CAAC,gCAAgC;SAC1D;aAAM,IAAI,iBAAiB,EAAE;YAC5B,YAAY,GAAG,iBAAiB,CAAC,CAAC,kCAAkC;SACrE;aAAM;YACL,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,gBAAgB,EAAE,SAAS,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;SACvF;QAED,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;YAC/D,OAAO,IAAI,CAAC,CAAC,uBAAuB;SACrC;QAED,OAAO,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;IAC5D,CAAC;IAES,mBAAmB,CAAC,QAAa;QACzC,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;YAC3D,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAC7C,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;oBAChE,OAAO,QAAQ,CAAC,QAAQ,CAAC;iBAC1B;gBAED,IAAI,QAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,QAAQ,CAAC,SAAS,EAAE,EAAE;oBACxE,OAAO,QAAQ,CAAC,QAAQ,CAAC;iBAC1B;gBAED,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,EAAE;oBAC1D,OAAO,QAAQ,CAAC,QAAQ,CAAC;iBAC1B;aACF;SACF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;CAEF,CAAA;AAtDC;IADC,MAAM,CAAC,eAAe,CAAC;qDACwB;AAGhD;IADC,MAAM,CAAC,eAAe,CAAC;yDAC4B;AARzC,gBAAgB;IAD5B,UAAU,EAAE;GACA,gBAAgB,CA2D5B;SA3DY,gBAAgB","file":"../../src/browser/encoding-registry.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2020 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/workbench/services/textfile/browser/textFileService.ts#L491\n\nimport {inject, injectable} from 'inversify';\nimport URI from '../common/uri';\nimport {Disposable} from '../common/disposable';\nimport {CorePreferences} from './core-preferences';\nimport {EncodingService as EncodingService} from '../common/encoding-service';\nimport {UTF8} from '../common/encodings';\n\nexport interface EncodingOverride {\n  parent?: URI;\n  extension?: string;\n  scheme?: string;\n  encoding: string;\n}\n\n@injectable()\nexport class EncodingRegistry {\n\n  protected readonly encodingOverrides: EncodingOverride[] = [];\n\n  @inject(CorePreferences)\n  protected readonly preferences: CorePreferences;\n\n  @inject(EncodingService)\n  protected readonly encodingService: EncodingService;\n\n  registerOverride(override: EncodingOverride): Disposable {\n    this.encodingOverrides.push(override);\n    return Disposable.create(() => {\n      const index = this.encodingOverrides.indexOf(override);\n      if (index !== -1) {\n        this.encodingOverrides.splice(index, 1);\n      }\n    });\n  }\n\n  getEncodingForResource(resource: URI, preferredEncoding?: string): string {\n    let fileEncoding: string;\n\n    const override = this.getEncodingOverride(resource);\n    if (override) {\n      fileEncoding = override; // encoding override always wins\n    } else if (preferredEncoding) {\n      fileEncoding = preferredEncoding; // preferred encoding comes second\n    } else {\n      fileEncoding = this.preferences.get('files.encoding', undefined, resource.toString());\n    }\n\n    if (!fileEncoding || !this.encodingService.exists(fileEncoding)) {\n      return UTF8; // the default is UTF 8\n    }\n\n    return this.encodingService.toIconvEncoding(fileEncoding);\n  }\n\n  protected getEncodingOverride(resource: URI): string | undefined {\n    if (this.encodingOverrides && this.encodingOverrides.length) {\n      for (const override of this.encodingOverrides) {\n        if (override.parent && resource.isEqualOrParent(override.parent)) {\n          return override.encoding;\n        }\n\n        if (override.extension && resource.path.ext === `.${override.extension}`) {\n          return override.encoding;\n        }\n\n        if (override.scheme && override.scheme === resource.scheme) {\n          return override.encoding;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n}\n"]}