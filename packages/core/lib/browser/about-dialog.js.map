{"version":3,"sources":["browser/about-dialog.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;;;;AAElF,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,aAAa,EAAC,MAAM,WAAW,CAAC;AAC5D,OAAO,EAAC,WAAW,EAAC,MAAM,WAAW,CAAC;AACtC,OAAO,EAAC,WAAW,EAAC,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAkB,iBAAiB,EAAgB,MAAM,gCAAgC,CAAC;AAGjG,MAAM,CAAC,MAAM,mBAAmB,GAAG,kBAAkB,CAAC;AACtD,MAAM,CAAC,MAAM,sBAAsB,GAAG,sBAAsB,CAAC;AAG7D,IAAa,gBAAgB,GAA7B,MAAa,gBAAiB,SAAQ,WAAW;CAChD,CAAA;AADY,gBAAgB;IAD5B,UAAU,EAAE;GACA,gBAAgB,CAC5B;SADY,gBAAgB;AAI7B,IAAa,WAAW,GAAxB,MAAa,WAAY,SAAQ,WAAiB;IASC;IARvC,eAAe,CAA8B;IAC7C,eAAe,GAAoB,EAAE,CAAC;IAC7B,QAAQ,CAAoB;IAG5B,SAAS,CAAoB;IAEhD,YACiD,KAAuB;QAEtE,KAAK,CAAC;YACJ,KAAK,EAAE,MAAM;SACd,CAAC,CAAC;QAJ4C,UAAK,GAAL,KAAK,CAAkB;QAKtE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,IAAI,KAAK;QACP,OAAO,SAAS,CAAC;IACnB,CAAC;IAGS,KAAK,CAAC,IAAI;QAClB,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;QACjE,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;QACjE,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAES,YAAY;QACpB,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAC7C,OAAO,eAAe,IAAI;YAAK,eAAe,CAAC,IAAI;;YAAG,eAAe,CAAC,OAAO,CAAM,CAAC;IACtF,CAAC;IAES,gBAAgB;QACxB,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAC7C,OAAO;YACL,qDAA2B;YAE3B,4BAAI,SAAS,EAAE,sBAAsB,IAEjC,eAAe;iBACV,IAAI,CAAC,CAAC,CAAgB,EAAE,CAAgB,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;iBACtG,GAAG,CAAC,CAAC,SAAwB,EAAE,EAAE,CAAC,4BAC/B,GAAG,EAAE,SAAS,CAAC,IAAI;gBAAG,SAAS,CAAC,IAAI;;gBAAG,SAAS,CAAC,OAAO,CAAM,CAAC,CAEtE,CACJ,CAAC;IACN,CAAC;IAES,MAAM;QACd,OAAO,6BAAK,SAAS,EAAE,mBAAmB;YACvC,IAAI,CAAC,YAAY,EAAE;YACnB,IAAI,CAAC,gBAAgB,EAAE,CACpB,CAAC;IACT,CAAC;IAES,aAAa,CAAC,GAAY;QAClC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;CACF,CAAA;AAtDC;IADC,MAAM,CAAC,iBAAiB,CAAC;8CACsB;AAgBhD;IADC,aAAa,EAAE;uCAKf;AA1BU,WAAW;IADvB,UAAU,EAAE;IAUN,WAAA,MAAM,CAAC,gBAAgB,CAAC,CAAA;GATlB,WAAW,CA4DvB;SA5DY,WAAW","file":"../../src/browser/about-dialog.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as React from 'react';\nimport {inject, injectable, postConstruct} from 'inversify';\nimport {DialogProps} from './dialogs';\nimport {ReactDialog} from './dialogs/react-dialog';\nimport {ApplicationInfo, ApplicationServer, ExtensionInfo} from '../common/application-protocol';\nimport {Message} from './widgets/widget';\n\nexport const ABOUT_CONTENT_CLASS = 'tart-aboutDialog';\nexport const ABOUT_EXTENSIONS_CLASS = 'tart-aboutExtensions';\n\n@injectable()\nexport class AboutDialogProps extends DialogProps {\n}\n\n@injectable()\nexport class AboutDialog extends ReactDialog<void> {\n  protected applicationInfo: ApplicationInfo | undefined;\n  protected extensionsInfos: ExtensionInfo[] = [];\n  protected readonly okButton: HTMLButtonElement;\n\n  @inject(ApplicationServer)\n  protected readonly appServer: ApplicationServer;\n\n  constructor(\n      @inject(AboutDialogProps) protected readonly props: AboutDialogProps\n  ) {\n    super({\n      title: 'TART',\n    });\n    this.appendAcceptButton('Ok');\n  }\n\n  get value(): undefined {\n    return undefined;\n  }\n\n  @postConstruct()\n  protected async init(): Promise<void> {\n    this.applicationInfo = await this.appServer.getApplicationInfo();\n    this.extensionsInfos = await this.appServer.getExtensionsInfos();\n    this.update();\n  }\n\n  protected renderHeader(): React.ReactNode {\n    const applicationInfo = this.applicationInfo;\n    return applicationInfo && <h3>{applicationInfo.name} {applicationInfo.version}</h3>;\n  }\n\n  protected renderExtensions(): React.ReactNode {\n    const extensionsInfos = this.extensionsInfos;\n    return <>\n      <h3>List of extensions</h3>\n\n      <ul className={ABOUT_EXTENSIONS_CLASS}>\n        {\n          extensionsInfos\n              .sort((a: ExtensionInfo, b: ExtensionInfo) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()))\n              .map((extension: ExtensionInfo) => <li\n                  key={extension.name}>{extension.name} {extension.version}</li>)\n        }\n      </ul>\n    </>;\n  }\n\n  protected render(): React.ReactNode {\n    return <div className={ABOUT_CONTENT_CLASS}>\n      {this.renderHeader()}\n      {this.renderExtensions()}\n    </div>;\n  }\n\n  protected onAfterAttach(msg: Message): void {\n    super.onAfterAttach(msg);\n    this.update();\n  }\n}\n"]}