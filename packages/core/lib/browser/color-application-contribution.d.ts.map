{"version":3,"sources":["browser/color-application-contribution.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,+BAA+B,EAAC,MAAM,wBAAwB,CAAC;AACvE,OAAO,EAAC,oBAAoB,EAAc,oBAAoB,EAAE,OAAO,EAAC,MAAM,WAAW,CAAC;AAC1F,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAG/C,eAAO,MAAM,iBAAiB,eAA8B,CAAC;AAE7D,MAAM,WAAW,iBAAiB;IAChC,cAAc,CAAC,MAAM,EAAE,aAAa,GAAG,IAAI,CAAC;CAC7C;AAED,qBACa,4BAA6B,YAAW,+BAA+B;IAElF,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAsB;IACtD,SAAS,CAAC,QAAQ,CAAC,kBAAkB,gBAAuB;IAC5D,QAAQ,CAAC,WAAW,kCAAiC;IAErD,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,aAAa,CAAC;IAEzC,SAAS,CAAC,QAAQ,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;IAC/E,SAAS,CAAC,QAAQ,CAAC,QAAQ,uBAA8B;IAEzD,MAAM,CAAC,cAAc,IAAI,IAAI;IAM7B,OAAO,IAAI,IAAI;IAYf,SAAS,CAAC,MAAM,IAAI,IAAI;IAuBxB,SAAS,CAAC,qBAAqB,IAAI,IAAI;CAQxC","file":"../../src/browser/color-application-contribution.d.ts","sourcesContent":["import {inject, injectable, named} from 'inversify';\nimport {FrontendApplicationContribution} from './frontend-application';\nimport {ContributionProvider, Disposable, DisposableCollection, Emitter} from '../common';\nimport {ColorRegistry} from './color-registry';\nimport {ThemeService} from './theming';\n\nexport const ColorContribution = Symbol('ColorContribution');\n\nexport interface ColorContribution {\n  registerColors(colors: ColorRegistry): void;\n}\n\n@injectable()\nexport class ColorApplicationContribution implements FrontendApplicationContribution {\n\n  private static themeBackgroundId = 'theme.background';\n  protected readonly onDidChangeEmitter = new Emitter<void>();\n  readonly onDidChange = this.onDidChangeEmitter.event;\n  @inject(ColorRegistry)\n  protected readonly colors: ColorRegistry;\n  @inject(ContributionProvider) @named(ColorContribution)\n  protected readonly colorContributions: ContributionProvider<ColorContribution>;\n  protected readonly toUpdate = new DisposableCollection();\n\n  static initBackground(): void {\n    const value = window.localStorage.getItem(this.themeBackgroundId) || '#1d1d1d';\n    const documentElement = document.documentElement;\n    documentElement.style.setProperty('--tart-editor-background', value);\n  }\n\n  onStart(): void {\n    for (const contribution of this.colorContributions.getContributions()) {\n      contribution.registerColors(this.colors);\n    }\n\n    this.updateThemeBackground();\n    ThemeService.get().onDidColorThemeChange(() => this.updateThemeBackground());\n    this.update();\n    ThemeService.get().onDidColorThemeChange(() => this.update());\n    this.colors.onDidChange(() => this.update());\n  }\n\n  protected update(): void {\n    if (!document) {\n      return;\n    }\n    this.toUpdate.dispose();\n    const theme = 'tart-' + ThemeService.get().getCurrentTheme().type;\n    document.body.classList.add(theme);\n    this.toUpdate.push(Disposable.create(() => document.body.classList.remove(theme)));\n\n    const documentElement = document.documentElement;\n    if (documentElement) {\n      for (const id of this.colors.getColors()) {\n        const variable = this.colors.getCurrentCssVariable(id);\n        if (variable) {\n          const {name, value} = variable;\n          documentElement.style.setProperty(name, value);\n          this.toUpdate.push(Disposable.create(() => documentElement.style.removeProperty(name)));\n        }\n      }\n    }\n    this.onDidChangeEmitter.fire(undefined);\n  }\n\n  protected updateThemeBackground(): void {\n    const color = this.colors.getCurrentColor('editor.background');\n    if (color) {\n      window.localStorage.setItem(ColorApplicationContribution.themeBackgroundId, color);\n    } else {\n      window.localStorage.removeItem(ColorApplicationContribution.themeBackgroundId);\n    }\n  }\n}\n"]}