{"version":3,"sources":["browser/about-dialog.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,WAAW,EAAC,MAAM,WAAW,CAAC;AACtC,OAAO,EAAC,WAAW,EAAC,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAC,eAAe,EAAE,iBAAiB,EAAE,aAAa,EAAC,MAAM,gCAAgC,CAAC;AACjG,OAAO,EAAC,OAAO,EAAC,MAAM,kBAAkB,CAAC;AAEzC,eAAO,MAAM,mBAAmB,qBAAqB,CAAC;AACtD,eAAO,MAAM,sBAAsB,yBAAyB,CAAC;AAE7D,qBACa,gBAAiB,SAAQ,WAAW;CAChD;AAED,qBACa,WAAY,SAAQ,WAAW,CAAC,IAAI,CAAC;IASlB,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,gBAAgB;IARxE,SAAS,CAAC,eAAe,EAAE,eAAe,GAAG,SAAS,CAAC;IACvD,SAAS,CAAC,eAAe,EAAE,aAAa,EAAE,CAAM;IAChD,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,iBAAiB,CAAC;IAG/C,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,iBAAiB,CAAC;gBAGC,KAAK,EAAE,gBAAgB;IAQxE,IAAI,KAAK,IAAI,SAAS,CAErB;cAGe,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC;IAMrC,SAAS,CAAC,YAAY,IAAI,KAAK,CAAC,SAAS;IAKzC,SAAS,CAAC,gBAAgB,IAAI,KAAK,CAAC,SAAS;IAgB7C,SAAS,CAAC,MAAM,IAAI,KAAK,CAAC,SAAS;IAOnC,SAAS,CAAC,aAAa,CAAC,GAAG,EAAE,OAAO,GAAG,IAAI;CAI5C","file":"../../src/browser/about-dialog.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as React from 'react';\nimport {inject, injectable, postConstruct} from 'inversify';\nimport {DialogProps} from './dialogs';\nimport {ReactDialog} from './dialogs/react-dialog';\nimport {ApplicationInfo, ApplicationServer, ExtensionInfo} from '../common/application-protocol';\nimport {Message} from './widgets/widget';\n\nexport const ABOUT_CONTENT_CLASS = 'tart-aboutDialog';\nexport const ABOUT_EXTENSIONS_CLASS = 'tart-aboutExtensions';\n\n@injectable()\nexport class AboutDialogProps extends DialogProps {\n}\n\n@injectable()\nexport class AboutDialog extends ReactDialog<void> {\n  protected applicationInfo: ApplicationInfo | undefined;\n  protected extensionsInfos: ExtensionInfo[] = [];\n  protected readonly okButton: HTMLButtonElement;\n\n  @inject(ApplicationServer)\n  protected readonly appServer: ApplicationServer;\n\n  constructor(\n      @inject(AboutDialogProps) protected readonly props: AboutDialogProps\n  ) {\n    super({\n      title: 'TART',\n    });\n    this.appendAcceptButton('Ok');\n  }\n\n  get value(): undefined {\n    return undefined;\n  }\n\n  @postConstruct()\n  protected async init(): Promise<void> {\n    this.applicationInfo = await this.appServer.getApplicationInfo();\n    this.extensionsInfos = await this.appServer.getExtensionsInfos();\n    this.update();\n  }\n\n  protected renderHeader(): React.ReactNode {\n    const applicationInfo = this.applicationInfo;\n    return applicationInfo && <h3>{applicationInfo.name} {applicationInfo.version}</h3>;\n  }\n\n  protected renderExtensions(): React.ReactNode {\n    const extensionsInfos = this.extensionsInfos;\n    return <>\n      <h3>List of extensions</h3>\n\n      <ul className={ABOUT_EXTENSIONS_CLASS}>\n        {\n          extensionsInfos\n              .sort((a: ExtensionInfo, b: ExtensionInfo) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()))\n              .map((extension: ExtensionInfo) => <li\n                  key={extension.name}>{extension.name} {extension.version}</li>)\n        }\n      </ul>\n    </>;\n  }\n\n  protected render(): React.ReactNode {\n    return <div className={ABOUT_CONTENT_CLASS}>\n      {this.renderHeader()}\n      {this.renderExtensions()}\n    </div>;\n  }\n\n  protected onAfterAttach(msg: Message): void {\n    super.onAfterAttach(msg);\n    this.update();\n  }\n}\n"]}