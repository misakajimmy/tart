{"version":3,"sources":["browser/navigatable-type.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,eAAe,CAAC;AAChC,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAAC,MAAM,EAAC,MAAM,iBAAiB,CAAC;AAEvC;;GAEG;AACH,MAAM,WAAW,WAAW;IAC1B;;OAEG;IACH,cAAc,IAAI,GAAG,GAAG,SAAS,CAAC;IAElC;;OAEG;IACH,eAAe,CAAC,WAAW,EAAE,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC;CACpD;AAED,yBAAiB,WAAW,CAAC;IAC3B,SAAgB,EAAE,CAAC,GAAG,EAAE,MAAM,GAAG,SAAS,GAAG,GAAG,IAAI,WAAW,CAE9D;CACF;AAED,oBAAY,iBAAiB,GAAG,UAAU,GAAG,WAAW,CAAC;AACzD,yBAAiB,iBAAiB,CAAC;IACjC,SAAgB,EAAE,CAAC,GAAG,EAAE,MAAM,GAAG,SAAS,GAAG,GAAG,IAAI,iBAAiB,CAEpE;IAED,SAAiB,WAAW,CAAC,CAAC,SAAS,MAAM,EACzC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,EACpB,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,GACzB,gBAAgB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAGhD;IAED,SAAiB,GAAG,CAAC,CAAC,SAAS,MAAM,EACjC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,EACpB,MAAM,GAAE,CAAC,WAAW,EAAE,GAAG,KAAK,OAAoB,GACnD,gBAAgB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAShD;CACF;AAED,MAAM,WAAW,wBAAwB;IACvC,IAAI,EAAE,aAAa,CAAC;IACpB,GAAG,EAAE,MAAM,CAAC;IACZ,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB;AAED,yBAAiB,wBAAwB,CAAC;IACxC,SAAgB,EAAE,CAAC,GAAG,EAAE,MAAM,GAAG,SAAS,GAAG,GAAG,IAAI,wBAAwB,CAG3E;CACF","file":"../../src/browser/navigatable-type.d.ts","sourcesContent":["import URI from '../common/uri';\nimport {BaseWidget} from './widgets';\nimport {MaybeArray} from '../common';\nimport {Widget} from '@lumino/widgets';\n\n/**\n * `Navigatable` provides an access to an URI of an underlying instance of `Resource`.\n */\nexport interface Navigatable {\n  /**\n   * Return an underlying resource URI.\n   */\n  getResourceUri(): URI | undefined;\n\n  /**\n   * Creates a new URI to which this navigatable should moved based on the given target resource URI.\n   */\n  createMoveToUri(resourceUri: URI): URI | undefined;\n}\n\nexport namespace Navigatable {\n  export function is(arg: Object | undefined): arg is Navigatable {\n    return !!arg && 'getResourceUri' && 'createMoveToUri' in arg;\n  }\n}\n\nexport type NavigatableWidget = BaseWidget & Navigatable;\nexport namespace NavigatableWidget {\n  export function is(arg: Object | undefined): arg is NavigatableWidget {\n    return arg instanceof BaseWidget && Navigatable.is(arg);\n  }\n\n  export function* getAffected<T extends Widget>(\n      widgets: Iterable<T>,\n      context: MaybeArray<URI>\n  ): IterableIterator<[URI, T & NavigatableWidget]> {\n    const uris = Array.isArray(context) ? context : [context];\n    return get(widgets, resourceUri => uris.some(uri => uri.isEqualOrParent(resourceUri)));\n  }\n\n  export function* get<T extends Widget>(\n      widgets: Iterable<T>,\n      filter: (resourceUri: URI) => boolean = () => true\n  ): IterableIterator<[URI, T & NavigatableWidget]> {\n    for (const widget of widgets) {\n      if (NavigatableWidget.is(widget)) {\n        const resourceUri = widget.getResourceUri();\n        if (resourceUri && filter(resourceUri)) {\n          yield [resourceUri, widget];\n        }\n      }\n    }\n  }\n}\n\nexport interface NavigatableWidgetOptions {\n  kind: 'navigatable',\n  uri: string,\n  counter?: number,\n}\n\nexport namespace NavigatableWidgetOptions {\n  export function is(arg: Object | undefined): arg is NavigatableWidgetOptions {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return !!arg && 'kind' in arg && (arg as any).kind === 'navigatable';\n  }\n}\n"]}