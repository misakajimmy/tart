{"version":3,"sources":["browser/frontend-application-config-provider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAClF,OAAO,EAAC,yBAAyB,EAAC,MAAM,qBAAqB,CAAC;AAG9D,qBAAa,iCAAiC;IAE5C,OAAO,CAAC,MAAM,CAAC,GAAG,CAA+C;IAEjE,MAAM,CAAC,GAAG,IAAI,yBAAyB;IAUvC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,yBAAyB,CAAC,OAAO,GAAG,IAAI;IAU3D,OAAO,CAAC,MAAM,CAAC,KAAK;CAOrB","file":"../../src/browser/frontend-application-config-provider.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\nimport {FrontendApplicationConfig} from './application-props';\nimport deepmerge from 'deepmerge';\n\nexport class FrontendApplicationConfigProvider {\n\n  private static KEY = Symbol('FrontendApplicationConfigProvider');\n\n  static get(): FrontendApplicationConfig {\n    const config = FrontendApplicationConfigProvider.doGet();\n    if (config === undefined) {\n      FrontendApplicationConfigProvider.set(FrontendApplicationConfig.DEFAULT);\n      return FrontendApplicationConfigProvider.doGet();\n      // throw new Error('The configuration is not set. Did you call FrontendApplicationConfigProvider#set?');\n    }\n    return config;\n  }\n\n  static set(config: FrontendApplicationConfig.Partial): void {\n    if (FrontendApplicationConfigProvider.doGet() !== undefined) {\n      throw new Error('The configuration is already set.');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const globalObject = window as any;\n    const key = FrontendApplicationConfigProvider.KEY;\n    globalObject[key] = deepmerge(FrontendApplicationConfig.DEFAULT, config);\n  }\n\n  private static doGet(): FrontendApplicationConfig | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const globalObject = window as any;\n    const key = FrontendApplicationConfigProvider.KEY;\n    return globalObject[key];\n  }\n\n}\n"]}