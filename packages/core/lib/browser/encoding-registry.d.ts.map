{"version":3,"sources":["browser/encoding-registry.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AASlF,OAAO,GAAG,MAAM,eAAe,CAAC;AAChC,OAAO,EAAC,UAAU,EAAC,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAC,eAAe,IAAI,eAAe,EAAC,MAAM,4BAA4B,CAAC;AAG9E,MAAM,WAAW,gBAAgB;IAC/B,MAAM,CAAC,EAAE,GAAG,CAAC;IACb,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,QAAQ,EAAE,MAAM,CAAC;CAClB;AAED,qBACa,gBAAgB;IAE3B,SAAS,CAAC,QAAQ,CAAC,iBAAiB,EAAE,gBAAgB,EAAE,CAAM;IAG9D,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,eAAe,CAAC;IAGhD,SAAS,CAAC,QAAQ,CAAC,eAAe,EAAE,eAAe,CAAC;IAEpD,gBAAgB,CAAC,QAAQ,EAAE,gBAAgB,GAAG,UAAU;IAUxD,sBAAsB,CAAC,QAAQ,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,MAAM,GAAG,MAAM;IAmBzE,SAAS,CAAC,mBAAmB,CAAC,QAAQ,EAAE,GAAG,GAAG,MAAM,GAAG,SAAS;CAoBjE","file":"../../src/browser/encoding-registry.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2020 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/workbench/services/textfile/browser/textFileService.ts#L491\n\nimport {inject, injectable} from 'inversify';\nimport URI from '../common/uri';\nimport {Disposable} from '../common/disposable';\nimport {CorePreferences} from './core-preferences';\nimport {EncodingService as EncodingService} from '../common/encoding-service';\nimport {UTF8} from '../common/encodings';\n\nexport interface EncodingOverride {\n  parent?: URI;\n  extension?: string;\n  scheme?: string;\n  encoding: string;\n}\n\n@injectable()\nexport class EncodingRegistry {\n\n  protected readonly encodingOverrides: EncodingOverride[] = [];\n\n  @inject(CorePreferences)\n  protected readonly preferences: CorePreferences;\n\n  @inject(EncodingService)\n  protected readonly encodingService: EncodingService;\n\n  registerOverride(override: EncodingOverride): Disposable {\n    this.encodingOverrides.push(override);\n    return Disposable.create(() => {\n      const index = this.encodingOverrides.indexOf(override);\n      if (index !== -1) {\n        this.encodingOverrides.splice(index, 1);\n      }\n    });\n  }\n\n  getEncodingForResource(resource: URI, preferredEncoding?: string): string {\n    let fileEncoding: string;\n\n    const override = this.getEncodingOverride(resource);\n    if (override) {\n      fileEncoding = override; // encoding override always wins\n    } else if (preferredEncoding) {\n      fileEncoding = preferredEncoding; // preferred encoding comes second\n    } else {\n      fileEncoding = this.preferences.get('files.encoding', undefined, resource.toString());\n    }\n\n    if (!fileEncoding || !this.encodingService.exists(fileEncoding)) {\n      return UTF8; // the default is UTF 8\n    }\n\n    return this.encodingService.toIconvEncoding(fileEncoding);\n  }\n\n  protected getEncodingOverride(resource: URI): string | undefined {\n    if (this.encodingOverrides && this.encodingOverrides.length) {\n      for (const override of this.encodingOverrides) {\n        if (override.parent && resource.isEqualOrParent(override.parent)) {\n          return override.encoding;\n        }\n\n        if (override.extension && resource.path.ext === `.${override.extension}`) {\n          return override.encoding;\n        }\n\n        if (override.scheme && override.scheme === resource.scheme) {\n          return override.encoding;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n}\n"]}