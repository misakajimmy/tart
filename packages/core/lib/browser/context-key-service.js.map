{"version":3,"sources":["browser/context-key-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;AAElF,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAAC,OAAO,EAAC,MAAM,WAAW,CAAC;AAUlC,MAAM,KAAW,UAAU,CAS1B;AATD,WAAiB,UAAU;IACzB,8DAA8D;IACjD,eAAI,GAAoB,MAAM,CAAC,MAAM,CAAC;QACjD,GAAG,EAAE,GAAG,EAAE;QACV,CAAC;QACD,KAAK,EAAE,GAAG,EAAE;QACZ,CAAC;QACD,GAAG,EAAE,GAAG,EAAE,CAAC,SAAS;KACrB,CAAC,CAAC;AACL,CAAC,EATgB,UAAU,KAAV,UAAU,QAS1B;AAOD,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAET,kBAAkB,GAAG,IAAI,OAAO,EAAyB,CAAC;IACpE,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;IAErD,SAAS,CAAI,GAAW,EAAE,YAA2B;QACnD,OAAO,UAAU,CAAC,IAAI,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAkB,EAAE,OAAqB;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,SAAS,CAAC,UAAkB;QAC1B,OAAO,IAAI,GAAG,EAAU,CAAC;IAC3B,CAAC;IAES,aAAa,CAAC,KAA4B;QAClD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;CAEF,CAAA;AA3BY,iBAAiB;IAD7B,UAAU,EAAE;GACA,iBAAiB,CA2B7B;SA3BY,iBAAiB","file":"../../src/browser/context-key-service.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {Emitter} from '../common';\n\nexport interface ContextKey<T> {\n  set(value: T | undefined): void;\n\n  reset(): void;\n\n  get(): T | undefined;\n}\n\nexport namespace ContextKey {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  export const None: ContextKey<any> = Object.freeze({\n    set: () => {\n    },\n    reset: () => {\n    },\n    get: () => undefined\n  });\n}\n\nexport interface ContextKeyChangeEvent {\n  affects(keys: Set<string>): boolean;\n}\n\n@injectable()\nexport class ContextKeyService {\n\n  protected readonly onDidChangeEmitter = new Emitter<ContextKeyChangeEvent>();\n  readonly onDidChange = this.onDidChangeEmitter.event;\n\n  createKey<T>(key: string, defaultValue: T | undefined): ContextKey<T> {\n    return ContextKey.None;\n  }\n\n  /**\n   * It should be implemented by an extension, e.g. by the monaco extension.\n   */\n  match(expression: string, context?: HTMLElement): boolean {\n    return true;\n  }\n\n  /**\n   * It should be implemented by an extension, e.g. by the monaco extension.\n   */\n  parseKeys(expression: string): Set<string> | undefined {\n    return new Set<string>();\n  }\n\n  protected fireDidChange(event: ContextKeyChangeEvent): void {\n    this.onDidChangeEmitter.fire(event);\n  }\n\n}\n"]}