{"version":3,"sources":["browser/endpoint.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,GAAG,MAAM,eAAe,CAAC;AAEhC;;GAEG;AACH,qBAAa,QAAQ;IAQf,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,OAAO;IAC5C,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;IARlD,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAY;IAC/C,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAW;IAC7C,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAS;IACzC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAU;IAC3C,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAW;gBAGtB,OAAO,GAAE,QAAQ,CAAC,OAAY,EAC9B,QAAQ,GAAE,QAAQ,CAAC,QAAwB;IAIlE,IAAI,IAAI,IAAI,MAAM,CAQjB;IAED;;;OAGG;IACH,IAAI,UAAU,IAAI,MAAM,CASvB;IAED,SAAS,KAAK,QAAQ,IAAI,MAAM,CAW/B;IAED,SAAS,KAAK,IAAI,IAAI,MAAM,CAE3B;IAED,SAAS,KAAK,QAAQ,IAAI,MAAM,CAK/B;IAED,SAAS,KAAK,IAAI,IAAI,MAAM,CAS3B;IAED,eAAe,IAAI,GAAG;IAItB,UAAU,IAAI,GAAG;IAIjB,SAAS,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,GAAG,MAAM;CAYrE;AAED,yBAAiB,QAAQ,CAAC;IACxB,MAAa,OAAO;QAClB,IAAI,CAAC,EAAE,MAAM,CAAC;QACd,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,UAAU,CAAC,EAAE,MAAM,CAAC;QACpB,IAAI,CAAC,EAAE,MAAM,CAAC;KACf;IAID,MAAa,QAAQ;QACnB,IAAI,EAAE,MAAM,CAAC;QACb,QAAQ,EAAE,MAAM,CAAC;QACjB,MAAM,EAAE,MAAM,CAAC;QACf,QAAQ,EAAE,MAAM,CAAC;KAClB;CACF","file":"../../src/browser/endpoint.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport URI from '../common/uri';\n\n/**\n * An endpoint provides URLs for http and ws, based on configuration and defaults.\n */\nexport class Endpoint {\n  static readonly PROTO_HTTPS: string = 'https:';\n  static readonly PROTO_HTTP: string = 'http:';\n  static readonly PROTO_WS: string = 'ws:';\n  static readonly PROTO_WSS: string = 'wss:';\n  static readonly PROTO_FILE: string = 'file:';\n\n  constructor(\n      protected readonly options: Endpoint.Options = {},\n      protected readonly location: Endpoint.Location = self.location\n  ) {\n  }\n\n  get host(): string {\n    if (this.options.host) {\n      return this.options.host;\n    }\n    if (this.location.host) {\n      return this.location.host;\n    }\n    return 'localhost:' + this.port;\n  }\n\n  /**\n   * The HTTP/HTTPS scheme of the endpoint, or the user defined one.\n   * See: `Endpoint.Options.httpScheme`.\n   */\n  get httpScheme(): string {\n    if (this.options.httpScheme) {\n      return this.options.httpScheme;\n    }\n    if (this.location.protocol === Endpoint.PROTO_HTTP ||\n        this.location.protocol === Endpoint.PROTO_HTTPS) {\n      return this.location.protocol;\n    }\n    return Endpoint.PROTO_HTTP;\n  }\n\n  protected get pathname(): string {\n    if (this.location.protocol === Endpoint.PROTO_FILE) {\n      return '';\n    }\n    if (this.location.pathname === '/') {\n      return '';\n    }\n    if (this.location.pathname.endsWith('/')) {\n      return this.location.pathname.substr(0, this.location.pathname.length - 1);\n    }\n    return this.location.pathname;\n  }\n\n  protected get port(): string {\n    return this.getSearchParam('port', '3000');\n  }\n\n  protected get wsScheme(): string {\n    if (this.options.wsScheme) {\n      return this.options.wsScheme;\n    }\n    return this.httpScheme === Endpoint.PROTO_HTTPS ? Endpoint.PROTO_WSS : Endpoint.PROTO_WS;\n  }\n\n  protected get path(): string {\n    if (this.options.path) {\n      if (this.options.path.startsWith('/')) {\n        return this.options.path;\n      } else {\n        return '/' + this.options.path;\n      }\n    }\n    return this.options.path || '';\n  }\n\n  getWebSocketUrl(): URI {\n    return new URI(`${this.wsScheme}//${this.host}${this.pathname}${this.path}`);\n  }\n\n  getRestUrl(): URI {\n    return new URI(`${this.httpScheme}//${this.host}${this.pathname}${this.path}`);\n  }\n\n  protected getSearchParam(name: string, defaultValue: string): string {\n    const search = this.location.search;\n    if (!search) {\n      return defaultValue;\n    }\n    return search.substr(1).split('&')\n        .filter(value => value.startsWith(name + '='))\n        .map(value => {\n          const encoded = value.substr(name.length + 1);\n          return decodeURIComponent(encoded);\n        })[0] || defaultValue;\n  }\n}\n\nexport namespace Endpoint {\n  export class Options {\n    host?: string;\n    wsScheme?: string;\n    httpScheme?: string;\n    path?: string;\n  }\n\n  // Necessary for running tests with dependency on TS lib on node\n  // FIXME figure out how to mock with ts-node\n  export class Location {\n    host: string;\n    pathname: string;\n    search: string;\n    protocol: string;\n  }\n}\n"]}