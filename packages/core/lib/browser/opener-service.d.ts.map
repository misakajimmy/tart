{"version":3,"sources":["browser/opener-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,GAAG,MAAM,eAAe,CAAC;AAChC,OAAO,EAAC,oBAAoB,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAiB,MAAM,WAAW,CAAC;AAEzG,MAAM,WAAW,aAAa;CAC7B;AAED,eAAO,MAAM,WAAW,eAAwB,CAAC;AAEjD;;GAEG;AACH,MAAM,WAAW,WAAW;IAC1B;;OAEG;IACH,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC;IACpB;;OAEG;IACH,QAAQ,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC;IACxB;;OAEG;IACH,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC;IAE5B;;;;;;OAMG;IACH,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,aAAa,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IAEnE;;;;OAIG;IACH,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,aAAa,GAAG,YAAY,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC;CAC3E;AAED,eAAO,MAAM,aAAa,eAA0B,CAAC;AAErD;;GAEG;AACH,MAAM,WAAW,aAAa;IAC5B;;OAEG;IACH,kBAAkB,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;IAEjC;;;OAGG;IACH,UAAU,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;IAErC;;;;OAIG;IACH,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,aAAa,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;IAEtE;;;OAGG;IACH,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,aAAa,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;IAEnE;;OAEG;IACH,UAAU,CAAC,CAAC,WAAW,EAAE,WAAW,GAAG,UAAU,CAAC;CACnD;AAED,wBAAsB,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,aAAa,GAAG,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC,CAGvH;AAED,qBACa,oBAAqB,YAAW,aAAa;IASpD,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,WAAW,CAAC;IAP1E,SAAS,CAAC,QAAQ,CAAC,wBAAwB,EAAE,WAAW,EAAE,CAAM;IAEhE,SAAS,CAAC,QAAQ,CAAC,yBAAyB,gBAAuB;IACnE,QAAQ,CAAC,kBAAkB,cAAwC;gBAI5C,gBAAgB,EAAE,oBAAoB,CAAC,WAAW,CAAC;IAI1E,UAAU,CAAC,WAAW,EAAE,WAAW,GAAG,UAAU;IAU1C,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,aAAa,GAAG,OAAO,CAAC,WAAW,CAAC;IAQlE,UAAU,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,aAAa,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;cAI5D,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,aAAa,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;IAWrF,SAAS,CAAC,WAAW,IAAI,WAAW,EAAE;CAOvC","file":"../../src/browser/opener-service.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, named} from 'inversify';\nimport URI from '../common/uri';\nimport {ContributionProvider, Disposable, Emitter, Event, MaybePromise, Prioritizeable} from '../common';\n\nexport interface OpenerOptions {\n}\n\nexport const OpenHandler = Symbol('OpenHandler');\n\n/**\n * `OpenHandler` should be implemented to provide a new opener.\n */\nexport interface OpenHandler {\n  /**\n   * A unique id of this handler.\n   */\n  readonly id: string;\n  /**\n   * A human-readable name of this handler.\n   */\n  readonly label?: string;\n  /**\n   * A css icon class of this handler.\n   */\n  readonly iconClass?: string;\n\n  /**\n   * Test whether this handler can open the given URI for given options.\n   * Return a nonzero number if this handler can open; otherwise it cannot.\n   * Never reject.\n   *\n   * A returned value indicating a priority of this handler.\n   */\n  canHandle(uri: URI, options?: OpenerOptions): MaybePromise<number>;\n\n  /**\n   * Open a widget for the given URI and options.\n   * Resolve to an opened widget or undefined, e.g. if a page is opened.\n   * Never reject if `canHandle` return a positive number; otherwise should reject.\n   */\n  open(uri: URI, options?: OpenerOptions): MaybePromise<object | undefined>;\n}\n\nexport const OpenerService = Symbol('OpenerService');\n\n/**\n * `OpenerService` provide an access to existing openers.\n */\nexport interface OpenerService {\n  /**\n   * Event that fires when a new opener is added or removed.\n   */\n  onDidChangeOpeners?: Event<void>;\n\n  /**\n   * Return all registered openers.\n   * Never reject.\n   */\n  getOpeners(): Promise<OpenHandler[]>;\n\n  /**\n   * Return all openers able to open the given URI for given options\n   * ordered according their priority.\n   * Never reject.\n   */\n  getOpeners(uri: URI, options?: OpenerOptions): Promise<OpenHandler[]>;\n\n  /**\n   * Return an opener with the higher priority for the given URI.\n   * Reject if such does not exist.\n   */\n  getOpener(uri: URI, options?: OpenerOptions): Promise<OpenHandler>;\n\n  /**\n   * Add open handler i.e. for custom editors\n   */\n  addHandler?(openHandler: OpenHandler): Disposable;\n}\n\nexport async function open(openerService: OpenerService, uri: URI, options?: OpenerOptions): Promise<object | undefined> {\n  const opener = await openerService.getOpener(uri, options);\n  return opener.open(uri, options);\n}\n\n@injectable()\nexport class DefaultOpenerService implements OpenerService {\n  // Collection of open-handlers for custom-editor contributions.\n  protected readonly customEditorOpenHandlers: OpenHandler[] = [];\n\n  protected readonly onDidChangeOpenersEmitter = new Emitter<void>();\n  readonly onDidChangeOpeners = this.onDidChangeOpenersEmitter.event;\n\n  constructor(\n      @inject(ContributionProvider) @named(OpenHandler)\n      protected readonly handlersProvider: ContributionProvider<OpenHandler>\n  ) {\n  }\n\n  addHandler(openHandler: OpenHandler): Disposable {\n    this.customEditorOpenHandlers.push(openHandler);\n    this.onDidChangeOpenersEmitter.fire();\n\n    return Disposable.create(() => {\n      this.customEditorOpenHandlers.splice(this.customEditorOpenHandlers.indexOf(openHandler), 1);\n      this.onDidChangeOpenersEmitter.fire();\n    });\n  }\n\n  async getOpener(uri: URI, options?: OpenerOptions): Promise<OpenHandler> {\n    const handlers = await this.prioritize(uri, options);\n    if (handlers.length >= 1) {\n      return handlers[0];\n    }\n    return Promise.reject(new Error(`There is no opener for ${uri}.`));\n  }\n\n  async getOpeners(uri?: URI, options?: OpenerOptions): Promise<OpenHandler[]> {\n    return uri ? this.prioritize(uri, options) : this.getHandlers();\n  }\n\n  protected async prioritize(uri: URI, options?: OpenerOptions): Promise<OpenHandler[]> {\n    const prioritized = await Prioritizeable.prioritizeAll(this.getHandlers(), async handler => {\n      try {\n        return await handler.canHandle(uri, options);\n      } catch {\n        return 0;\n      }\n    });\n    return prioritized.map(p => p.value);\n  }\n\n  protected getHandlers(): OpenHandler[] {\n    return [\n      ...this.handlersProvider.getContributions(),\n      ...this.customEditorOpenHandlers\n    ];\n  }\n\n}\n"]}