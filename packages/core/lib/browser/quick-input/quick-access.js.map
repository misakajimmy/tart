{"version":3,"sources":["browser/quick-input/quick-access.ts"],"names":[],"mappings":";;;;;;AAEA,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAErC,MAAM,CAAC,MAAM,uBAAuB,GAAG,MAAM,CAAC,yBAAyB,CAAC,CAAC;AA+CzE,MAAM,CAAC,MAAM,mBAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAgBjE,IAAa,0BAA0B,GAAvC,MAAa,0BAA0B;IACrC,KAAK;IACL,CAAC;IAED,sBAAsB,CAAC,MAAc;QACnC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,uBAAuB;QACrB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,2BAA2B,CAAC,QAAuC;QACjE,OAAO,SAAS,CAAC;IACnB,CAAC;CAEF,CAAA;AAhBY,0BAA0B;IADtC,UAAU,EAAE;GACA,0BAA0B,CAgBtC;SAhBY,0BAA0B","file":"../../../src/browser/quick-input/quick-access.js","sourcesContent":["import {CancellationToken, Disposable} from '../../common';\nimport {QuickPicks} from '../../common/quick-pick-service';\nimport {injectable} from 'inversify';\n\nexport const QuickAccessContribution = Symbol('QuickAccessContribution');\n\n/**\n * Bind this contribution in order to register quick access providers with the\n * QuickAccessRegistry at startup\n */\nexport interface QuickAccessContribution {\n  registerQuickAccessProvider(): void;\n}\n\nexport interface QuickAccessProvider {\n  getPicks(filter: string, token: CancellationToken): QuickPicks | Promise<QuickPicks>;\n\n  reset?(): void;\n}\n\nexport interface QuickAccessProviderHelp {\n  prefix?: string;\n  description: string;\n  needsEditor: boolean;\n}\n\nexport interface QuickAccessProviderDescriptor {\n  /**\n   * return an instance of QuickAccessProvider. Implementers are free to return that same instance multiple times\n   */\n  readonly getInstance: () => QuickAccessProvider;\n  /**\n   * The prefix for quick access picker to use the provider for.\n   */\n  readonly prefix: string;\n  /**\n   * A placeholder to use for the input field when the provider is active.\n   * This will also be read out by screen readers and thus helps for\n   * accessibility.\n   */\n  readonly placeholder?: string;\n  /**\n   * Help entries for this quick access provider\n   */\n  readonly helpEntries: QuickAccessProviderHelp[];\n  /**\n   * A context key that will be set automatically when this quick access is being shown\n   */\n  readonly contextKey?: string;\n}\n\nexport const QuickAccessRegistry = Symbol('QuickAccessRegistry');\n\n/**\n * A registry for quick access providers.\n */\nexport interface QuickAccessRegistry {\n  registerQuickAccessProvider(provider: QuickAccessProviderDescriptor): Disposable;\n\n  getQuickAccessProviders(): QuickAccessProviderDescriptor[];\n\n  getQuickAccessProvider(prefix: string): QuickAccessProviderDescriptor | undefined;\n\n  clear(): void;\n}\n\n@injectable()\nexport class DefaultQuickAccessRegistry implements QuickAccessRegistry {\n  clear(): void {\n  }\n\n  getQuickAccessProvider(prefix: string): QuickAccessProviderDescriptor | undefined {\n    return undefined;\n  }\n\n  getQuickAccessProviders(): QuickAccessProviderDescriptor[] {\n    return [];\n  }\n\n  registerQuickAccessProvider(provider: QuickAccessProviderDescriptor): Disposable {\n    return undefined;\n  }\n\n}\n"]}