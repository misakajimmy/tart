{"version":3,"sources":["browser/quick-input/quick-command-service.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAoB,OAAO,EAAE,eAAe,EAAE,UAAU,EAAC,MAAM,cAAc,CAAC;AACrF,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,WAAW,CAAC;AAE7C,OAAO,EAAC,iBAAiB,EAAC,MAAM,wBAAwB,CAAC;AACzD,OAAO,EAAC,eAAe,EAAC,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAC,kBAAkB,EAAC,MAAM,eAAe,CAAC;AACjD,OAAO,EAAC,WAAW,EAA4B,MAAM,iCAAiC,CAAC;AAEvF,OAAO,EAAC,YAAY,EAAC,MAAM,YAAY,CAAC;AAExC,MAAM,CAAC,MAAM,YAAY,GAAY;IACnC,EAAE,EAAE,+BAA+B;CACpC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,OAAO,CAAC,yBAAyB,CAAC;IACrE,EAAE,EAAE,uBAAuB;IAC3B,KAAK,EAAE,uBAAuB;CAC/B,CAAC,CAAC;AAIH,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAC9B,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC;IACpB,+EAA+E;IACtE,gBAAgB,GAAc;QACrC,qBAAqB;KACtB,CAAC;IAEiB,iBAAiB,CAAoB;IAErC,eAAe,CAAkB;IAEjC,eAAe,CAAkB;IACpD,+BAA+B;IAC/B,+DAA+D;IAE5C,kBAAkB,CAAqB;IACvC,QAAQ,GAAG,IAAI,GAAG,EAAoB,CAAC;IAClD,WAAW,GAAoB,EAAE,CAAC;IAClC,UAAU,GAAoB,EAAE,CAAC;IAEzC,2BAA2B;QACzB,yDAAyD;QACzD,6BAA6B;QAC7B,wCAAwC;QACxC,qBAAqB;QACrB,sEAAsE;QACtE,MAAM;IACR,CAAC;IAED,KAAK;QACH,MAAM,EAAC,MAAM,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,QAAQ,CAAC,MAAc,EAAE,KAAwB;QAC/C,MAAM,KAAK,GAAe,EAAE,CAAC;QAE7B,kEAAkE;QAClE,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,MAAM,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;QAClE,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;QAEhE,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1B,KAAK,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,eAAe,EAAC,EAAE,GAAG,WAAW,CAAC,CAAC;SACzE;QAED,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACzB,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC1B,KAAK,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,gBAAgB,EAAC,CAAC,CAAC;aAC1D;YACD,KAAK,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC;SAC3B;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,kBAAkB,CAAC,SAAiB,EAAE,IAAY;QAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACpD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACvC,OAAO,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE;YAC5B,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBAChB,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aAC3B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACO,gBAAgB,CAAC,GAAc;QACvC,MAAM,KAAK,GAAc,EAAE,CAAC;QAC5B,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACpB,IAAI,OAAO,CAAC,KAAK,EAAE;gBACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC/C,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE;oBAC1E,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACrB;aACF;QACH,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;OAIG;IACO,WAAW;QAEnB,mCAAmC;QACnC,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;QAEnD,sCAAsC;QACtC,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAEzE,6BAA6B;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,kCAAkC,CAAC,CAAC;QAEvE,qCAAqC;QACrC,IAAI,SAAS,GAAc,EAAE,CAAC;QAC9B,IAAI,KAAK,GAAG,CAAC,EAAE;YACb,SAAS,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CACxC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtD,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAC/C,CAAC;YACF,IAAI,SAAS,CAAC,MAAM,GAAG,KAAK,EAAE;gBAC5B,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;aACvC;SACF;QAED,oCAAoC;QACpC,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEtF,yCAAyC;QACzC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAEzC,kDAAkD;QAClD,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CACnB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAC5B,CAAC;QAEF,OAAO,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC;IACzB,CAAC;IAEO,MAAM,CAAC,OAAgB;QAC7B,MAAM,KAAK,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,QAAQ,IAAI,GAAG,OAAO,CAAC,KAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAM,CAAC;QAC7F,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,aAA4B,CAAC;QAEnE,MAAM,aAAa,GAAG,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,KAAM,CAAC;QAC9D,MAAM,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,QAAQ,CAAC;QACtE,IAAI,MAAM,GAAuB,gBAAgB,CAAC,CAAC,CAAC,GAAG,gBAAgB,KAAK,aAAa,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC;QAC5G,IAAI,KAAK,KAAK,MAAM,EAAE;YACpB,MAAM,GAAG,SAAS,CAAC;SACpB;QAED,OAAO;YACL,KAAK;YACL,MAAM;YACN,WAAW;YACX,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC;YAC/D,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;YACxC,OAAO,EAAE,GAAG,EAAE;gBACZ,aAAa,CAAC,KAAK,CAAC,EAAC,aAAa,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC3C,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAChD,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YACjD,CAAC;SACF,CAAC;IACJ,CAAC;IAEO,aAAa,CAAC,OAAgB;QACpC,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACjF,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5C,OAAO,SAAS,CAAC;SAClB;QAED,IAAI;YACF,OAAO,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAClE;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IAEO,kBAAkB,CAAC,OAAgB;QACzC,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC1E,IAAI,cAAc,EAAE;YAClB,OAAO,YAAY,CAAC,OAAO,CAAC,CAAC;SAC9B;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;;;OAMG;IACK,SAAS,CAAC,QAAmB;QACnC,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAU,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACpI,CAAC;IAED;;;;;OAKG;IACK,IAAI,CAAC,QAAmB;QAC9B,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAU,EAAE,CAAU,EAAE,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;CACF,CAAA;AA/LC;IADC,MAAM,CAAC,iBAAiB,CAAC;8DAC8B;AAExD;IADC,MAAM,CAAC,eAAe,CAAC;4DAC4B;AAEpD;IADC,MAAM,CAAC,eAAe,CAAC;4DAC4B;AAIpD;IADC,MAAM,CAAC,kBAAkB,CAAC;+DAC+B;AAf/C,mBAAmB;IAD/B,UAAU,EAAE;GACA,mBAAmB,CAsM/B;SAtMY,mBAAmB","file":"../../../src/browser/quick-input/quick-command-service.js","sourcesContent":["import {CancellationToken, Command, CommandRegistry, Disposable} from '../../common';\nimport {inject, injectable} from 'inversify';\nimport {QuickAccessContribution, QuickAccessProvider} from './quick-access';\nimport {ContextKeyService} from '../context-key-service';\nimport {CorePreferences} from '../core-preferences';\nimport {KeybindingRegistry} from '../keybinding';\nimport {filterItems, QuickPickItem, QuickPicks} from '../../common/quick-pick-service';\nimport {KeySequence} from '../keyboard';\nimport {codiconArray} from '../widgets';\n\nexport const quickCommand: Command = {\n  id: 'workbench.action.showCommands'\n};\n\nexport const CLEAR_COMMAND_HISTORY = Command.toDefaultLocalizedCommand({\n  id: 'clear.command.history',\n  label: 'Clear Command History'\n});\n\n\n@injectable()\nexport class QuickCommandService implements QuickAccessContribution, QuickAccessProvider {\n  static PREFIX = '>';\n  // The list of exempted commands not to be displayed in the recently used list.\n  readonly exemptedCommands: Command[] = [\n    CLEAR_COMMAND_HISTORY,\n  ];\n  @inject(ContextKeyService)\n  protected readonly contextKeyService: ContextKeyService;\n  @inject(CommandRegistry)\n  protected readonly commandRegistry: CommandRegistry;\n  @inject(CorePreferences)\n  protected readonly corePreferences: CorePreferences;\n  // @inject(QuickAccessRegistry)\n  // protected readonly quickAccessRegistry: QuickAccessRegistry;\n  @inject(KeybindingRegistry)\n  protected readonly keybindingRegistry: KeybindingRegistry;\n  protected readonly contexts = new Map<string, string[]>();\n  private recentItems: QuickPickItem[] = [];\n  private otherItems: QuickPickItem[] = [];\n\n  registerQuickAccessProvider(): void {\n    // this.quickAccessRegistry.registerQuickAccessProvider({\n    //   getInstance: () => this,\n    //   prefix: QuickCommandService.PREFIX,\n    //   placeholder: '',\n    //   helpEntries: [{description: 'Quick Command', needsEditor: false}]\n    // });\n  }\n\n  reset(): void {\n    const {recent, other} = this.getCommands();\n    this.recentItems = [];\n    this.otherItems = [];\n    this.recentItems.push(...recent.map(command => this.toItem(command)));\n    this.otherItems.push(...other.map(command => this.toItem(command)));\n  }\n\n  getPicks(filter: string, token: CancellationToken): QuickPicks {\n    const items: QuickPicks = [];\n\n    // Update the list of commands by fetching them from the registry.\n    this.reset();\n    const recentItems = filterItems(this.recentItems.slice(), filter);\n    const otherItems = filterItems(this.otherItems.slice(), filter);\n\n    if (recentItems.length > 0) {\n      items.push({type: 'separator', label: 'recently used'}, ...recentItems);\n    }\n\n    if (otherItems.length > 0) {\n      if (recentItems.length > 0) {\n        items.push({type: 'separator', label: 'other commands'});\n      }\n      items.push(...otherItems);\n    }\n    return items;\n  }\n\n  pushCommandContext(commandId: string, when: string): Disposable {\n    const contexts = this.contexts.get(commandId) || [];\n    contexts.push(when);\n    this.contexts.set(commandId, contexts);\n    return Disposable.create(() => {\n      const index = contexts.indexOf(when);\n      if (index !== -1) {\n        contexts.splice(index, 1);\n      }\n    });\n  }\n\n  /**\n   * Get the list of valid commands.\n   *\n   * @param commands the list of raw commands.\n   * @returns the list of valid commands.\n   */\n  protected getValidCommands(raw: Command[]): Command[] {\n    const valid: Command[] = [];\n    raw.forEach(command => {\n      if (command.label) {\n        const contexts = this.contexts.get(command.id);\n        if (!contexts || contexts.some(when => this.contextKeyService.match(when))) {\n          valid.push(command);\n        }\n      }\n    });\n    return valid;\n  }\n\n  /**\n   * Get the list of recently used and other commands.\n   *\n   * @returns the list of recently used commands and other commands.\n   */\n  protected getCommands(): { recent: Command[], other: Command[] } {\n\n    // Get the list of recent commands.\n    const recentCommands = this.commandRegistry.recent;\n\n    // Get the list of all valid commands.\n    const allCommands = this.getValidCommands(this.commandRegistry.commands);\n\n    // Get the max history limit.\n    const limit = this.corePreferences['workbench.commandPalette.history'];\n\n    // Build the list of recent commands.\n    let rCommands: Command[] = [];\n    if (limit > 0) {\n      rCommands.push(...recentCommands.filter(r =>\n          !this.exemptedCommands.some(c => Command.equals(r, c)) &&\n          allCommands.some(c => Command.equals(r, c)))\n      );\n      if (rCommands.length > limit) {\n        rCommands = rCommands.slice(0, limit);\n      }\n    }\n\n    // Build the list of other commands.\n    const oCommands = allCommands.filter(c => !rCommands.some(r => Command.equals(r, c)));\n\n    // Normalize the list of recent commands.\n    const recent = this.normalize(rCommands);\n\n    // Normalize, and sort the list of other commands.\n    const other = this.sort(\n        this.normalize(oCommands)\n    );\n\n    return {recent, other};\n  }\n\n  private toItem(command: Command): QuickPickItem {\n    const label = (command.category) ? `${command.category}: ` + command.label! : command.label!;\n    const iconClasses = this.getItemIconClasses(command);\n    const activeElement = window.document.activeElement as HTMLElement;\n\n    const originalLabel = command.originalLabel || command.label!;\n    const originalCategory = command.originalCategory || command.category;\n    let detail: string | undefined = originalCategory ? `${originalCategory}: ${originalLabel}` : originalLabel;\n    if (label === detail) {\n      detail = undefined;\n    }\n\n    return {\n      label,\n      detail,\n      iconClasses,\n      alwaysShow: !!this.commandRegistry.getActiveHandler(command.id),\n      keySequence: this.getKeybinding(command),\n      execute: () => {\n        activeElement.focus({preventScroll: true});\n        this.commandRegistry.executeCommand(command.id);\n        this.commandRegistry.addRecentCommand(command);\n      }\n    };\n  }\n\n  private getKeybinding(command: Command): KeySequence | undefined {\n    const keybindings = this.keybindingRegistry.getKeybindingsForCommand(command.id);\n    if (!keybindings || keybindings.length === 0) {\n      return undefined;\n    }\n\n    try {\n      return this.keybindingRegistry.resolveKeybinding(keybindings[0]);\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  private getItemIconClasses(command: Command): string[] | undefined {\n    const toggledHandler = this.commandRegistry.getToggledHandler(command.id);\n    if (toggledHandler) {\n      return codiconArray('check');\n    }\n    return undefined;\n  }\n\n  /**\n   * Normalizes a list of commands.\n   * Normalization includes obtaining commands that have labels, are visible, and are enabled.\n   *\n   * @param commands the list of commands.\n   * @returns the list of normalized commands.\n   */\n  private normalize(commands: Command[]): Command[] {\n    return commands.filter((a: Command) => a.label && (this.commandRegistry.isVisible(a.id) && this.commandRegistry.isEnabled(a.id)));\n  }\n\n  /**\n   * Sorts a list of commands alphabetically.\n   *\n   * @param commands the list of commands.\n   * @returns the list of sorted commands.\n   */\n  private sort(commands: Command[]): Command[] {\n    return commands.sort((a: Command, b: Command) => Command.compareCommands(a, b));\n  }\n}\n"]}