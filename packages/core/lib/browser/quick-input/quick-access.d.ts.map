{"version":3,"sources":["browser/quick-input/quick-access.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,iBAAiB,EAAE,UAAU,EAAC,MAAM,cAAc,CAAC;AAC3D,OAAO,EAAC,UAAU,EAAC,MAAM,iCAAiC,CAAC;AAG3D,eAAO,MAAM,uBAAuB,eAAoC,CAAC;AAEzE;;;GAGG;AACH,MAAM,WAAW,uBAAuB;IACtC,2BAA2B,IAAI,IAAI,CAAC;CACrC;AAED,MAAM,WAAW,mBAAmB;IAClC,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,iBAAiB,GAAG,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;IAErF,KAAK,CAAC,IAAI,IAAI,CAAC;CAChB;AAED,MAAM,WAAW,uBAAuB;IACtC,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,WAAW,EAAE,MAAM,CAAC;IACpB,WAAW,EAAE,OAAO,CAAC;CACtB;AAED,MAAM,WAAW,6BAA6B;IAC5C;;OAEG;IACH,QAAQ,CAAC,WAAW,EAAE,MAAM,mBAAmB,CAAC;IAChD;;OAEG;IACH,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC;IACxB;;;;OAIG;IACH,QAAQ,CAAC,WAAW,CAAC,EAAE,MAAM,CAAC;IAC9B;;OAEG;IACH,QAAQ,CAAC,WAAW,EAAE,uBAAuB,EAAE,CAAC;IAChD;;OAEG;IACH,QAAQ,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC;CAC9B;AAED,eAAO,MAAM,mBAAmB,eAAgC,CAAC;AAEjE;;GAEG;AACH,MAAM,WAAW,mBAAmB;IAClC,2BAA2B,CAAC,QAAQ,EAAE,6BAA6B,GAAG,UAAU,CAAC;IAEjF,uBAAuB,IAAI,6BAA6B,EAAE,CAAC;IAE3D,sBAAsB,CAAC,MAAM,EAAE,MAAM,GAAG,6BAA6B,GAAG,SAAS,CAAC;IAElF,KAAK,IAAI,IAAI,CAAC;CACf;AAED,qBACa,0BAA2B,YAAW,mBAAmB;IACpE,KAAK,IAAI,IAAI;IAGb,sBAAsB,CAAC,MAAM,EAAE,MAAM,GAAG,6BAA6B,GAAG,SAAS;IAIjF,uBAAuB,IAAI,6BAA6B,EAAE;IAI1D,2BAA2B,CAAC,QAAQ,EAAE,6BAA6B,GAAG,UAAU;CAIjF","file":"../../../src/browser/quick-input/quick-access.d.ts","sourcesContent":["import {CancellationToken, Disposable} from '../../common';\nimport {QuickPicks} from '../../common/quick-pick-service';\nimport {injectable} from 'inversify';\n\nexport const QuickAccessContribution = Symbol('QuickAccessContribution');\n\n/**\n * Bind this contribution in order to register quick access providers with the\n * QuickAccessRegistry at startup\n */\nexport interface QuickAccessContribution {\n  registerQuickAccessProvider(): void;\n}\n\nexport interface QuickAccessProvider {\n  getPicks(filter: string, token: CancellationToken): QuickPicks | Promise<QuickPicks>;\n\n  reset?(): void;\n}\n\nexport interface QuickAccessProviderHelp {\n  prefix?: string;\n  description: string;\n  needsEditor: boolean;\n}\n\nexport interface QuickAccessProviderDescriptor {\n  /**\n   * return an instance of QuickAccessProvider. Implementers are free to return that same instance multiple times\n   */\n  readonly getInstance: () => QuickAccessProvider;\n  /**\n   * The prefix for quick access picker to use the provider for.\n   */\n  readonly prefix: string;\n  /**\n   * A placeholder to use for the input field when the provider is active.\n   * This will also be read out by screen readers and thus helps for\n   * accessibility.\n   */\n  readonly placeholder?: string;\n  /**\n   * Help entries for this quick access provider\n   */\n  readonly helpEntries: QuickAccessProviderHelp[];\n  /**\n   * A context key that will be set automatically when this quick access is being shown\n   */\n  readonly contextKey?: string;\n}\n\nexport const QuickAccessRegistry = Symbol('QuickAccessRegistry');\n\n/**\n * A registry for quick access providers.\n */\nexport interface QuickAccessRegistry {\n  registerQuickAccessProvider(provider: QuickAccessProviderDescriptor): Disposable;\n\n  getQuickAccessProviders(): QuickAccessProviderDescriptor[];\n\n  getQuickAccessProvider(prefix: string): QuickAccessProviderDescriptor | undefined;\n\n  clear(): void;\n}\n\n@injectable()\nexport class DefaultQuickAccessRegistry implements QuickAccessRegistry {\n  clear(): void {\n  }\n\n  getQuickAccessProvider(prefix: string): QuickAccessProviderDescriptor | undefined {\n    return undefined;\n  }\n\n  getQuickAccessProviders(): QuickAccessProviderDescriptor[] {\n    return [];\n  }\n\n  registerQuickAccessProvider(provider: QuickAccessProviderDescriptor): Disposable {\n    return undefined;\n  }\n\n}\n"]}