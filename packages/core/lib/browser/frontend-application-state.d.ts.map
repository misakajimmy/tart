{"version":3,"sources":["browser/frontend-application-state.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,OAAO,EAAE,KAAK,EAAC,MAAM,WAAW,CAAC;AACzC,OAAO,EAAC,QAAQ,EAAC,MAAM,wBAAwB,CAAC;AAGhD,oBAAY,wBAAwB,GAChC,MAAM,GACJ,uBAAuB,GACvB,gBAAgB,GAChB,oBAAoB,GACpB,OAAO,GACP,gBAAgB,CAAC;AAEvB,qBACa,+BAA+B;IAK1C,SAAS,CAAC,QAAQ,EAAE;QAAE,CAAC,KAAK,EAAE,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAA;KAAE,CAAM;IAC7D,SAAS,CAAC,QAAQ,CAAC,YAAY,oCAA2C;IAE1E,OAAO,CAAC,MAAM,CAAoC;IAElD,IAAI,KAAK,IAAI,wBAAwB,CAEpC;IAED,IAAI,KAAK,CAAC,KAAK,EAAE,wBAAwB,EAcxC;IAED,IAAI,cAAc,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAEpD;IAED,YAAY,CAAC,KAAK,EAAE,wBAAwB,GAAG,OAAO,CAAC,IAAI,CAAC;IAO5D,eAAe,CAAC,GAAG,MAAM,EAAE,wBAAwB,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;CAItE","file":"../../src/browser/frontend-application-state.d.ts","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2018 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {injectable} from 'inversify';\r\nimport {Emitter, Event} from '../common';\r\nimport {Deferred} from '../common/promise-util';\r\n// import { ILogger } from '../common/logger';\r\n\r\nexport type FrontendApplicationState =\r\n    'init'\r\n    | 'started_contributions'\r\n    | 'attached_shell'\r\n    | 'initialized_layout'\r\n    | 'ready'\r\n    | 'closing_window';\r\n\r\n@injectable()\r\nexport class FrontendApplicationStateService {\r\n\r\n  // @inject(ILogger)\r\n  // protected readonly logger: ILogger;\r\n\r\n  protected deferred: { [state: string]: Deferred<void> } = {};\r\n  protected readonly stateChanged = new Emitter<FrontendApplicationState>();\r\n\r\n  private _state: FrontendApplicationState = 'init';\r\n\r\n  get state(): FrontendApplicationState {\r\n    return this._state;\r\n  }\r\n\r\n  set state(state: FrontendApplicationState) {\r\n    if (state !== this._state) {\r\n      if (this.deferred[this._state] === undefined) {\r\n        this.deferred[this._state] = new Deferred();\r\n      }\r\n      const oldState = this._state;\r\n      this._state = state;\r\n      if (this.deferred[state] === undefined) {\r\n        this.deferred[state] = new Deferred();\r\n      }\r\n      this.deferred[state].resolve();\r\n      // this.logger.info(`Changed application state from '${oldState}' to '${this._state}'.`);\r\n      this.stateChanged.fire(state);\r\n    }\r\n  }\r\n\r\n  get onStateChanged(): Event<FrontendApplicationState> {\r\n    return this.stateChanged.event;\r\n  }\r\n\r\n  reachedState(state: FrontendApplicationState): Promise<void> {\r\n    if (this.deferred[state] === undefined) {\r\n      this.deferred[state] = new Deferred();\r\n    }\r\n    return this.deferred[state].promise;\r\n  }\r\n\r\n  reachedAnyState(...states: FrontendApplicationState[]): Promise<void> {\r\n    return Promise.race(states.map(s => this.reachedState(s)));\r\n  }\r\n\r\n}\r\n"]}