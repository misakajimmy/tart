{"version":3,"sources":["browser/dialogs.ts"],"names":[],"mappings":"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","file":"../../src/browser/dialogs.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable} from 'inversify';\nimport {CancellationTokenSource, Disposable, MaybePromise} from '../common';\nimport {Key} from './keyboard/keys';\nimport {addKeyListener, BaseWidget, codiconArray, Message, Widget} from './widgets';\nimport {FrontendApplicationContribution} from './frontend-application';\nimport {nls} from '../common/nls';\n\n@injectable()\nexport class DialogProps {\n  readonly title: string;\n  /**\n   * Determines the maximum width of the dialog in pixels.\n   * Default value is undefined, which would result in the css property 'max-width: none' being applied to the dialog.\n   */\n  maxWidth?: number;\n  /**\n   * Determine the word wrapping behavior for content in the dialog.\n   * - `normal`: breaks words at allowed break points.\n   * - `break-word`: breaks otherwise unbreakable words.\n   * - `initial`: sets the property to it's default value.\n   * - `inherit`: inherit this property from it's parent element.\n   * Default value is undefined, which would result in the css property 'word-wrap' not being applied to the dialog.\n   */\n  wordWrap?: 'normal' | 'break-word' | 'initial' | 'inherit';\n}\n\nexport type DialogMode = 'open' | 'preview';\n\nexport type DialogError = string | boolean | {\n  message: string\n  result: boolean\n};\nexport namespace DialogError {\n  export function getResult(error: DialogError): boolean {\n    if (typeof error === 'string') {\n      return !error.length;\n    }\n    if (typeof error === 'boolean') {\n      return error;\n    }\n    return error.result;\n  }\n\n  export function getMessage(error: DialogError): string {\n    if (typeof error === 'string') {\n      return error;\n    }\n    if (typeof error === 'boolean') {\n      return '';\n    }\n    return error.message;\n  }\n}\n\nexport namespace Dialog {\n  export const YES = nls.localizeByDefault('Yes');\n  export const NO = nls.localizeByDefault('No');\n  export const OK = nls.localizeByDefault('OK');\n  export const CANCEL = nls.localizeByDefault('Cancel');\n}\n\n@injectable()\nexport class DialogOverlayService implements FrontendApplicationContribution {\n\n  protected static INSTANCE: DialogOverlayService;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected readonly dialogs: AbstractDialog<any>[] = [];\n\n  constructor() {\n    addKeyListener(document.body, Key.ENTER, e => this.handleEnter(e));\n    addKeyListener(document.body, Key.ESCAPE, e => this.handleEscape(e));\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected get currentDialog(): AbstractDialog<any> | undefined {\n    return this.dialogs[0];\n  }\n\n  static get(): DialogOverlayService {\n    return DialogOverlayService.INSTANCE;\n  }\n\n  initialize(): void {\n    DialogOverlayService.INSTANCE = this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  push(dialog: AbstractDialog<any>): Disposable {\n    this.dialogs.unshift(dialog);\n    return Disposable.create(() => {\n      const index = this.dialogs.indexOf(dialog);\n      if (index > -1) {\n        this.dialogs.splice(index, 1);\n      }\n    });\n  }\n\n  protected handleEscape(event: KeyboardEvent): boolean | void {\n    const dialog = this.currentDialog;\n    if (dialog) {\n      return dialog['handleEscape'](event);\n    }\n    return false;\n  }\n\n  protected handleEnter(event: KeyboardEvent): boolean | void {\n    const dialog = this.currentDialog;\n    if (dialog) {\n      return dialog['handleEnter'](event);\n    }\n    return false;\n  }\n\n}\n\n@injectable()\nexport abstract class AbstractDialog<T> extends BaseWidget {\n\n  protected readonly titleNode: HTMLDivElement;\n  protected readonly contentNode: HTMLDivElement;\n  protected readonly closeCrossNode: HTMLElement;\n  protected readonly controlPanel: HTMLDivElement;\n  protected readonly errorMessageNode: HTMLDivElement;\n\n  protected resolve: undefined | ((value: T | undefined) => void);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected reject: undefined | ((reason: any) => void);\n\n  protected closeButton: HTMLButtonElement | undefined;\n  protected acceptButton: HTMLButtonElement | undefined;\n\n  protected activeElement: HTMLElement | undefined;\n  protected validateCancellationSource = new CancellationTokenSource();\n  protected acceptCancellationSource = new CancellationTokenSource();\n\n  constructor(\n      @inject(DialogProps) protected readonly props: DialogProps\n  ) {\n    super();\n    this.id = 'tart-dialog-shell';\n    this.addClass('dialogOverlay');\n    this.toDispose.push(Disposable.create(() => {\n      if (this.reject) {\n        Widget.detach(this);\n      }\n    }));\n    const container = document.createElement('div');\n    container.classList.add('dialogBlock');\n    if (props.maxWidth === undefined) {\n      container.setAttribute('style', 'max-width: none');\n    } else {\n      container.setAttribute('style', `max-width: ${props.maxWidth}px; min-width: 0px`);\n    }\n    this.node.appendChild(container);\n\n    const titleContentNode = document.createElement('div');\n    titleContentNode.classList.add('dialogTitle');\n    container.appendChild(titleContentNode);\n\n    this.titleNode = document.createElement('div');\n    this.titleNode.textContent = props.title;\n    titleContentNode.appendChild(this.titleNode);\n\n    this.closeCrossNode = document.createElement('i');\n    this.closeCrossNode.classList.add(...codiconArray('close'));\n    this.closeCrossNode.classList.add('closeButton');\n    titleContentNode.appendChild(this.closeCrossNode);\n\n    this.contentNode = document.createElement('div');\n    this.contentNode.classList.add('dialogContent');\n    if (props.wordWrap !== undefined) {\n      this.contentNode.setAttribute('style', `word-wrap: ${props.wordWrap}`);\n    }\n    container.appendChild(this.contentNode);\n\n    this.controlPanel = document.createElement('div');\n    this.controlPanel.classList.add('dialogControl');\n    container.appendChild(this.controlPanel);\n\n    this.errorMessageNode = document.createElement('div');\n    this.errorMessageNode.classList.add('error');\n    this.errorMessageNode.setAttribute('style', 'flex: 2');\n    this.controlPanel.appendChild(this.errorMessageNode);\n\n    this.update();\n  }\n\n  abstract get value(): T;\n\n  open(): Promise<T | undefined> {\n    if (this.resolve) {\n      return Promise.reject(new Error('The dialog is already opened.'));\n    }\n    this.activeElement = window.document.activeElement as HTMLElement;\n    return new Promise<T | undefined>((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n      this.toDisposeOnDetach.push(Disposable.create(() => {\n        this.resolve = undefined;\n        this.reject = undefined;\n      }));\n\n      Widget.attach(this, document.body);\n      this.activate();\n    });\n  }\n\n  close(): void {\n    if (this.resolve) {\n      if (this.activeElement) {\n        this.activeElement.focus({preventScroll: true});\n      }\n      this.resolve(undefined);\n    }\n    this.activeElement = undefined;\n    super.close();\n  }\n\n  protected appendCloseButton(text: string = Dialog.CANCEL): HTMLButtonElement {\n    this.closeButton = this.createButton(text);\n    this.controlPanel.appendChild(this.closeButton);\n    this.closeButton.classList.add('secondary');\n    return this.closeButton;\n  }\n\n  protected appendAcceptButton(text: string = Dialog.OK): HTMLButtonElement {\n    this.acceptButton = this.createButton(text);\n    this.controlPanel.appendChild(this.acceptButton);\n    this.acceptButton.classList.add('main');\n    return this.acceptButton;\n  }\n\n  protected createButton(text: string): HTMLButtonElement {\n    const button = document.createElement('button');\n    button.classList.add('tart-button');\n    button.textContent = text;\n    return button;\n  }\n\n  protected onAfterAttach(msg: Message): void {\n    super.onAfterAttach(msg);\n    if (this.closeButton) {\n      this.addCloseAction(this.closeButton, 'click');\n    }\n    if (this.acceptButton) {\n      this.addAcceptAction(this.acceptButton, 'click');\n    }\n    this.addCloseAction(this.closeCrossNode, 'click');\n    // TODO: use DI always to create dialog instances\n    this.toDisposeOnDetach.push(DialogOverlayService.get().push(this));\n  }\n\n  protected handleEscape(event: KeyboardEvent): boolean | void {\n    this.close();\n  }\n\n  protected handleEnter(event: KeyboardEvent): boolean | void {\n    if (event.target instanceof HTMLTextAreaElement) {\n      return false;\n    }\n    this.accept();\n  }\n\n  protected onActivateRequest(msg: Message): void {\n    super.onActivateRequest(msg);\n    if (this.acceptButton) {\n      this.acceptButton.focus();\n    }\n  }\n\n  protected onUpdateRequest(msg: Message): void {\n    super.onUpdateRequest(msg);\n    this.validate();\n  }\n\n  protected async validate(): Promise<void> {\n    if (!this.resolve) {\n      return;\n    }\n    this.validateCancellationSource.cancel();\n    this.validateCancellationSource = new CancellationTokenSource();\n    const token = this.validateCancellationSource.token;\n    const value = this.value;\n    const error = await this.isValid(value, 'preview');\n    if (token.isCancellationRequested) {\n      return;\n    }\n    this.setErrorMessage(error);\n  }\n\n  protected async accept(): Promise<void> {\n    if (!this.resolve) {\n      return;\n    }\n    this.acceptCancellationSource.cancel();\n    this.acceptCancellationSource = new CancellationTokenSource();\n    const token = this.acceptCancellationSource.token;\n    const value = this.value;\n    const error = await this.isValid(value, 'open');\n    if (token.isCancellationRequested) {\n      return;\n    }\n    if (!DialogError.getResult(error)) {\n      this.setErrorMessage(error);\n    } else {\n      this.resolve(value);\n      Widget.detach(this);\n    }\n  }\n\n  /**\n   * Return a string of zero-length or true if valid.\n   */\n  protected isValid(value: T, mode: DialogMode): MaybePromise<DialogError> {\n    return '';\n  }\n\n  protected setErrorMessage(error: DialogError): void {\n    if (this.acceptButton) {\n      this.acceptButton.disabled = !DialogError.getResult(error);\n    }\n    this.errorMessageNode.innerText = DialogError.getMessage(error);\n  }\n\n  protected addCloseAction<K extends keyof HTMLElementEventMap>(element: HTMLElement, ...additionalEventTypes: K[]): void {\n    this.addKeyListener(element, Key.ENTER, () => this.close(), ...additionalEventTypes);\n  }\n\n  protected addAcceptAction<K extends keyof HTMLElementEventMap>(element: HTMLElement, ...additionalEventTypes: K[]): void {\n    this.addKeyListener(element, Key.ENTER, () => this.accept(), ...additionalEventTypes);\n  }\n\n}\n\n@injectable()\nexport class ConfirmDialogProps extends DialogProps {\n  readonly msg: string | HTMLElement;\n  readonly cancel?: string;\n  readonly ok?: string;\n}\n\nexport class ConfirmDialog extends AbstractDialog<boolean> {\n\n  protected confirmed = true;\n\n  constructor(\n      @inject(ConfirmDialogProps) protected readonly props: ConfirmDialogProps\n  ) {\n    super(props);\n\n    this.contentNode.appendChild(this.createMessageNode(this.props.msg));\n    this.appendCloseButton(props.cancel);\n    this.appendAcceptButton(props.ok);\n  }\n\n  get value(): boolean {\n    return this.confirmed;\n  }\n\n  protected onCloseRequest(msg: Message): void {\n    super.onCloseRequest(msg);\n    this.confirmed = false;\n    this.accept();\n  }\n\n  protected createMessageNode(msg: string | HTMLElement): HTMLElement {\n    if (typeof msg === 'string') {\n      const messageNode = document.createElement('div');\n      messageNode.textContent = msg;\n      return messageNode;\n    }\n    return msg;\n  }\n\n}\n\n@injectable()\nexport class SingleTextInputDialogProps extends DialogProps {\n  readonly confirmButtonLabel?: string;\n  readonly initialValue?: string;\n  readonly initialSelectionRange?: {\n    start: number\n    end: number\n    direction?: 'forward' | 'backward' | 'none'\n  };\n  readonly validate?: (input: string, mode: DialogMode) => MaybePromise<DialogError>;\n}\n\nexport class SingleTextInputDialog extends AbstractDialog<string> {\n\n  protected readonly inputField: HTMLInputElement;\n\n  constructor(\n      @inject(SingleTextInputDialogProps) protected readonly props: SingleTextInputDialogProps\n  ) {\n    super(props);\n\n    this.inputField = document.createElement('input');\n    this.inputField.type = 'text';\n    this.inputField.className = 'tart-input';\n    this.inputField.spellcheck = false;\n    this.inputField.setAttribute('style', 'flex: 0;');\n    this.inputField.value = props.initialValue || '';\n    if (props.initialSelectionRange) {\n      this.inputField.setSelectionRange(\n          props.initialSelectionRange.start,\n          props.initialSelectionRange.end,\n          props.initialSelectionRange.direction\n      );\n    } else {\n      this.inputField.select();\n    }\n    this.contentNode.appendChild(this.inputField);\n\n    this.appendAcceptButton(props.confirmButtonLabel);\n  }\n\n  get value(): string {\n    return this.inputField.value;\n  }\n\n  protected isValid(value: string, mode: DialogMode): MaybePromise<DialogError> {\n    if (this.props.validate) {\n      return this.props.validate(value, mode);\n    }\n    return super.isValid(value, mode);\n  }\n\n  protected onAfterAttach(msg: Message): void {\n    super.onAfterAttach(msg);\n    this.addUpdateListener(this.inputField, 'input');\n  }\n\n  protected onActivateRequest(msg: Message): void {\n    this.inputField.focus();\n  }\n\n  protected handleEnter(event: KeyboardEvent): boolean | void {\n    if (event.target instanceof HTMLInputElement) {\n      return super.handleEnter(event);\n    }\n    return false;\n  }\n\n}\n\n@injectable()\nexport class MessageDialogProps extends DialogProps {\n  readonly msg: string | HTMLElement;\n}\n\n\nexport class MessageDialog extends AbstractDialog<void> {\n\n  constructor(\n      @inject(MessageDialogProps) protected readonly props: MessageDialogProps\n  ) {\n    super(props);\n\n    this.contentNode.appendChild(this.createMessageNode(this.props.msg))\n    this.closeCrossNode.remove();\n  }\n\n  get value(): void {\n    return;\n  }\n\n  protected createMessageNode(msg: string | HTMLElement): HTMLElement {\n    if (typeof msg === 'string') {\n      const messageNode = document.createElement('div');\n      messageNode.textContent = msg;\n      return messageNode;\n    }\n    return msg;\n  }\n}\n"]}