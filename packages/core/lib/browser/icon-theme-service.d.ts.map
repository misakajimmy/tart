{"version":3,"sources":["browser/icon-theme-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,UAAU,EAAE,oBAAoB,EAAE,OAAO,EAAC,MAAM,WAAW,CAAC;AACpE,OAAO,EAAC,mBAAmB,EAAE,yBAAyB,EAAC,MAAM,kBAAkB,CAAC;AAGhF,MAAM,WAAW,mBAAmB;IAClC,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAA;IACnB,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAA;IACtB,QAAQ,CAAC,WAAW,CAAC,EAAE,MAAM,CAAA;IAC7B,QAAQ,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC;IAChC,QAAQ,CAAC,cAAc,CAAC,EAAE,OAAO,CAAC;IAClC,QAAQ,CAAC,mBAAmB,CAAC,EAAE,OAAO,CAAC;CACxC;AAED,MAAM,WAAW,SAAU,SAAQ,mBAAmB;IACpD,QAAQ,IAAI,UAAU,CAAC;CACxB;AAED,qBACa,aAAc,YAAW,SAAS,EAAE,yBAAyB;IAExE,QAAQ,CAAC,EAAE,UAAU;IACrB,QAAQ,CAAC,KAAK,UAAU;IACxB,QAAQ,CAAC,WAAW,wBAAwB;IAC5C,QAAQ,CAAC,YAAY,QAAQ;IAC7B,QAAQ,CAAC,cAAc,QAAQ;IAE/B,SAAS,CAAC,QAAQ,CAAC,kBAAkB,+BAAsC;IAC3E,QAAQ,CAAC,WAAW,iDAAiC;IAErD,SAAS,CAAC,QAAQ,CAAC,YAAY,uBAA8B;IAE7D,QAAQ,IAAI,UAAU;IAQtB,SAAS,IAAI,MAAM;IAOnB,OAAO,IAAI,MAAM;IAIjB,SAAS,CAAC,aAAa,IAAI,IAAI;CAIhC;AAED,qBACa,gBAAgB;IAE3B,SAAS,CAAC,QAAQ,CAAC,kBAAkB,gBAAuB;IAC5D,QAAQ,CAAC,WAAW,kCAAiC;IAErD,SAAS,CAAC,QAAQ,CAAC,WAAW,yBAAgC;IAE9D,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC;IAChD,SAAS,CAAC,QAAQ,CAAC,yBAAyB,kBAAyB;IACrE,QAAQ,CAAC,kBAAkB,oCAAwC;IACnE,SAAS,CAAC,QAAQ,CAAC,YAAY,uBAA8B;IAE7D,IAAI,GAAG,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAElC;IAED,IAAI,WAAW,IAAI,gBAAgB,CAAC,mBAAmB,CAAC,CAEvD;IAED,IAAI,OAAO,IAAI,MAAM,CAEpB;IAED,IAAI,OAAO,CAAC,EAAE,EAAE,MAAM,EAKrB;IAED,IAAI,OAAO,IAAI,SAAS,CAEvB;IAED,aAAa,CAAC,EAAE,EAAE,MAAM,GAAG,mBAAmB,GAAG,SAAS;IAI1D,QAAQ,CAAC,SAAS,EAAE,SAAS,GAAG,UAAU;IAc1C,UAAU,CAAC,EAAE,EAAE,MAAM,GAAG,SAAS,GAAG,SAAS;IAe7C,SAAS,CAAC,IAAI,IAAI,IAAI;IAItB,SAAS,CAAC,UAAU,IAAI,SAAS;IAKjC,SAAS,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,GAAG,IAAI;IAO9C,SAAS,CAAC,IAAI,IAAI,MAAM,GAAG,SAAS;CAIrC","file":"../../src/browser/icon-theme-service.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, postConstruct} from 'inversify';\nimport {Disposable, DisposableCollection, Emitter} from '../common';\nimport {DidChangeLabelEvent, LabelProviderContribution} from './label-provider';\nimport {FrontendApplicationConfigProvider} from './frontend-application-config-provider';\n\nexport interface IconThemeDefinition {\n  readonly id: string\n  readonly label: string\n  readonly description?: string\n  readonly hasFileIcons?: boolean;\n  readonly hasFolderIcons?: boolean;\n  readonly hidesExplorerArrows?: boolean;\n}\n\nexport interface IconTheme extends IconThemeDefinition {\n  activate(): Disposable;\n}\n\n@injectable()\nexport class NoneIconTheme implements IconTheme, LabelProviderContribution {\n\n  readonly id = 'none';\n  readonly label = 'None';\n  readonly description = 'Disable file icons';\n  readonly hasFileIcons = true;\n  readonly hasFolderIcons = true;\n\n  protected readonly onDidChangeEmitter = new Emitter<DidChangeLabelEvent>();\n  readonly onDidChange = this.onDidChangeEmitter.event;\n\n  protected readonly toDeactivate = new DisposableCollection();\n\n  activate(): Disposable {\n    if (this.toDeactivate.disposed) {\n      this.toDeactivate.push(Disposable.create(() => this.fireDidChange()));\n      this.fireDidChange();\n    }\n    return this.toDeactivate;\n  }\n\n  canHandle(): number {\n    if (this.toDeactivate.disposed) {\n      return 0;\n    }\n    return Number.MAX_SAFE_INTEGER;\n  }\n\n  getIcon(): string {\n    return '';\n  }\n\n  protected fireDidChange(): void {\n    this.onDidChangeEmitter.fire({affects: () => true});\n  }\n\n}\n\n@injectable()\nexport class IconThemeService {\n\n  protected readonly onDidChangeEmitter = new Emitter<void>();\n  readonly onDidChange = this.onDidChangeEmitter.event;\n\n  protected readonly _iconThemes = new Map<string, IconTheme>();\n  @inject(NoneIconTheme)\n  protected readonly noneIconTheme: NoneIconTheme;\n  protected readonly onDidChangeCurrentEmitter = new Emitter<string>();\n  readonly onDidChangeCurrent = this.onDidChangeCurrentEmitter.event;\n  protected readonly toDeactivate = new DisposableCollection();\n\n  get ids(): IterableIterator<string> {\n    return this._iconThemes.keys();\n  }\n\n  get definitions(): IterableIterator<IconThemeDefinition> {\n    return this._iconThemes.values();\n  }\n\n  get current(): string {\n    return this.getCurrent().id;\n  }\n\n  set current(id: string) {\n    const newCurrent = this._iconThemes.get(id) || this.default;\n    if (this.getCurrent().id !== newCurrent.id) {\n      this.setCurrent(newCurrent);\n    }\n  }\n\n  get default(): IconTheme {\n    return this._iconThemes.get(FrontendApplicationConfigProvider.get().defaultIconTheme) || this.noneIconTheme;\n  }\n\n  getDefinition(id: string): IconThemeDefinition | undefined {\n    return this._iconThemes.get(id);\n  }\n\n  register(iconTheme: IconTheme): Disposable {\n    if (this._iconThemes.has(iconTheme.id)) {\n      console.warn(new Error(`Icon theme '${iconTheme.id}' has already been registered, skipping.`));\n      return Disposable.NULL;\n    }\n    this._iconThemes.set(iconTheme.id, iconTheme);\n    this.onDidChangeEmitter.fire(undefined);\n    if (this.toDeactivate.disposed\n        && window.localStorage.getItem('iconTheme') === iconTheme.id) {\n      this.setCurrent(iconTheme);\n    }\n    return Disposable.create(() => this.unregister(iconTheme.id));\n  }\n\n  unregister(id: string): IconTheme | undefined {\n    const iconTheme = this._iconThemes.get(id);\n    if (!iconTheme) {\n      return undefined;\n    }\n    this._iconThemes.delete(id);\n    if (window.localStorage.getItem('iconTheme') === id) {\n      window.localStorage.removeItem('iconTheme');\n      this.onDidChangeCurrentEmitter.fire(this.default.id);\n    }\n    this.onDidChangeEmitter.fire(undefined);\n    return iconTheme;\n  }\n\n  @postConstruct()\n  protected init(): void {\n    this.register(this.noneIconTheme);\n  }\n\n  protected getCurrent(): IconTheme {\n    const id = window.localStorage.getItem('iconTheme');\n    return id && this._iconThemes.get(id) || this.default;\n  }\n\n  protected setCurrent(current: IconTheme): void {\n    window.localStorage.setItem('iconTheme', current.id);\n    this.toDeactivate.dispose();\n    this.toDeactivate.push(current.activate());\n    this.onDidChangeCurrentEmitter.fire(current.id);\n  }\n\n  protected load(): string | undefined {\n    return window.localStorage.getItem('iconTheme') || undefined;\n  }\n\n}\n"]}