{"version":3,"sources":["browser/http-open-handler.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;AAElF,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,WAAW,CAAC;AAG7C,OAAO,EAAC,aAAa,EAAC,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAC,kBAAkB,EAAC,MAAM,wBAAwB,CAAC;AAO1D,IAAa,eAAe,GAA5B,MAAa,eAAe;IAEjB,EAAE,GAAG,MAAM,CAAC;IAGF,aAAa,CAAgB;IAG7B,kBAAkB,CAAqB;IAE1D,SAAS,CAAC,GAAQ,EAAE,OAAgC;QAClD,OAAO,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3H,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,GAAQ;QACjB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;IACxF,CAAC;CAEF,CAAA;AAdC;IADC,MAAM,CAAC,aAAa,CAAC;sDAC0B;AAGhD;IADC,MAAM,CAAC,kBAAkB,CAAC;2DAC+B;AAR/C,eAAe;IAD3B,UAAU,EAAE;GACA,eAAe,CAmB3B;SAnBY,eAAe","file":"../../src/browser/http-open-handler.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable} from 'inversify';\nimport URI from '../common/uri';\nimport {OpenHandler} from './opener-service';\nimport {WindowService} from './window/window-service';\nimport {ExternalUriService} from './external-uri-service';\n\nexport interface HttpOpenHandlerOptions {\n  openExternal?: boolean\n}\n\n@injectable()\nexport class HttpOpenHandler implements OpenHandler {\n\n  readonly id = 'http';\n\n  @inject(WindowService)\n  protected readonly windowService: WindowService;\n\n  @inject(ExternalUriService)\n  protected readonly externalUriService: ExternalUriService;\n\n  canHandle(uri: URI, options?: HttpOpenHandlerOptions): number {\n    return ((options && options.openExternal) || uri.scheme.startsWith('http') || uri.scheme.startsWith('mailto')) ? 500 : 0;\n  }\n\n  async open(uri: URI): Promise<undefined> {\n    const resolvedUri = await this.externalUriService.resolve(uri);\n    return this.windowService.openNewWindow(resolvedUri.toString(true), {external: true});\n  }\n\n}\n"]}