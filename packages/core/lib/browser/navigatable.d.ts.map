{"version":3,"sources":["browser/navigatable.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,iBAAiB,EAAE,wBAAwB,EAAC,MAAM,oBAAoB,CAAC;AAC/E,OAAO,EAAC,mBAAmB,EAAE,iBAAiB,EAAC,MAAM,uBAAuB,CAAC;AAC7E,OAAO,GAAG,MAAM,eAAe,CAAC;AAEhC,cAAc,oBAAoB,CAAC;AAEnC,8BAAsB,4BAA4B,CAAC,CAAC,SAAS,iBAAiB,CAAE,SAAQ,iBAAiB,CAAC,CAAC,CAAC;IAE1G,SAAS,CAAC,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,mBAAmB,GAAG,wBAAwB;IAOhG,SAAS,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,GAAG,MAAM;IAQxC,SAAS,CAAC,IAAI;CAGf","file":"../../src/browser/navigatable.d.ts","sourcesContent":["import {NavigatableWidget, NavigatableWidgetOptions} from './navigatable-type';\nimport {WidgetOpenerOptions, WidgetOpenHandler} from './widget-open-handler';\nimport URI from '../common/uri';\n\nexport * from './navigatable-type';\n\nexport abstract class NavigatableWidgetOpenHandler<W extends NavigatableWidget> extends WidgetOpenHandler<W> {\n\n  protected createWidgetOptions(uri: URI, options?: WidgetOpenerOptions): NavigatableWidgetOptions {\n    return {\n      kind: 'navigatable',\n      uri: this.serializeUri(uri)\n    };\n  }\n\n  protected serializeUri(uri: URI): string {\n    if (uri.scheme === 'file') {\n      return uri.withoutFragment().normalizePath().toString();\n    } else {\n      return uri.withoutFragment().toString();\n    }\n  }\n\n  protected init() {\n    super.init();\n  }\n}\n"]}