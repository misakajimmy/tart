{"version":3,"sources":["browser/external-uri-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,GAAG,MAAM,eAAe,CAAC;AAChC,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAG7C,qBACa,kBAAkB;IAE7B;;;;;;;OAOG;IACH,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC;IAQpC,cAAc,CAAC,GAAG,EAAE,GAAG,GAAG;QAAE,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAE,GAAG,SAAS;IAcvE,SAAS,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE;QAAE,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAE,GAAG,GAAG;IAKlF,SAAS,CAAC,YAAY,CAAC,SAAS,EAAE;QAAE,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAE,GAAG,MAAM;CAI7E","file":"../../src/browser/external-uri-service.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport URI from '../common/uri';\nimport {MaybePromise} from '../common/types';\nimport {Endpoint} from './endpoint';\n\n@injectable()\nexport class ExternalUriService {\n\n  /**\n   * Maps local to remote URLs.\n   * Should be no-op if the given URL is not a localhost URL.\n   *\n   * By default maps to an origin serving tart.\n   *\n   * Use `parseLocalhost` to retrieve localhost address and port information.\n   */\n  resolve(uri: URI): MaybePromise<URI> {\n    const localhost = this.parseLocalhost(uri);\n    if (localhost) {\n      return this.toRemoteUrl(uri, localhost);\n    }\n    return uri;\n  }\n\n  parseLocalhost(uri: URI): { address: string, port: number } | undefined {\n    if (uri.scheme !== 'http' && uri.scheme !== 'https') {\n      return undefined;\n    }\n    const localhostMatch = /^(localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0):(\\d+)$/.exec(uri.authority);\n    if (!localhostMatch) {\n      return undefined;\n    }\n    return {\n      address: localhostMatch[1],\n      port: +localhostMatch[2],\n    };\n  }\n\n  protected toRemoteUrl(uri: URI, localhost: { address: string, port: number }): URI {\n    const host = this.toRemoteHost(localhost);\n    return new Endpoint({host}).getRestUrl().withPath(uri.path).withFragment(uri.fragment).withQuery(uri.query);\n  }\n\n  protected toRemoteHost(localhost: { address: string, port: number }): string {\n    return `${window.location.hostname}:${localhost.port}`;\n  }\n\n}\n"]}