{"version":3,"sources":["browser/context-key-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,OAAO,EAAC,MAAM,WAAW,CAAC;AAElC,MAAM,WAAW,UAAU,CAAC,CAAC;IAC3B,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC;IAEhC,KAAK,IAAI,IAAI,CAAC;IAEd,GAAG,IAAI,CAAC,GAAG,SAAS,CAAC;CACtB;AAED,yBAAiB,UAAU,CAAC;IAEnB,MAAM,IAAI,EAAE,UAAU,CAAC,GAAG,CAM/B,CAAC;CACJ;AAED,MAAM,WAAW,qBAAqB;IACpC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC;CACrC;AAED,qBACa,iBAAiB;IAE5B,SAAS,CAAC,QAAQ,CAAC,kBAAkB,iCAAwC;IAC7E,QAAQ,CAAC,WAAW,mDAAiC;IAErD,SAAS,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,GAAG,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC;IAIrE;;OAEG;IACH,KAAK,CAAC,UAAU,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,WAAW,GAAG,OAAO;IAIzD;;OAEG;IACH,SAAS,CAAC,UAAU,EAAE,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,SAAS;IAItD,SAAS,CAAC,aAAa,CAAC,KAAK,EAAE,qBAAqB,GAAG,IAAI;CAI5D","file":"../../src/browser/context-key-service.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {Emitter} from '../common';\n\nexport interface ContextKey<T> {\n  set(value: T | undefined): void;\n\n  reset(): void;\n\n  get(): T | undefined;\n}\n\nexport namespace ContextKey {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  export const None: ContextKey<any> = Object.freeze({\n    set: () => {\n    },\n    reset: () => {\n    },\n    get: () => undefined\n  });\n}\n\nexport interface ContextKeyChangeEvent {\n  affects(keys: Set<string>): boolean;\n}\n\n@injectable()\nexport class ContextKeyService {\n\n  protected readonly onDidChangeEmitter = new Emitter<ContextKeyChangeEvent>();\n  readonly onDidChange = this.onDidChangeEmitter.event;\n\n  createKey<T>(key: string, defaultValue: T | undefined): ContextKey<T> {\n    return ContextKey.None;\n  }\n\n  /**\n   * It should be implemented by an extension, e.g. by the monaco extension.\n   */\n  match(expression: string, context?: HTMLElement): boolean {\n    return true;\n  }\n\n  /**\n   * It should be implemented by an extension, e.g. by the monaco extension.\n   */\n  parseKeys(expression: string): Set<string> | undefined {\n    return new Set<string>();\n  }\n\n  protected fireDidChange(event: ContextKeyChangeEvent): void {\n    this.onDidChangeEmitter.fire(event);\n  }\n\n}\n"]}