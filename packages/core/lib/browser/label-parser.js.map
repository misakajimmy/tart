{"version":3,"sources":["browser/label-parser.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;kFAckF;AAClF,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAOrC,MAAM,KAAW,SAAS,CAIzB;AAJD,WAAiB,SAAS;IACxB,SAAgB,EAAE,CAAC,GAAW;QAC5B,OAAO,MAAM,IAAI,GAAG,CAAC;IACvB,CAAC;IAFe,YAAE,KAEjB,CAAA;AACH,CAAC,EAJgB,SAAS,KAAT,SAAS,QAIzB;AAKD,IAAa,WAAW,GAAxB,MAAa,WAAW;IAEtB;;;;;;;;;;;;;;OAcG;IACH,KAAK,CAAC,IAAY;QAChB,MAAM,WAAW,GAAgB,EAAE,CAAC;QACpC,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,aAAa,GAAG,EAAE,CAAC;QAEvB,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC9B,WAAW,CAAC,UAAU,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YACxD,IAAI,aAAa,KAAK,EAAE,EAAE;gBACxB,IAAI,IAAI,KAAK,GAAG,EAAE;oBAChB,aAAa,IAAI,IAAI,CAAC;iBACvB;qBAAM;oBACL,WAAW,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;iBACjC;aACF;iBAAM,IAAI,aAAa,KAAK,GAAG,EAAE;gBAChC,IAAI,IAAI,KAAK,GAAG,EAAE;oBAChB,aAAa,IAAI,IAAI,CAAC;iBACvB;qBAAM;oBACL,WAAW,CAAC,UAAU,CAAC,IAAI,aAAa,GAAG,IAAI,CAAC;oBAChD,aAAa,GAAG,EAAE,CAAC;iBACpB;aACF;iBAAM;gBACL,IAAI,IAAI,KAAK,GAAG,EAAE;oBAChB,MAAM,YAAY,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACjF,IAAI,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE;wBAClC,UAAU,EAAE,CAAC;qBACd;oBACD,WAAW,CAAC,UAAU,CAAC,GAAG,EAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC,EAAC,CAAC;oBAC9E,UAAU,EAAE,CAAC;oBACb,aAAa,GAAG,EAAE,CAAC;iBACpB;qBAAM;oBACL,aAAa,IAAI,IAAI,CAAC;iBACvB;aACF;SACF;QAED,IAAI,aAAa,KAAK,EAAE,EAAE;YACxB,WAAW,CAAC,UAAU,CAAC,IAAI,aAAa,CAAC;SAC1C;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;CAEF,CAAA;AA5DY,WAAW;IADvB,UAAU,EAAE;GACA,WAAW,CA4DvB;SA5DY,WAAW","file":"../../src/browser/label-parser.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\nimport {injectable} from 'inversify';\n\nexport interface LabelIcon {\n  name: string;\n  animation?: string;\n}\n\nexport namespace LabelIcon {\n  export function is(val: object): val is LabelIcon {\n    return 'name' in val;\n  }\n}\n\nexport type LabelPart = string | LabelIcon;\n\n@injectable()\nexport class LabelParser {\n\n  /**\n   * Returns an array with parts of the given text.\n   * These parts are of type LabelPart which can be either a string or a LabelIcon.\n   * For splitting up the giving text the parser follows this rule:\n   * The text gets parsed for the following pattern: $(iconName~iconAnimation).\n   * If the parser finds such pattern a new LabelIcon object\n   * { name: 'iconName', animation: 'iconAnimation'} is added to the returned array.\n   * iconName can be for instance the name of an icon of e.g. FontAwesome and the (optional) iconAnimation\n   * the name of an animation class which must be supported by the particular icon toolkit.\n   *\n   * Every string before, between or after such icon patterns gets also added to the array\n   * before, between or after the related LabelIcon.\n   *\n   * @param text - the label text to parse\n   */\n  parse(text: string): LabelPart[] {\n    const parserArray: LabelPart[] = [];\n    let arrPointer = 0;\n    let potentialIcon = '';\n\n    for (let idx = 0; idx < text.length; idx++) {\n      const char = text.charAt(idx);\n      parserArray[arrPointer] = parserArray[arrPointer] || '';\n      if (potentialIcon === '') {\n        if (char === '$') {\n          potentialIcon += char;\n        } else {\n          parserArray[arrPointer] += char;\n        }\n      } else if (potentialIcon === '$') {\n        if (char === '(') {\n          potentialIcon += char;\n        } else {\n          parserArray[arrPointer] += potentialIcon + char;\n          potentialIcon = '';\n        }\n      } else {\n        if (char === ')') {\n          const iconClassArr = potentialIcon.substring(2, potentialIcon.length).split('~');\n          if (parserArray[arrPointer] !== '') {\n            arrPointer++;\n          }\n          parserArray[arrPointer] = {name: iconClassArr[0], animation: iconClassArr[1]};\n          arrPointer++;\n          potentialIcon = '';\n        } else {\n          potentialIcon += char;\n        }\n      }\n    }\n\n    if (potentialIcon !== '') {\n      parserArray[arrPointer] += potentialIcon;\n    }\n\n    return parserArray;\n  }\n\n}\n"]}