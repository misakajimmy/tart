{"version":3,"sources":["browser/dialogs/react-dialog.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAa,oBAAoB,EAAC,MAAM,cAAc,CAAC;AAC9D,OAAO,EAAC,OAAO,EAAC,MAAM,YAAY,CAAC;AACnC,OAAO,EAAC,cAAc,EAAE,WAAW,EAAC,MAAM,YAAY,CAAC;AAEvD,8BACsB,WAAW,CAAC,CAAC,CAAE,SAAQ,cAAc,CAAC,CAAC,CAAC;IAInC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW;IAH9D,SAAS,CAAC,QAAQ,CAAC,QAAQ,uBAA8B;gBAGb,KAAK,EAAE,WAAW;IAQ9D,SAAS,CAAC,eAAe,CAAC,GAAG,EAAE,OAAO,GAAG,IAAI;IAK7C;;;;;OAKG;IACH,SAAS,CAAC,QAAQ,CAAC,MAAM,IAAI,KAAK,CAAC,SAAS;CAC7C","file":"../../../src/browser/dialogs/react-dialog.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {inject, injectable} from 'inversify';\nimport {Disposable, DisposableCollection} from '../../common';\nimport {Message} from '../widgets';\nimport {AbstractDialog, DialogProps} from '../dialogs';\n\n@injectable()\nexport abstract class ReactDialog<T> extends AbstractDialog<T> {\n  protected readonly onRender = new DisposableCollection();\n\n  constructor(\n      @inject(DialogProps) protected readonly props: DialogProps\n  ) {\n    super(props);\n    this.toDispose.push(Disposable.create(() => {\n      ReactDOM.unmountComponentAtNode(this.contentNode);\n    }));\n  }\n\n  protected onUpdateRequest(msg: Message): void {\n    super.onUpdateRequest(msg);\n    ReactDOM.render(<>{this.render()}</>, this.contentNode, () => this.onRender.dispose());\n  }\n\n  /**\n   * Render the React widget in the DOM.\n   * - If the widget has been previously rendered,\n   * any subsequent calls will perform an update and only\n   * change the DOM if absolutely necessary.\n   */\n  protected abstract render(): React.ReactNode;\n}\n"]}