{"version":3,"sources":["browser/source-tree/tree-source.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAIlF,OAAO,EAAC,SAAS,EAAC,MAAM,OAAO,CAAC;AAEhC,OAAO,EAAC,OAAO,EAAE,KAAK,EAAC,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAC,YAAY,EAAC,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAC,UAAU,EAAE,oBAAoB,EAAC,MAAM,yBAAyB,CAAC;AAEzE,MAAM,WAAW,WAAW;IAC1B,mDAAmD;IACnD,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,SAAS,CAAA;IACzC,oBAAoB;IACpB,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,CAAA;IAE1B,MAAM,IAAI,SAAS,CAAA;IAEnB,IAAI,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,CAAA;CAC3B;AAED,MAAM,WAAW,oBAAqB,SAAQ,WAAW;IACvD,oBAAoB;IACpB,QAAQ,CAAC,WAAW,CAAC,EAAE,OAAO,CAAA;IAE9B,WAAW,IAAI,YAAY,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAA;CAC3D;AAED,yBAAiB,oBAAoB,CAAC;IAEpC,SAAgB,EAAE,CAAC,OAAO,EAAE,oBAAoB,GAAG,GAAG,GAAG,OAAO,IAAI,oBAAoB,CAEvF;IAED,SAAgB,WAAW,CAAC,OAAO,EAAE,oBAAoB,GAAG,GAAG,GAAG,OAAO,IAAI,oBAAoB,CAEhG;CACF;AAED,8BACsB,UAAW,YAAW,UAAU;IACpD,QAAQ,CAAC,EAAE,EAAE,MAAM,GAAG,SAAS,CAAC;IAChC,QAAQ,CAAC,WAAW,EAAE,MAAM,GAAG,SAAS,CAAC;IACzC,SAAS,CAAC,QAAQ,CAAC,kBAAkB,gBAAuB;IAC5D,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,CAAiC;IAClE,SAAS,CAAC,QAAQ,CAAC,SAAS,uBAAqD;gBAExD,OAAO,GAAE,iBAAsB;IAKxD,OAAO,IAAI,IAAI;IAIf,QAAQ,CAAC,WAAW,IAAI,YAAY,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAEnE,SAAS,CAAC,aAAa,IAAI,IAAI;CAGhC;AAED,MAAM,WAAW,iBAAiB;IAChC,EAAE,CAAC,EAAE,MAAM,CAAA;IACX,WAAW,CAAC,EAAE,MAAM,CAAA;CACrB","file":"../../../src/browser/source-tree/tree-source.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {ReactNode} from 'react';\nimport {injectable, unmanaged} from 'inversify';\nimport {Emitter, Event} from '../../common';\nimport {MaybePromise} from '../../common/types';\nimport {Disposable, DisposableCollection} from '../../common/disposable';\n\nexport interface TreeElement {\n  /** default: parent id + position among siblings */\n  readonly id?: number | string | undefined\n  /** default: true */\n  readonly visible?: boolean\n\n  render(): ReactNode\n\n  open?(): MaybePromise<any>\n}\n\nexport interface CompositeTreeElement extends TreeElement {\n  /** default: true */\n  readonly hasElements?: boolean\n\n  getElements(): MaybePromise<IterableIterator<TreeElement>>\n}\n\nexport namespace CompositeTreeElement {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  export function is(element: CompositeTreeElement | any): element is CompositeTreeElement {\n    return !!element && 'getElements' in element;\n  }\n\n  export function hasElements(element: CompositeTreeElement | any): element is CompositeTreeElement {\n    return is(element) && element.hasElements !== false;\n  }\n}\n\n@injectable()\nexport abstract class TreeSource implements Disposable {\n  readonly id: string | undefined;\n  readonly placeholder: string | undefined;\n  protected readonly onDidChangeEmitter = new Emitter<void>();\n  readonly onDidChange: Event<void> = this.onDidChangeEmitter.event;\n  protected readonly toDispose = new DisposableCollection(this.onDidChangeEmitter);\n\n  constructor(@unmanaged() options: TreeSourceOptions = {}) {\n    this.id = options.id;\n    this.placeholder = options.placeholder;\n  }\n\n  dispose(): void {\n    this.toDispose.dispose();\n  }\n\n  abstract getElements(): MaybePromise<IterableIterator<TreeElement>>;\n\n  protected fireDidChange(): void {\n    this.onDidChangeEmitter.fire(undefined);\n  }\n}\n\nexport interface TreeSourceOptions {\n  id?: string\n  placeholder?: string\n}\n"]}