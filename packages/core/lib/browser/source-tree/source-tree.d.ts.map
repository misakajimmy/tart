{"version":3,"sources":["browser/source-tree/source-tree.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,YAAY,EAAC,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,QAAQ,EAAE,QAAQ,EAAC,MAAM,SAAS,CAAC;AACtG,OAAO,EAAC,oBAAoB,EAAE,WAAW,EAAE,UAAU,EAAC,MAAM,eAAe,CAAC;AAE5E,qBACa,UAAW,SAAQ,QAAQ;IAEhC,eAAe,CAAC,MAAM,EAAE,qBAAqB,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;IAYzE,SAAS,CAAC,eAAe,CAAC,MAAM,EAAE,qBAAqB,GAAG,YAAY,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAOrG,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,qBAAqB,GAAG,eAAe;CA+CtG;AAED,oBAAY,qBAAqB,GAAG,wBAAwB,GAAG,cAAc,CAAC;AAE9E,MAAM,WAAW,eAAgB,SAAQ,QAAQ,EAAE,kBAAkB;IACnE,OAAO,EAAE,WAAW,CAAA;IACpB,MAAM,EAAE,qBAAqB,CAAA;CAC9B;AAED,yBAAiB,eAAe,CAAC;IAC/B,SAAgB,EAAE,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,IAAI,IAAI,eAAe,CAEtE;CACF;AAED,MAAM,WAAW,wBAAyB,SAAQ,eAAe,EAAE,iBAAiB,EAAE,kBAAkB;IACtG,OAAO,EAAE,oBAAoB,CAAA;IAC7B,QAAQ,EAAE,eAAe,EAAE,CAAA;IAC3B,MAAM,EAAE,qBAAqB,CAAA;CAC9B;AAED,yBAAiB,wBAAwB,CAAC;IACxC,SAAgB,EAAE,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,IAAI,IAAI,wBAAwB,CAE/E;CACF;AAED,MAAM,WAAW,cAAe,SAAQ,iBAAiB,EAAE,kBAAkB;IAC3E,OAAO,EAAE,KAAK,CAAA;IACd,QAAQ,EAAE,eAAe,EAAE,CAAA;IAC3B,MAAM,EAAE,SAAS,CAAA;IACjB,MAAM,EAAE,UAAU,CAAA;CACnB;AAED,yBAAiB,cAAc,CAAC;IAC9B,SAAgB,EAAE,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,IAAI,IAAI,cAAc,CAErE;IAED,SAAgB,EAAE,CAAC,MAAM,EAAE,SAAS,GAAG,SAAS,CAAC;IACjD,SAAgB,EAAE,CAAC,MAAM,EAAE,UAAU,GAAG,cAAc,CAAC;IACvD,SAAgB,EAAE,CAAC,MAAM,EAAE,UAAU,GAAG,SAAS,GAAG,cAAc,GAAG,SAAS,CAAC;CAgBhF","file":"../../../src/browser/source-tree/source-tree.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {MaybePromise} from '../../common/types';\nimport {CompositeTreeNode, ExpandableTreeNode, SelectableTreeNode, TreeImpl, TreeNode} from '../tree';\nimport {CompositeTreeElement, TreeElement, TreeSource} from './tree-source';\n\n@injectable()\nexport class SourceTree extends TreeImpl {\n\n  async resolveChildren(parent: TreeElementNodeParent): Promise<TreeNode[]> {\n    const elements = await this.resolveElements(parent);\n    const nodes: TreeNode[] = [];\n    let index = 0;\n    for (const element of elements) {\n      if (element.visible !== false) {\n        nodes.push(this.toNode(element, index++, parent));\n      }\n    }\n    return nodes;\n  }\n\n  protected resolveElements(parent: TreeElementNodeParent): MaybePromise<IterableIterator<TreeElement>> {\n    if (TreeSourceNode.is(parent)) {\n      return parent.source.getElements();\n    }\n    return parent.element.getElements();\n  }\n\n  protected toNode(element: TreeElement, index: number, parent: TreeElementNodeParent): TreeElementNode {\n    const id = element.id ? String(element.id) : (parent.id + ':' + index);\n    const name = id;\n    const existing = this.getNode(id);\n    const updated = existing && <TreeElementNode>Object.assign(existing, {element, parent});\n    if (CompositeTreeElement.hasElements(element)) {\n      if (updated) {\n        if (!ExpandableTreeNode.is(updated)) {\n          Object.assign(updated, {expanded: false});\n        }\n        if (!CompositeTreeNode.is(updated)) {\n          Object.assign(updated, {children: []});\n        }\n        return updated;\n      }\n      return {\n        element,\n        parent,\n        id,\n        name,\n        selected: false,\n        expanded: false,\n        children: []\n      } as TreeElementNode;\n    }\n    if (CompositeTreeElementNode.is(updated)) {\n      delete updated.expanded;\n      delete updated.children;\n    }\n    if (updated) {\n      if (ExpandableTreeNode.is(updated)) {\n        delete updated.expanded;\n      }\n      if (CompositeTreeNode.is(updated)) {\n        delete updated.children;\n      }\n      return updated;\n    }\n    return {\n      element,\n      parent,\n      id,\n      name,\n      selected: false\n    };\n  }\n\n}\n\nexport type TreeElementNodeParent = CompositeTreeElementNode | TreeSourceNode;\n\nexport interface TreeElementNode extends TreeNode, SelectableTreeNode {\n  element: TreeElement\n  parent: TreeElementNodeParent\n}\n\nexport namespace TreeElementNode {\n  export function is(node: TreeNode | undefined): node is TreeElementNode {\n    return SelectableTreeNode.is(node) && 'element' in node;\n  }\n}\n\nexport interface CompositeTreeElementNode extends TreeElementNode, CompositeTreeNode, ExpandableTreeNode {\n  element: CompositeTreeElement\n  children: TreeElementNode[]\n  parent: TreeElementNodeParent\n}\n\nexport namespace CompositeTreeElementNode {\n  export function is(node: TreeNode | undefined): node is CompositeTreeElementNode {\n    return TreeElementNode.is(node) && CompositeTreeNode.is(node) && ExpandableTreeNode.is(node) && !!node.visible;\n  }\n}\n\nexport interface TreeSourceNode extends CompositeTreeNode, SelectableTreeNode {\n  visible: false\n  children: TreeElementNode[]\n  parent: undefined\n  source: TreeSource\n}\n\nexport namespace TreeSourceNode {\n  export function is(node: TreeNode | undefined): node is TreeSourceNode {\n    return CompositeTreeNode.is(node) && !node.visible && 'source' in node;\n  }\n\n  export function to(source: undefined): undefined;\n  export function to(source: TreeSource): TreeSourceNode;\n  export function to(source: TreeSource | undefined): TreeSourceNode | undefined;\n  export function to(source: TreeSource | undefined): TreeSourceNode | undefined {\n    if (source === undefined) {\n      return undefined;\n    }\n    const id = source.id || '__source__';\n    return {\n      id,\n      name: id,\n      visible: false,\n      children: [],\n      source,\n      parent: undefined,\n      selected: false\n    };\n  }\n}\n"]}