{"version":3,"sources":["browser/tooltip-service.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAC,aAAa,EAAE,YAAY,EAAC,MAAM,WAAW,CAAC;AACtD,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAC,oBAAoB,EAAC,MAAM,WAAW,CAAC;AAG/C,eAAO,MAAM,cAAc,eAA2B,CAAC;AAEvD,MAAM,WAAW,cAAc;IAC7B,SAAS,EAAE,MAAM,CAAC;IAElB,QAAQ,CAAC,IAAI,EAAE,WAAW,GAAG,IAAI,CAAC;IAElC,MAAM,CAAC,UAAU,CAAC,EAAE,OAAO,GAAG,IAAI,CAAC;CACpC;AAED;;;GAGG;AACH,MAAM,WAAW,iBAAiB;IAChC;;OAEG;IACH,UAAU,EAAE,MAAM,CAAC;IACnB;;OAEG;IACH,UAAU,EAAE,MAAM,CAAC;CACpB;AAID,qBACa,kBAAmB,SAAQ,aAAc,YAAW,cAAc;IAE7E,SAAgB,SAAS,EAAE,MAAM,CAAC;IAElC,SAAS,CAAC,QAAQ,CAAC,eAAe,EAAE,eAAe,CAAC;IACpD,SAAS,CAAC,QAAQ,UAAS;IAC3B,SAAS,CAAC,SAAS,EAAE,oBAAoB,CAA8B;gBAGjC,IAAI,CAAC,EAAE,YAAY;IAMlD,QAAQ,CAAC,IAAI,EAAE,WAAW,GAAG,IAAI;IAIjC,MAAM,CAAC,UAAU,UAAQ,GAAG,IAAI;IAShC,OAAO,IAAI,IAAI;IAMtB,SAAS,CAAC,IAAI,IAAI,IAAI;IAQtB,SAAS,CAAC,QAAQ,IAAI,KAAK,CAAC,SAAS;CAItC","file":"../../src/browser/tooltip-service.d.ts","sourcesContent":["import * as React from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport {inject, injectable, optional, postConstruct} from 'inversify';\nimport {ReactRenderer, RendererHost} from './widgets';\nimport {CorePreferences} from './core-preferences';\nimport {DisposableCollection} from '../common';\nimport {v4} from 'uuid';\n\nexport const TooltipService = Symbol('TooltipService');\n\nexport interface TooltipService {\n  tooltipId: string;\n\n  attachTo(host: HTMLElement): void;\n\n  update(fullRender?: boolean): void;\n}\n\n/**\n * Attributes to be added to an HTML element to enable\n * rich HTML tooltip rendering\n */\nexport interface TooltipAttributes {\n  /**\n   * HTML to render in the tooltip.\n   */\n  'data-tip': string;\n  /**\n   * The ID of the tooltip renderer. Should be TOOLTIP_ID.\n   */\n  'data-for': string;\n}\n\nconst DELAY_PREFERENCE = 'workbench.hover.delay';\n\n@injectable()\nexport class TooltipServiceImpl extends ReactRenderer implements TooltipService {\n\n  public readonly tooltipId: string;\n  @inject(CorePreferences)\n  protected readonly corePreferences: CorePreferences;\n  protected rendered = false;\n  protected toDispose: DisposableCollection = new DisposableCollection();\n\n  constructor(\n      @inject(RendererHost) @optional() host?: RendererHost\n  ) {\n    super(host);\n    this.tooltipId = v4();\n  }\n\n  public attachTo(host: HTMLElement): void {\n    host.appendChild(this.host);\n  }\n\n  public update(fullRender = false): void {\n    if (fullRender || !this.rendered) {\n      this.render();\n      this.rendered = true;\n    }\n\n    ReactTooltip.rebuild();\n  }\n\n  public dispose(): void {\n    this.toDispose.dispose();\n    super.dispose();\n  }\n\n  @postConstruct()\n  protected init(): void {\n    this.toDispose.push(this.corePreferences.onPreferenceChanged(preference => {\n      if (preference.preferenceName === DELAY_PREFERENCE) {\n        this.update(true);\n      }\n    }));\n  }\n\n  protected doRender(): React.ReactNode {\n    const hoverDelay = this.corePreferences.get(DELAY_PREFERENCE);\n    return <ReactTooltip id={this.tooltipId} className='tart-tooltip' html={true} delayShow={hoverDelay}/>;\n  }\n}\n"]}