{"version":3,"sources":["common/logger-protocol.ts"],"names":[],"mappings":"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","file":"../../src/common/logger-protocol.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {JsonRpcServer} from './messaging';\n\nexport const ILoggerServer = Symbol('ILoggerServer');\n\nexport const loggerPath = '/services/logger';\n\nexport interface ILoggerServer extends JsonRpcServer<ILoggerClient> {\n  setLogLevel(name: string, logLevel: number): Promise<void>;\n\n  getLogLevel(name: string): Promise<number>;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  log(name: string, logLevel: number, message: any, params: any[]): Promise<void>;\n\n  child(name: string): Promise<void>;\n}\n\nexport const ILoggerClient = Symbol('ILoggerClient');\n\nexport interface ILogLevelChangedEvent {\n  loggerName: string;\n  newLogLevel: number;\n}\n\nexport interface ILoggerClient {\n  onLogLevelChanged(event: ILogLevelChangedEvent): void;\n}\n\n@injectable()\nexport class DispatchingLoggerClient implements ILoggerClient {\n\n  readonly clients = new Set<ILoggerClient>();\n\n  onLogLevelChanged(event: ILogLevelChangedEvent): void {\n    this.clients.forEach(client => client.onLogLevelChanged(event));\n  }\n\n}\n\nexport const rootLoggerName = 'root';\n\nexport enum LogLevel {\n  FATAL = 60,\n  ERROR = 50,\n  WARN = 40,\n  INFO = 30,\n  DEBUG = 20,\n  TRACE = 10\n}\n\nexport namespace LogLevel {\n  export const strings = new Map<LogLevel, string>([\n    [LogLevel.FATAL, 'fatal'],\n    [LogLevel.ERROR, 'error'],\n    [LogLevel.WARN, 'warn'],\n    [LogLevel.INFO, 'info'],\n    [LogLevel.DEBUG, 'debug'],\n    [LogLevel.TRACE, 'trace']\n  ]);\n\n  export function toString(level: LogLevel): string | undefined {\n    return strings.get(level);\n  }\n\n  export function fromString(levelStr: string): LogLevel | undefined {\n    for (const pair of strings) {\n      if (pair[1] === levelStr) {\n        return pair[0];\n      }\n    }\n\n    return undefined;\n  }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport namespace ConsoleLogger {\n  type Console = (message?: any, ...optionalParams: any[]) => void;\n  const originalConsoleLog = console.log;\n  const consoles = new Map<LogLevel, Console>([\n    [LogLevel.FATAL, console.error],\n    [LogLevel.ERROR, console.error],\n    [LogLevel.WARN, console.warn],\n    [LogLevel.INFO, console.info],\n    [LogLevel.DEBUG, console.debug],\n    [LogLevel.TRACE, console.trace]\n  ]);\n\n  export function reset(): void {\n    console.error = consoles.get(LogLevel.ERROR)!;\n    console.warn = consoles.get(LogLevel.WARN)!;\n    console.info = consoles.get(LogLevel.INFO)!;\n    console.debug = consoles.get(LogLevel.DEBUG)!;\n    console.trace = consoles.get(LogLevel.TRACE)!;\n    console.log = originalConsoleLog;\n  }\n\n  export function log(name: string, logLevel: number, message: string, params: any[]): void {\n    const console = consoles.get(logLevel) || originalConsoleLog;\n    const severity = (LogLevel.strings.get(logLevel) || 'unknown').toUpperCase();\n    console(`${name} ${severity} ${message}`, ...params);\n  }\n}\n"]}