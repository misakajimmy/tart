{"version":3,"sources":["common/types.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,oBAAY,OAAO,CAAC,CAAC,IAAI;IAAE,CAAC,UAAU,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;CAAE,CAAC;AAE5D,oBAAY,QAAQ,CAAC,CAAC,IAAI;KACvB,CAAC,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CAC9B,CAAC;AACF,oBAAY,gBAAgB,CAAC,CAAC,IAAI;KAC/B,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,KAAK,CAAC,MAAM,CAAC,CAAC,GACtC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAC1B,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CAC7B,CAAC;AACF,oBAAY,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;AACpC,oBAAY,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;AAEjD,MAAM,WAAW,cAAc,CAAC,CAAC;IAC/B,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC;IAC1B,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;CACnB;AAED,yBAAiB,cAAc,CAAC;IAC9B,KAAY,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,YAAY,CAAC,MAAM,CAAC,CAAC;IAChE,KAAY,eAAe,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,MAAM,CAAC;IAEtD,SAAsB,gBAAgB,CAAC,CAAC,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9H,SAAsB,gBAAgB,CAAC,CAAC,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAYlI,SAAgB,oBAAoB,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,EAAE,CAK3G;IAED,SAAgB,iBAAiB,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,EAAE,CAGtG;IAED,SAAsB,aAAa,CAAC,CAAC,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAG3H;IAED,SAAgB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC,GAAG,OAAO,CAExD;IAED,SAAgB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,CAAC,CAAC,GAAG,MAAM,CAE9E;CACF;AAED;;GAEG;AACH,wBAAgB,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,GAAE,MAAyB,GAAG,KAAK,CAEpF","file":"../../src/common/types.d.ts","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2017 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nexport type Mutable<T> = { -readonly [P in keyof T]: T[P] };\r\n\r\nexport type Deferred<T> = {\r\n  [P in keyof T]: Promise<T[P]>\r\n};\r\nexport type RecursivePartial<T> = {\r\n  [P in keyof T]?: T[P] extends Array<infer I>\r\n      ? Array<RecursivePartial<I>>\r\n      : RecursivePartial<T[P]>;\r\n};\r\nexport type MaybeArray<T> = T | T[];\r\nexport type MaybePromise<T> = T | PromiseLike<T>;\r\n\r\nexport interface Prioritizeable<T> {\r\n  readonly priority: number;\r\n  readonly value: T;\r\n}\r\n\r\nexport namespace Prioritizeable {\r\n  export type GetPriority<T> = (value: T) => MaybePromise<number>;\r\n  export type GetPrioritySync<T> = (value: T) => number;\r\n\r\n  export async function toPrioritizeable<T>(rawValue: MaybePromise<T>, getPriority: GetPriority<T>): Promise<Prioritizeable<T>>;\r\n  export async function toPrioritizeable<T>(rawValue: MaybePromise<T>[], getPriority: GetPriority<T>): Promise<Prioritizeable<T>[]>;\r\n  export async function toPrioritizeable<T>(rawValue: MaybeArray<MaybePromise<T>>, getPriority: GetPriority<T>): Promise<MaybeArray<Prioritizeable<T>>> {\r\n    if (rawValue instanceof Array) {\r\n      return Promise.all(\r\n          rawValue.map(v => toPrioritizeable(v, getPriority))\r\n      );\r\n    }\r\n    const value = await rawValue;\r\n    const priority = await getPriority(value);\r\n    return {priority, value};\r\n  }\r\n\r\n  export function toPrioritizeableSync<T>(rawValue: T[], getPriority: GetPrioritySync<T>): Prioritizeable<T>[] {\r\n    return rawValue.map(v => ({\r\n      value: v,\r\n      priority: getPriority(v)\r\n    }));\r\n  }\r\n\r\n  export function prioritizeAllSync<T>(values: T[], getPriority: GetPrioritySync<T>): Prioritizeable<T>[] {\r\n    const prioritizeable = toPrioritizeableSync(values, getPriority);\r\n    return prioritizeable.filter(isValid).sort(compare);\r\n  }\r\n\r\n  export async function prioritizeAll<T>(values: MaybePromise<T>[], getPriority: GetPriority<T>): Promise<Prioritizeable<T>[]> {\r\n    const prioritizeable = await toPrioritizeable(values, getPriority);\r\n    return prioritizeable.filter(isValid).sort(compare);\r\n  }\r\n\r\n  export function isValid<T>(p: Prioritizeable<T>): boolean {\r\n    return p.priority > 0;\r\n  }\r\n\r\n  export function compare<T>(p: Prioritizeable<T>, p2: Prioritizeable<T>): number {\r\n    return p2.priority - p.priority;\r\n  }\r\n}\r\n\r\n/**\r\n * Throws when called and statically make sure that all variants of a type were consumed.\r\n */\r\nexport function unreachable(_never: never, message: string = 'unhandled case'): never {\r\n  throw new Error(message);\r\n}\r\n"]}