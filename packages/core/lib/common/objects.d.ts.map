{"version":3,"sources":["common/objects.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,wBAAgB,SAAS,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAmBtC;AAED,wBAAgB,UAAU,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAmBvC;AAID,wBAAgB,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,SAAS,GAAG,IAAI,GAAG,GAAG,IAAI,CAAC,CAG/D;AAED;;GAEG;AACH,wBAAgB,OAAO,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAE5C","file":"../../src/common/objects.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport function deepClone<T>(obj: T): T {\n  if (!obj || typeof obj !== 'object') {\n    return obj;\n  }\n  if (obj instanceof RegExp) {\n    return obj;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const result: any = Array.isArray(obj) ? [] : {};\n  Object.keys(obj).forEach((key: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const prop = (<any>obj)[key];\n    if (prop && typeof prop === 'object') {\n      result[key] = deepClone(prop);\n    } else {\n      result[key] = prop;\n    }\n  });\n  return result;\n}\n\nexport function deepFreeze<T>(obj: T): T {\n  if (!obj || typeof obj !== 'object') {\n    return obj;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const stack: any[] = [obj];\n  while (stack.length > 0) {\n    const objectToFreeze = stack.shift();\n    Object.freeze(objectToFreeze);\n    for (const key in objectToFreeze) {\n      if (_hasOwnProperty.call(objectToFreeze, key)) {\n        const prop = objectToFreeze[key];\n        if (typeof prop === 'object' && !Object.isFrozen(prop)) {\n          stack.push(prop);\n        }\n      }\n    }\n  }\n  return obj;\n}\n\nconst _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport function notEmpty<T>(arg: T | undefined | null): arg is T {\n  // eslint-disable-next-line no-null/no-null\n  return arg !== undefined && arg !== null;\n}\n\n/**\n * `true` if the argument is an empty object. Otherwise, `false`.\n */\nexport function isEmpty(arg: Object): boolean {\n  return Object.keys(arg).length === 0 && arg.constructor === Object;\n}\n"]}