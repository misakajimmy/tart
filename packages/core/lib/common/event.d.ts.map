{"version":3,"sources":["common/event.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AAExC;;GAEG;AACH,MAAM,WAAW,KAAK,CAAC,CAAC;IAEtB;;;;OAIG;IACH,YAAY,EAAE,MAAM,CAAA;IAEpB;;;;;;OAMG;IACH,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE,QAAQ,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC;CACnF;AAED,yBAAiB,KAAK,CAAC;IAKd,MAAM,IAAI,EAAE,KAAK,CAAC,GAAG,CAQ1B,CAAC;IAEH;;;OAGG;IACH,SAAgB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAIzE;CACF","file":"../../src/common/event.d.ts","sourcesContent":["import {Disposable} from './disposable';\r\n\r\n/**\r\n * Represents a typed event.\r\n */\r\nexport interface Event<T> {\r\n\r\n  /**\r\n   * An emitter will print a warning if more listeners are added for this event.\r\n   * The event.maxListeners allows the limit to be modified for this specific event.\r\n   * The value can be set to 0 to indicate an unlimited number of listener.\r\n   */\r\n  maxListeners: number\r\n\r\n  /**\r\n   *\r\n   * @param listener The listener function will be call when the event happens.\r\n   * @param thisArgs The 'this' which will be used when calling the event listener.\r\n   * @param disposables An array to which a {{IDisposable}} will be added.\r\n   * @return a disposable to remove the listener again.\r\n   */\r\n  (listener: (e: T) => any, thisArgs?: any, disposables?: Disposable[]): Disposable;\r\n}\r\n\r\nexport namespace Event {\r\n  const _disposable = {\r\n    dispose(): void {\r\n    }\r\n  };\r\n  export const None: Event<any> = Object.assign(function (): { dispose(): void } {\r\n    return _disposable;\r\n  }, {\r\n    get maxListeners(): number {\r\n      return 0;\r\n    },\r\n    set maxListeners(maxListeners: number) {\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Given an event and a `map` function, returns another event which maps each element\r\n   * through the mapping function.\r\n   */\r\n  export function map<I, O>(event: Event<I>, mapFunc: (i: I) => O): Event<O> {\r\n    return Object.assign((listener: (e: O) => any, thisArgs?: any, disposables?: Disposable[]) => event(i => listener.call(thisArgs, mapFunc(i)), undefined, disposables), {\r\n      maxListeners: 0,\r\n    });\r\n  }\r\n}\r\n"]}