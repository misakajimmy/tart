{"version":3,"sources":["common/uri-command-handler.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAIlF,OAAO,EAAC,gBAAgB,EAAC,MAAM,6BAA6B,CAAC;AAE7D,OAAO,EAAC,cAAc,EAAC,MAAM,WAAW,CAAC;AACzC,OAAO,EAAC,UAAU,EAAC,MAAM,GAAG,CAAC;AAC7B,OAAO,GAAG,MAAM,OAAO,CAAC;AAExB,MAAM,WAAW,iBAAiB,CAAC,CAAC,SAAS,UAAU,CAAC,GAAG,CAAC,CAAE,SAAQ,cAAc;IAElF,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IAErC,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;IAE5C,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;CAE7C;AAED;;GAEG;AACH,MAAM,WAAW,uBAAwB,SAAQ,iBAAiB,CAAC,GAAG,CAAC;CAEtE;AAED;;GAEG;AACH,MAAM,WAAW,sBAAuB,SAAQ,iBAAiB,CAAC,GAAG,EAAE,CAAC;CAEvE;AAED,qBAAa,sBAAsB,CAAC,CAAC,SAAS,UAAU,CAAC,GAAG,CAAC,CAAE,YAAW,iBAAiB,CAAC,CAAC,CAAC;IAKxF,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB;IACrD,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAChD,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,sBAAsB,CAAC,OAAO;IAN/D;;OAEG;gBAEoB,gBAAgB,EAAE,gBAAgB,EAClC,OAAO,EAAE,iBAAiB,CAAC,CAAC,CAAC,EAC7B,OAAO,CAAC,EAAE,sBAAsB,CAAC,OAAO;IAI/D,OAAO,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,GAAG,SAAS;IAK3C,SAAS,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO;IAWlC,SAAS,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO;IAWlC,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,SAAS;IAmB/C,SAAS,CAAC,cAAc,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC;IASnE,SAAS,CAAC,OAAO,IAAI,OAAO,GAAG,SAAS;CAGzC;AAED,yBAAiB,sBAAsB,CAAC;IACtC;;OAEG;IACH,UAAiB,OAAO;QAEtB;;WAEG;QACH,QAAQ,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC;KAE1B;IAED;;OAEG;IACH,SAAgB,UAAU,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,OAAO,EAAE,iBAAiB,CAAC,GAAG,CAAC,GAAG,sBAAsB,CAAC,GAAG,CAAC,CAG3H;IAED;;OAEG;IACH,SAAgB,WAAW,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,OAAO,EAAE,iBAAiB,CAAC,GAAG,EAAE,CAAC,GAAG,sBAAsB,CAAC,GAAG,EAAE,CAAC,CAGhI;CACF","file":"../../src/common/uri-command-handler.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {SelectionService} from '../common/selection-service';\nimport {UriSelection} from '../common/selection';\nimport {CommandHandler} from './command';\nimport {MaybeArray} from '.';\nimport URI from './uri';\n\nexport interface UriCommandHandler<T extends MaybeArray<URI>> extends CommandHandler {\n\n  execute(uri: T, ...args: any[]): any;\n\n  isEnabled?(uri: T, ...args: any[]): boolean;\n\n  isVisible?(uri: T, ...args: any[]): boolean;\n\n}\n\n/**\n * Handler for a single URI-based selection.\n */\nexport interface SingleUriCommandHandler extends UriCommandHandler<URI> {\n\n}\n\n/**\n * Handler for multiple URIs.\n */\nexport interface MultiUriCommandHandler extends UriCommandHandler<URI[]> {\n\n}\n\nexport class UriAwareCommandHandler<T extends MaybeArray<URI>> implements UriCommandHandler<T> {\n  /**\n   * @deprecated since 1.6.0. Please use `UriAwareCommandHandler.MonoSelect` or `UriAwareCommandHandler.MultiSelect`.\n   */\n  constructor(\n      protected readonly selectionService: SelectionService,\n      protected readonly handler: UriCommandHandler<T>,\n      protected readonly options?: UriAwareCommandHandler.Options\n  ) {\n  }\n\n  execute(...args: any[]): object | undefined {\n    const [uri, ...others] = this.getArgsWithUri(...args);\n    return uri ? this.handler.execute(uri, ...others) : undefined;\n  }\n\n  isVisible(...args: any[]): boolean {\n    const [uri, ...others] = this.getArgsWithUri(...args);\n    if (uri) {\n      if (this.handler.isVisible) {\n        return this.handler.isVisible(uri, ...others);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEnabled(...args: any[]): boolean {\n    const [uri, ...others] = this.getArgsWithUri(...args);\n    if (uri) {\n      if (this.handler.isEnabled) {\n        return this.handler.isEnabled(uri, ...others);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  protected getUri(...args: any[]): T | undefined {\n    const [maybeUriArray] = args;\n    const firstArgIsOK = this.isMulti()\n        ? Array.isArray(maybeUriArray) && maybeUriArray.every(uri => uri instanceof URI)\n        : maybeUriArray instanceof URI;\n\n    if (firstArgIsOK) {\n      return maybeUriArray;\n    }\n\n    const {selection} = this.selectionService;\n\n    const uriOrUris = this.isMulti()\n        ? UriSelection.getUris(selection)\n        : UriSelection.getUri(selection);\n\n    return uriOrUris as T;\n  }\n\n  protected getArgsWithUri(...args: any[]): [T | undefined, ...any[]] {\n    const uri = this.getUri(...args);\n    const [maybeUri, ...others] = args;\n    if (uri === maybeUri) {\n      return [maybeUri, ...others];\n    }\n    return [uri, ...args];\n  }\n\n  protected isMulti(): boolean | undefined {\n    return this.options && !!this.options.multi;\n  }\n}\n\nexport namespace UriAwareCommandHandler {\n  /**\n   * Further options for the URI aware command handler instantiation.\n   */\n  export interface Options {\n\n    /**\n     * `true` if the handler supports multiple selection. Otherwise, `false`. Defaults to `false`.\n     */\n    readonly multi?: boolean,\n\n  }\n\n  /**\n   * @returns a command handler for mono-select contexts that expects a `URI` as the first parameter of its methods.\n   */\n  export function MonoSelect(selectionService: SelectionService, handler: UriCommandHandler<URI>): UriAwareCommandHandler<URI> {\n    /* eslint-disable-next-line deprecation/deprecation*/ // Safe to use when the generic and the options agree.\n    return new UriAwareCommandHandler<URI>(selectionService, handler, {multi: false});\n  }\n\n  /**\n   * @returns a command handler for multi-select contexts that expects a `URI[]` as the first parameter of its methods.\n   */\n  export function MultiSelect(selectionService: SelectionService, handler: UriCommandHandler<URI[]>): UriAwareCommandHandler<URI[]> {\n    /* eslint-disable-next-line deprecation/deprecation*/ // Safe to use when the generic and the options agree.\n    return new UriAwareCommandHandler<URI[]>(selectionService, handler, {multi: true});\n  }\n}\n\n"]}