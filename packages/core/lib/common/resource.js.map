{"version":3,"sources":["common/resource.ts"],"names":[],"mappings":"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","file":"../../src/common/resource.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable, named} from 'inversify';\nimport {TextDocumentContentChangeEvent} from 'vscode-languageserver-protocol';\nimport URI from '../common/uri';\nimport {ContributionProvider} from './contribution-provider';\nimport {Event} from './event';\nimport {Emitter} from './emitter';\nimport {Disposable} from './disposable';\nimport {MaybePromise} from './types';\nimport {CancellationToken} from './cancellation';\nimport {ApplicationError} from './application-error';\nimport {Readable, ReadableStream} from './stream';\nimport {Reference, SyncReferenceCollection} from './reference';\n\nexport interface ResourceVersion {\n}\n\nexport interface ResourceReadOptions {\n  encoding?: string\n}\n\nexport interface ResourceSaveOptions {\n  encoding?: string\n  overwriteEncoding?: boolean\n  version?: ResourceVersion\n}\n\nexport interface Resource extends Disposable {\n  readonly uri: URI;\n  /**\n   * Latest read version of this resource.\n   *\n   * Optional if a resource does not support versioning, check with `in` operator`.\n   * Undefined if a resource did not read content yet.\n   */\n  readonly version?: ResourceVersion | undefined;\n  /**\n   * Latest read encoding of this resource.\n   *\n   * Optional if a resource does not support encoding, check with `in` operator`.\n   * Undefined if a resource did not read content yet.\n   */\n  readonly encoding?: string | undefined;\n  readonly onDidChangeContents?: Event<void>;\n\n  /**\n   * Reads latest content of this resource.\n   *\n   * If a resource supports versioning it updates version to latest.\n   * If a resource supports encoding it updates encoding to latest.\n   *\n   * @throws `ResourceError.NotFound` if a resource not found\n   */\n  readContents(options?: ResourceReadOptions): Promise<string>;\n\n  /**\n   * Stream latest content of this resource.\n   *\n   * If a resource supports versioning it updates version to latest.\n   * If a resource supports encoding it updates encoding to latest.\n   *\n   * @throws `ResourceError.NotFound` if a resource not found\n   */\n  readStream?(options?: ResourceReadOptions): Promise<ReadableStream<string>>;\n\n  /**\n   * Rewrites the complete content for this resource.\n   * If a resource does not exist it will be created.\n   *\n   * If a resource supports versioning clients can pass some version\n   * to check against it, if it is not provided latest version is used.\n   *\n   * It updates version and encoding to latest.\n   *\n   * @throws `ResourceError.OutOfSync` if latest resource version is out of sync with the given\n   */\n  saveContents?(content: string, options?: ResourceSaveOptions): Promise<void>;\n\n  /**\n   * Rewrites the complete content for this resource.\n   * If a resource does not exist it will be created.\n   *\n   * If a resource supports versioning clients can pass some version\n   * to check against it, if it is not provided latest version is used.\n   *\n   * It updates version and encoding to latest.\n   *\n   * @throws `ResourceError.OutOfSync` if latest resource version is out of sync with the given\n   */\n  saveStream?(content: Readable<string>, options?: ResourceSaveOptions): Promise<void>;\n\n  /**\n   * Applies incremental content changes to this resource.\n   *\n   * If a resource supports versioning clients can pass some version\n   * to check against it, if it is not provided latest version is used.\n   * It updates version to latest.\n   *\n   * @throws `ResourceError.NotFound` if a resource not found or was not read yet\n   * @throws `ResourceError.OutOfSync` if latest resource version is out of sync with the given\n   */\n  saveContentChanges?(changes: TextDocumentContentChangeEvent[], options?: ResourceSaveOptions): Promise<void>;\n\n  guessEncoding?(): Promise<string | undefined>\n}\n\nexport namespace Resource {\n  export interface SaveContext {\n    contentLength: number\n    content: string | Readable<string>\n    changes?: TextDocumentContentChangeEvent[]\n    options?: ResourceSaveOptions\n  }\n\n  export async function save(resource: Resource, context: SaveContext, token?: CancellationToken): Promise<void> {\n    if (!resource.saveContents) {\n      return;\n    }\n    if (await trySaveContentChanges(resource, context)) {\n      return;\n    }\n    if (token && token.isCancellationRequested) {\n      return;\n    }\n    if (typeof context.content !== 'string' && resource.saveStream) {\n      await resource.saveStream(context.content, context.options);\n    } else {\n      const content = typeof context.content === 'string' ? context.content : Readable.toString(context.content);\n      await resource.saveContents(content, context.options);\n    }\n  }\n\n  export async function trySaveContentChanges(resource: Resource, context: SaveContext): Promise<boolean> {\n    if (!context.changes || !resource.saveContentChanges || shouldSaveContent(resource, context)) {\n      return false;\n    }\n    try {\n      await resource.saveContentChanges(context.changes, context.options);\n      return true;\n    } catch (e) {\n      if (!ResourceError.NotFound.is(e) && !ResourceError.OutOfSync.is(e)) {\n        console.error(`Failed to apply incremental changes to '${resource.uri.toString()}':`, e);\n      }\n      return false;\n    }\n  }\n\n  export function shouldSaveContent(resource: Resource, {contentLength, changes}: SaveContext): boolean {\n    if (!changes || (resource.saveStream && contentLength > 32 * 1024 * 1024)) {\n      return true;\n    }\n    let contentChangesLength = 0;\n    for (const change of changes) {\n      contentChangesLength += JSON.stringify(change).length;\n      if (contentChangesLength > contentLength) {\n        return true;\n      }\n    }\n    return contentChangesLength > contentLength;\n  }\n}\n\nexport namespace ResourceError {\n  export const NotFound = ApplicationError.declare(-40000, (raw: ApplicationError.Literal<{ uri: URI }>) => raw);\n  export const OutOfSync = ApplicationError.declare(-40001, (raw: ApplicationError.Literal<{ uri: URI }>) => raw);\n}\n\nexport const ResourceResolver = Symbol('ResourceResolver');\n\nexport interface ResourceResolver {\n  /**\n   * Reject if a resource cannot be provided.\n   */\n  resolve(uri: URI): MaybePromise<Resource>;\n}\n\nexport const ResourceProvider = Symbol('ResourceProvider');\nexport type ResourceProvider = (uri: URI) => Promise<Resource>;\n\n@injectable()\nexport class DefaultResourceProvider {\n\n  constructor(\n      @inject(ContributionProvider) @named(ResourceResolver)\n      protected readonly resolversProvider: ContributionProvider<ResourceResolver>\n  ) {\n  }\n\n  /**\n   * Reject if a resource cannot be provided.\n   */\n  async get(uri: URI): Promise<Resource> {\n    const resolvers = this.resolversProvider.getContributions();\n    for (const resolver of resolvers) {\n      try {\n        return await resolver.resolve(uri);\n      } catch (err) {\n        // no-op\n      }\n    }\n    return Promise.reject(new Error(`A resource provider for '${uri.toString()}' is not registered.`));\n  }\n\n}\n\nexport class MutableResource implements Resource {\n  protected readonly onDidChangeContentsEmitter = new Emitter<void>();\n  readonly onDidChangeContents = this.onDidChangeContentsEmitter.event;\n  private contents: string = '';\n\n  constructor(readonly uri: URI) {\n  }\n\n  dispose(): void {\n  }\n\n  async readContents(): Promise<string> {\n    return this.contents;\n  }\n\n  async saveContents(contents: string): Promise<void> {\n    this.contents = contents;\n    this.fireDidChangeContents();\n  }\n\n  protected fireDidChangeContents(): void {\n    this.onDidChangeContentsEmitter.fire(undefined);\n  }\n}\n\nexport class ReferenceMutableResource implements Resource {\n  constructor(protected reference: Reference<MutableResource>) {\n  }\n\n  get uri(): URI {\n    return this.reference.object.uri;\n  }\n\n  get onDidChangeContents(): Event<void> {\n    return this.reference.object.onDidChangeContents;\n  }\n\n  dispose(): void {\n    this.reference.dispose();\n  }\n\n  readContents(): Promise<string> {\n    return this.reference.object.readContents();\n  }\n\n  saveContents(contents: string): Promise<void> {\n    return this.reference.object.saveContents(contents);\n  }\n}\n\n@injectable()\nexport class InMemoryResources implements ResourceResolver {\n\n  protected readonly resources = new SyncReferenceCollection<string, MutableResource>(uri => new MutableResource(new URI(uri)));\n\n  add(uri: URI, contents: string): Resource {\n    const resourceUri = uri.toString();\n    if (this.resources.has(resourceUri)) {\n      throw new Error(`Cannot add already existing in-memory resource '${resourceUri}'`);\n    }\n    const resource = this.acquire(resourceUri);\n    resource.saveContents(contents);\n    return resource;\n  }\n\n  update(uri: URI, contents: string): Resource {\n    const resourceUri = uri.toString();\n    const resource = this.resources.get(resourceUri);\n    if (!resource) {\n      throw new Error(`Cannot update non-existed in-memory resource '${resourceUri}'`);\n    }\n    resource.saveContents(contents);\n    return resource;\n  }\n\n  resolve(uri: URI): Resource {\n    const uriString = uri.toString();\n    if (!this.resources.has(uriString)) {\n      throw new Error(`In memory '${uriString}' resource does not exist.`);\n    }\n    return this.acquire(uriString);\n  }\n\n  protected acquire(uri: string): ReferenceMutableResource {\n    const reference = this.resources.acquire(uri);\n    return new ReferenceMutableResource(reference);\n  }\n}\n\nexport const MEMORY_TEXT = 'mem-txt';\n\n/**\n * Resource implementation for 'mem-txt' URI scheme where content is saved in URI query.\n */\nexport class InMemoryTextResource implements Resource {\n  constructor(readonly uri: URI) {\n  }\n\n  async readContents(options?: { encoding?: string | undefined; } | undefined): Promise<string> {\n    return this.uri.query;\n  }\n\n  dispose(): void {\n  }\n}\n\n/**\n * ResourceResolver implementation for 'mem-txt' URI scheme.\n */\n@injectable()\nexport class InMemoryTextResourceResolver implements ResourceResolver {\n  resolve(uri: URI): MaybePromise<Resource> {\n    if (uri.scheme !== MEMORY_TEXT) {\n      throw new Error(`Expected a URI with ${MEMORY_TEXT} scheme. Was: ${uri}.`);\n    }\n    return new InMemoryTextResource(uri);\n  }\n}\n"]}