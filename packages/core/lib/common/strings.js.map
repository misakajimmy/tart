{"version":3,"sources":["common/strings.ts"],"names":[],"mappings":"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","file":"../../src/common/strings.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/base/common/strings.ts\n\nimport {CharCode} from './char-code';\n\n/**\n * Determines if haystack ends with needle.\n */\nexport function endsWith(haystack: string, needle: string): boolean {\n  const diff = haystack.length - needle.length;\n  if (diff > 0) {\n    return haystack.indexOf(needle, diff) === diff;\n  } else if (diff === 0) {\n    return haystack === needle;\n  } else {\n    return false;\n  }\n}\n\nexport function isLowerAsciiLetter(code: number): boolean {\n  return code >= CharCode.a && code <= CharCode.z;\n}\n\nexport function isUpperAsciiLetter(code: number): boolean {\n  return code >= CharCode.A && code <= CharCode.Z;\n}\n\nfunction isAsciiLetter(code: number): boolean {\n  return isLowerAsciiLetter(code) || isUpperAsciiLetter(code);\n}\n\nexport function equalsIgnoreCase(a: string, b: string): boolean {\n  const len1 = a ? a.length : 0;\n  const len2 = b ? b.length : 0;\n\n  if (len1 !== len2) {\n    return false;\n  }\n\n  return doEqualsIgnoreCase(a, b);\n}\n\nfunction doEqualsIgnoreCase(a: string, b: string, stopAt = a.length): boolean {\n  if (typeof a !== 'string' || typeof b !== 'string') {\n    return false;\n  }\n\n  for (let i = 0; i < stopAt; i++) {\n    const codeA = a.charCodeAt(i);\n    const codeB = b.charCodeAt(i);\n\n    if (codeA === codeB) {\n      continue;\n    }\n\n    // a-z A-Z\n    if (isAsciiLetter(codeA) && isAsciiLetter(codeB)) {\n      const diff = Math.abs(codeA - codeB);\n      if (diff !== 0 && diff !== 32) {\n        return false;\n      }\n    }\n\n        // Any other charcode\n    // tslint:disable-next-line:one-line\n    else {\n      if (String.fromCharCode(codeA).toLowerCase() !== String.fromCharCode(codeB).toLowerCase()) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns the length of the common prefix of the two strings.\n */\nexport function commonPrefixLength(a: string, b: string): number {\n\n  let i: number;\n  const len = Math.min(a.length, b.length);\n\n  for (i = 0; i < len; i++) {\n    if (a.charCodeAt(i) !== b.charCodeAt(i)) {\n      return i;\n    }\n  }\n\n  return len;\n}\n\n/**\n * Escapes regular expression characters in a given string\n */\nexport function escapeRegExpCharacters(value: string): string {\n  return value.replace(/[\\-\\\\\\{\\}\\*\\+\\?\\|\\^\\$\\.\\[\\]\\(\\)\\#]/g, '\\\\$&');\n}\n\nexport function startsWithIgnoreCase(str: string, candidate: string): boolean {\n  const candidateLength = candidate.length;\n  if (candidate.length > str.length) {\n    return false;\n  }\n\n  return doEqualsIgnoreCase(str, candidate, candidateLength);\n}\n\nexport function* split(s: string, splitter: string): IterableIterator<string> {\n  let start = 0;\n  while (start < s.length) {\n    let end = s.indexOf(splitter, start);\n    if (end === -1) {\n      end = s.length;\n    }\n\n    yield s.substring(start, end);\n    start = end + splitter.length;\n  }\n}\n\nexport function escapeInvisibleChars(value: string): string {\n  return value.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n}\n\nexport function unescapeInvisibleChars(value: string): string {\n  return value.replace(/\\\\n/g, '\\n').replace(/\\\\r/g, '\\r');\n}\n\nexport function compare(a: string, b: string): number {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nexport function compareSubstring(a: string, b: string, aStart: number = 0, aEnd: number = a.length, bStart: number = 0, bEnd: number = b.length): number {\n  for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {\n    const codeA = a.charCodeAt(aStart);\n    const codeB = b.charCodeAt(bStart);\n    if (codeA < codeB) {\n      return -1;\n    } else if (codeA > codeB) {\n      return 1;\n    }\n  }\n  const aLen = aEnd - aStart;\n  const bLen = bEnd - bStart;\n  if (aLen < bLen) {\n    return -1;\n  } else if (aLen > bLen) {\n    return 1;\n  }\n  return 0;\n}\n\nexport function compareIgnoreCase(a: string, b: string): number {\n  return compareSubstringIgnoreCase(a, b, 0, a.length, 0, b.length);\n}\n\nexport function compareSubstringIgnoreCase(a: string, b: string, aStart: number = 0, aEnd: number = a.length, bStart: number = 0, bEnd: number = b.length): number {\n\n  for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {\n\n    const codeA = a.charCodeAt(aStart);\n    const codeB = b.charCodeAt(bStart);\n\n    if (codeA === codeB) {\n      // equal\n      continue;\n    }\n\n    const diff = codeA - codeB;\n    if (diff === 32 && isUpperAsciiLetter(codeB)) { // codeB =[65-90] && codeA =[97-122]\n      continue;\n\n    } else if (diff === -32 && isUpperAsciiLetter(codeA)) {  // codeB =[97-122] && codeA =[65-90]\n      continue;\n    }\n\n    if (isLowerAsciiLetter(codeA) && isLowerAsciiLetter(codeB)) {\n      //\n      return diff;\n\n    } else {\n      return compareSubstring(a.toLowerCase(), b.toLowerCase(), aStart, aEnd, bStart, bEnd);\n    }\n  }\n\n  const aLen = aEnd - aStart;\n  const bLen = bEnd - bStart;\n\n  if (aLen < bLen) {\n    return -1;\n  } else if (aLen > bLen) {\n    return 1;\n  }\n\n  return 0;\n}\n"]}