{"version":3,"sources":["common/types.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAoBlF,MAAM,KAAW,cAAc,CAyC9B;AAzCD,WAAiB,cAAc;IAMtB,KAAK,UAAU,gBAAgB,CAAI,QAAqC,EAAE,WAA2B;QAC1G,IAAI,QAAQ,YAAY,KAAK,EAAE;YAC7B,OAAO,OAAO,CAAC,GAAG,CACd,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CACtD,CAAC;SACH;QACD,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC;QAC7B,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1C,OAAO,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC;IAC3B,CAAC;IATqB,+BAAgB,mBASrC,CAAA;IAED,SAAgB,oBAAoB,CAAI,QAAa,EAAE,WAA+B;QACpF,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACxB,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;SACzB,CAAC,CAAC,CAAC;IACN,CAAC;IALe,mCAAoB,uBAKnC,CAAA;IAED,SAAgB,iBAAiB,CAAI,MAAW,EAAE,WAA+B;QAC/E,MAAM,cAAc,GAAG,oBAAoB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QACjE,OAAO,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC;IAHe,gCAAiB,oBAGhC,CAAA;IAEM,KAAK,UAAU,aAAa,CAAI,MAAyB,EAAE,WAA2B;QAC3F,MAAM,cAAc,GAAG,MAAM,gBAAgB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QACnE,OAAO,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC;IAHqB,4BAAa,gBAGlC,CAAA;IAED,SAAgB,OAAO,CAAI,CAAoB;QAC7C,OAAO,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC;IACxB,CAAC;IAFe,sBAAO,UAEtB,CAAA;IAED,SAAgB,OAAO,CAAI,CAAoB,EAAE,EAAqB;QACpE,OAAO,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;IAClC,CAAC;IAFe,sBAAO,UAEtB,CAAA;AACH,CAAC,EAzCgB,cAAc,KAAd,cAAc,QAyC9B;AAED;;GAEG;AACH,MAAM,UAAU,WAAW,CAAC,MAAa,EAAE,UAAkB,gBAAgB;IAC3E,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AAC3B,CAAC","file":"../../src/common/types.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2017 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nexport type Mutable<T> = { -readonly [P in keyof T]: T[P] };\r\n\r\nexport type Deferred<T> = {\r\n  [P in keyof T]: Promise<T[P]>\r\n};\r\nexport type RecursivePartial<T> = {\r\n  [P in keyof T]?: T[P] extends Array<infer I>\r\n      ? Array<RecursivePartial<I>>\r\n      : RecursivePartial<T[P]>;\r\n};\r\nexport type MaybeArray<T> = T | T[];\r\nexport type MaybePromise<T> = T | PromiseLike<T>;\r\n\r\nexport interface Prioritizeable<T> {\r\n  readonly priority: number;\r\n  readonly value: T;\r\n}\r\n\r\nexport namespace Prioritizeable {\r\n  export type GetPriority<T> = (value: T) => MaybePromise<number>;\r\n  export type GetPrioritySync<T> = (value: T) => number;\r\n\r\n  export async function toPrioritizeable<T>(rawValue: MaybePromise<T>, getPriority: GetPriority<T>): Promise<Prioritizeable<T>>;\r\n  export async function toPrioritizeable<T>(rawValue: MaybePromise<T>[], getPriority: GetPriority<T>): Promise<Prioritizeable<T>[]>;\r\n  export async function toPrioritizeable<T>(rawValue: MaybeArray<MaybePromise<T>>, getPriority: GetPriority<T>): Promise<MaybeArray<Prioritizeable<T>>> {\r\n    if (rawValue instanceof Array) {\r\n      return Promise.all(\r\n          rawValue.map(v => toPrioritizeable(v, getPriority))\r\n      );\r\n    }\r\n    const value = await rawValue;\r\n    const priority = await getPriority(value);\r\n    return {priority, value};\r\n  }\r\n\r\n  export function toPrioritizeableSync<T>(rawValue: T[], getPriority: GetPrioritySync<T>): Prioritizeable<T>[] {\r\n    return rawValue.map(v => ({\r\n      value: v,\r\n      priority: getPriority(v)\r\n    }));\r\n  }\r\n\r\n  export function prioritizeAllSync<T>(values: T[], getPriority: GetPrioritySync<T>): Prioritizeable<T>[] {\r\n    const prioritizeable = toPrioritizeableSync(values, getPriority);\r\n    return prioritizeable.filter(isValid).sort(compare);\r\n  }\r\n\r\n  export async function prioritizeAll<T>(values: MaybePromise<T>[], getPriority: GetPriority<T>): Promise<Prioritizeable<T>[]> {\r\n    const prioritizeable = await toPrioritizeable(values, getPriority);\r\n    return prioritizeable.filter(isValid).sort(compare);\r\n  }\r\n\r\n  export function isValid<T>(p: Prioritizeable<T>): boolean {\r\n    return p.priority > 0;\r\n  }\r\n\r\n  export function compare<T>(p: Prioritizeable<T>, p2: Prioritizeable<T>): number {\r\n    return p2.priority - p.priority;\r\n  }\r\n}\r\n\r\n/**\r\n * Throws when called and statically make sure that all variants of a type were consumed.\r\n */\r\nexport function unreachable(_never: never, message: string = 'unhandled case'): never {\r\n  throw new Error(message);\r\n}\r\n"]}