{"version":3,"sources":["common/i18n/localization-provider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAG5C,qBACa,oBAAoB;IAE/B,SAAS,CAAC,aAAa,4BAAmC;IAC1D,SAAS,CAAC,eAAe,SAAQ;IAEjC,gBAAgB,CAAC,GAAG,aAAa,EAAE,YAAY,EAAE,GAAG,IAAI;IAgBxD,kBAAkB,CAAC,UAAU,EAAE,MAAM,GAAG,IAAI;IAI5C,kBAAkB,IAAI,MAAM;IAI5B,qBAAqB,CAAC,GAAG,CAAC,EAAE,OAAO,GAAG,MAAM,EAAE;IAU9C,gBAAgB,CAAC,UAAU,EAAE,MAAM,GAAG,YAAY;CAOnD","file":"../../../src/common/i18n/localization-provider.d.ts","sourcesContent":["import {Localization} from './localization';\nimport {injectable} from 'inversify';\n\n@injectable()\nexport class LocalizationProvider {\n\n  protected localizations = new Map<string, Localization>();\n  protected currentLanguage = 'en';\n\n  addLocalizations(...localizations: Localization[]): void {\n    for (const localization of localizations) {\n      let merged = this.localizations.get(localization.languageId);\n      if (!merged) {\n        this.localizations.set(localization.languageId, merged = {\n          languageId: localization.languageId,\n          languageName: localization.languageName,\n          localizedLanguageName: localization.localizedLanguageName,\n          translations: {}\n        });\n      }\n      merged.languagePack = merged.languagePack || localization.languagePack;\n      Object.assign(merged.translations, localization.translations);\n    }\n  }\n\n  setCurrentLanguage(languageId: string): void {\n    this.currentLanguage = languageId;\n  }\n\n  getCurrentLanguage(): string {\n    return this.currentLanguage;\n  }\n\n  getAvailableLanguages(all?: boolean): string[] {\n    const languageIds: string[] = [];\n    for (const localization of this.localizations.values()) {\n      if (all || localization.languagePack) {\n        languageIds.push(localization.languageId);\n      }\n    }\n    return languageIds.sort((a, b) => a.localeCompare(b));\n  }\n\n  loadLocalization(languageId: string): Localization {\n    return this.localizations.get(languageId) || {\n      languageId,\n      translations: {}\n    };\n  }\n\n}\n"]}