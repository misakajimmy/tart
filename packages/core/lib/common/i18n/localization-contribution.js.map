{"version":3,"sources":["common/i18n/localization-contribution.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAC,MAAM,WAAW,CAAC;AACpD,OAAO,EAAC,oBAAoB,EAAC,MAAM,0BAA0B,CAAC;AAE9D,OAAO,EAAC,oBAAoB,EAAC,MAAM,yBAAyB,CAAC;AAG7D,MAAM,CAAC,MAAM,wBAAwB,GAAG,MAAM,CAAC,0BAA0B,CAAC,CAAC;AAO3E,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAGZ,oBAAoB,CAAuB;IAG3C,aAAa,CAAiD;IAEjF,UAAU;QACR,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,GAAG,CACrC,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAC3D,CAAA;IACH,CAAC;IAED,oBAAoB,CAAC,YAA0B;QAC7C,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;IAC3D,CAAC;IAED,+BAA+B,CAAC,MAAc,EAAE,QAAiB;QAC/D,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACxD,MAAM,YAAY,GAAiB;YACjC,UAAU,EAAE,MAAM;YAClB,YAAY;SACb,CAAC;QACF,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;IAES,mBAAmB,CAAC,YAAqB;QACjD,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,EAAE;YACpD,MAAM,MAAM,GAA2B,EAAE,CAAC;YAC1C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;gBACvD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7B,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;iBACrB;qBAAM,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClD,KAAK,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;wBAC5D,MAAM,CAAC,GAAG,GAAG,IAAI,OAAO,EAAE,CAAC,GAAG,SAAS,CAAC;qBACzC;iBACF;aACF;YACD,OAAO,MAAM,CAAC;SACf;aAAM;YACL,OAAO,EAAE,CAAC;SACX;IACH,CAAC;IAES,cAAc,CAAC,gBAAwB;QAC/C,MAAM,KAAK,GAAG,oBAAoB,CAAC;QACnC,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC3C,IAAI,KAAK,EAAE;YACT,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;SACjB;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF,CAAA;AAnDC;IADC,MAAM,CAAC,oBAAoB,CAAC;kEACiC;AAG9D;IADC,MAAM,CAAC,oBAAoB,CAAC;IAAE,KAAK,CAAC,wBAAwB,CAAC;2DACmB;AANtE,oBAAoB;IADhC,UAAU,EAAE;GACA,oBAAoB,CAsDhC;SAtDY,oBAAoB","file":"../../../src/common/i18n/localization-contribution.js","sourcesContent":["import {inject, injectable, named} from 'inversify';\nimport {ContributionProvider} from '../contribution-provider';\nimport {Localization} from './localization';\nimport {LocalizationProvider} from './localization-provider';\nimport {FrontendApplicationContribution} from '../../browser';\n\nexport const LocalizationContribution = Symbol('LocalizationContribution');\n\nexport interface LocalizationContribution {\n  registerLocalizations(registry: LocalizationRegistry): void;\n}\n\n@injectable()\nexport class LocalizationRegistry implements FrontendApplicationContribution {\n\n  @inject(LocalizationProvider)\n  protected readonly localizationProvider: LocalizationProvider;\n\n  @inject(ContributionProvider) @named(LocalizationContribution)\n  protected readonly contributions: ContributionProvider<LocalizationContribution>;\n\n  initialize(): void {\n    this.contributions.getContributions().map(\n        contribution => contribution.registerLocalizations(this)\n    )\n  }\n\n  registerLocalization(localization: Localization): void {\n    this.localizationProvider.addLocalizations(localization);\n  }\n\n  registerLocalizationFromRequire(locale: string, required: unknown): void {\n    const translations = this.flattenTranslations(required);\n    const localization: Localization = {\n      languageId: locale,\n      translations\n    };\n    this.registerLocalization(localization);\n  }\n\n  protected flattenTranslations(localization: unknown): Record<string, string> {\n    if (typeof localization === 'object' && localization) {\n      const record: Record<string, string> = {};\n      for (const [key, value] of Object.entries(localization)) {\n        if (typeof value === 'string') {\n          record[key] = value;\n        } else if (value && typeof value === 'object') {\n          const flattened = this.flattenTranslations(value);\n          for (const [flatKey, flatValue] of Object.entries(flattened)) {\n            record[`${key}/${flatKey}`] = flatValue;\n          }\n        }\n      }\n      return record;\n    } else {\n      return {};\n    }\n  }\n\n  protected identifyLocale(localizationPath: string): string | undefined {\n    const regex = /nls\\.(\\w+)\\.json$/i;\n    const match = regex.exec(localizationPath);\n    if (match) {\n      return match[1];\n    }\n    return undefined;\n  }\n}\n"]}