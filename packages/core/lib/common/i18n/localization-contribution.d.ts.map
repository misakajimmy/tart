{"version":3,"sources":["common/i18n/localization-contribution.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,oBAAoB,EAAC,MAAM,0BAA0B,CAAC;AAC9D,OAAO,EAAC,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAC,oBAAoB,EAAC,MAAM,yBAAyB,CAAC;AAC7D,OAAO,EAAC,+BAA+B,EAAC,MAAM,eAAe,CAAC;AAE9D,eAAO,MAAM,wBAAwB,eAAqC,CAAC;AAE3E,MAAM,WAAW,wBAAwB;IACvC,qBAAqB,CAAC,QAAQ,EAAE,oBAAoB,GAAG,IAAI,CAAC;CAC7D;AAED,qBACa,oBAAqB,YAAW,+BAA+B;IAG1E,SAAS,CAAC,QAAQ,CAAC,oBAAoB,EAAE,oBAAoB,CAAC;IAG9D,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,oBAAoB,CAAC,wBAAwB,CAAC,CAAC;IAEjF,UAAU,IAAI,IAAI;IAMlB,oBAAoB,CAAC,YAAY,EAAE,YAAY,GAAG,IAAI;IAItD,+BAA+B,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,GAAG,IAAI;IASxE,SAAS,CAAC,mBAAmB,CAAC,YAAY,EAAE,OAAO,GAAG,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC;IAmB5E,SAAS,CAAC,cAAc,CAAC,gBAAgB,EAAE,MAAM,GAAG,MAAM,GAAG,SAAS;CAQvE","file":"../../../src/common/i18n/localization-contribution.d.ts","sourcesContent":["import {inject, injectable, named} from 'inversify';\nimport {ContributionProvider} from '../contribution-provider';\nimport {Localization} from './localization';\nimport {LocalizationProvider} from './localization-provider';\nimport {FrontendApplicationContribution} from '../../browser';\n\nexport const LocalizationContribution = Symbol('LocalizationContribution');\n\nexport interface LocalizationContribution {\n  registerLocalizations(registry: LocalizationRegistry): void;\n}\n\n@injectable()\nexport class LocalizationRegistry implements FrontendApplicationContribution {\n\n  @inject(LocalizationProvider)\n  protected readonly localizationProvider: LocalizationProvider;\n\n  @inject(ContributionProvider) @named(LocalizationContribution)\n  protected readonly contributions: ContributionProvider<LocalizationContribution>;\n\n  initialize(): void {\n    this.contributions.getContributions().map(\n        contribution => contribution.registerLocalizations(this)\n    )\n  }\n\n  registerLocalization(localization: Localization): void {\n    this.localizationProvider.addLocalizations(localization);\n  }\n\n  registerLocalizationFromRequire(locale: string, required: unknown): void {\n    const translations = this.flattenTranslations(required);\n    const localization: Localization = {\n      languageId: locale,\n      translations\n    };\n    this.registerLocalization(localization);\n  }\n\n  protected flattenTranslations(localization: unknown): Record<string, string> {\n    if (typeof localization === 'object' && localization) {\n      const record: Record<string, string> = {};\n      for (const [key, value] of Object.entries(localization)) {\n        if (typeof value === 'string') {\n          record[key] = value;\n        } else if (value && typeof value === 'object') {\n          const flattened = this.flattenTranslations(value);\n          for (const [flatKey, flatValue] of Object.entries(flattened)) {\n            record[`${key}/${flatKey}`] = flatValue;\n          }\n        }\n      }\n      return record;\n    } else {\n      return {};\n    }\n  }\n\n  protected identifyLocale(localizationPath: string): string | undefined {\n    const regex = /nls\\.(\\w+)\\.json$/i;\n    const match = regex.exec(localizationPath);\n    if (match) {\n      return match[1];\n    }\n    return undefined;\n  }\n}\n"]}