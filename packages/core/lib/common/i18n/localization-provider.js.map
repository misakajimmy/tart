{"version":3,"sources":["common/i18n/localization-provider.ts"],"names":[],"mappings":";;;;;;AACA,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAGrC,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAErB,aAAa,GAAG,IAAI,GAAG,EAAwB,CAAC;IAChD,eAAe,GAAG,IAAI,CAAC;IAEjC,gBAAgB,CAAC,GAAG,aAA6B;QAC/C,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;YACxC,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YAC7D,IAAI,CAAC,MAAM,EAAE;gBACX,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,GAAG;oBACvD,UAAU,EAAE,YAAY,CAAC,UAAU;oBACnC,YAAY,EAAE,YAAY,CAAC,YAAY;oBACvC,qBAAqB,EAAE,YAAY,CAAC,qBAAqB;oBACzD,YAAY,EAAE,EAAE;iBACjB,CAAC,CAAC;aACJ;YACD,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,IAAI,YAAY,CAAC,YAAY,CAAC;YACvE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,YAAY,CAAC,CAAC;SAC/D;IACH,CAAC;IAED,kBAAkB,CAAC,UAAkB;QACnC,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;IACpC,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,qBAAqB,CAAC,GAAa;QACjC,MAAM,WAAW,GAAa,EAAE,CAAC;QACjC,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE;YACtD,IAAI,GAAG,IAAI,YAAY,CAAC,YAAY,EAAE;gBACpC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;aAC3C;SACF;QACD,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,gBAAgB,CAAC,UAAkB;QACjC,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI;YAC3C,UAAU;YACV,YAAY,EAAE,EAAE;SACjB,CAAC;IACJ,CAAC;CAEF,CAAA;AA9CY,oBAAoB;IADhC,UAAU,EAAE;GACA,oBAAoB,CA8ChC;SA9CY,oBAAoB","file":"../../../src/common/i18n/localization-provider.js","sourcesContent":["import {Localization} from './localization';\nimport {injectable} from 'inversify';\n\n@injectable()\nexport class LocalizationProvider {\n\n  protected localizations = new Map<string, Localization>();\n  protected currentLanguage = 'en';\n\n  addLocalizations(...localizations: Localization[]): void {\n    for (const localization of localizations) {\n      let merged = this.localizations.get(localization.languageId);\n      if (!merged) {\n        this.localizations.set(localization.languageId, merged = {\n          languageId: localization.languageId,\n          languageName: localization.languageName,\n          localizedLanguageName: localization.localizedLanguageName,\n          translations: {}\n        });\n      }\n      merged.languagePack = merged.languagePack || localization.languagePack;\n      Object.assign(merged.translations, localization.translations);\n    }\n  }\n\n  setCurrentLanguage(languageId: string): void {\n    this.currentLanguage = languageId;\n  }\n\n  getCurrentLanguage(): string {\n    return this.currentLanguage;\n  }\n\n  getAvailableLanguages(all?: boolean): string[] {\n    const languageIds: string[] = [];\n    for (const localization of this.localizations.values()) {\n      if (all || localization.languagePack) {\n        languageIds.push(localization.languageId);\n      }\n    }\n    return languageIds.sort((a, b) => a.localeCompare(b));\n  }\n\n  loadLocalization(languageId: string): Localization {\n    return this.localizations.get(languageId) || {\n      languageId,\n      translations: {}\n    };\n  }\n\n}\n"]}