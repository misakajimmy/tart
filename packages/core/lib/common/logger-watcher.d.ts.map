{"version":3,"sources":["common/logger-watcher.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAMlF,qBACa,aAAa;CAqBzB","file":"../../src/common/logger-watcher.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\n\n// import {ILoggerClient, ILogLevelChangedEvent} from './logger-protocol';\n\n@injectable()\nexport class LoggerWatcher {\n\n  // getLoggerClient(): ILoggerClient {\n  //     const emitter = this.onLogLevelChangedEmitter;\n  //     return {\n  //         onLogLevelChanged(event: ILogLevelChangedEvent): void {\n  //             emitter.fire(event);\n  //         }\n  //     };\n  // }\n\n  // private onLogLevelChangedEmitter = new Emitter<ILogLevelChangedEvent>();\n\n  // get onLogLevelChanged(): Event<ILogLevelChangedEvent> {\n  //     return this.onLogLevelChangedEmitter.event;\n  // }\n\n  // FIXME: get rid of it, backend services should as well set a client on the server\n  // fireLogLevelChanged(event: ILogLevelChangedEvent): void {\n  //     this.onLogLevelChangedEmitter.fire(event);\n  // }\n}\n"]}