{"version":3,"sources":["common/logger-protocol.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,aAAa,EAAC,MAAM,aAAa,CAAC;AAE1C,eAAO,MAAM,aAAa,eAA0B,CAAC;AAErD,eAAO,MAAM,UAAU,qBAAqB,CAAC;AAE7C,MAAM,WAAW,aAAc,SAAQ,aAAa,CAAC,aAAa,CAAC;IACjE,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IAE3D,WAAW,CAAC,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAG3C,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IAEhF,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;CACpC;AAED,eAAO,MAAM,aAAa,eAA0B,CAAC;AAErD,MAAM,WAAW,qBAAqB;IACpC,UAAU,EAAE,MAAM,CAAC;IACnB,WAAW,EAAE,MAAM,CAAC;CACrB;AAED,MAAM,WAAW,aAAa;IAC5B,iBAAiB,CAAC,KAAK,EAAE,qBAAqB,GAAG,IAAI,CAAC;CACvD;AAED,qBACa,uBAAwB,YAAW,aAAa;IAE3D,QAAQ,CAAC,OAAO,qBAA4B;IAE5C,iBAAiB,CAAC,KAAK,EAAE,qBAAqB,GAAG,IAAI;CAItD;AAED,eAAO,MAAM,cAAc,SAAS,CAAC;AAErC,oBAAY,QAAQ;IAClB,KAAK,KAAK;IACV,KAAK,KAAK;IACV,IAAI,KAAK;IACT,IAAI,KAAK;IACT,KAAK,KAAK;IACV,KAAK,KAAK;CACX;AAED,yBAAiB,QAAQ,CAAC;IACjB,MAAM,OAAO,uBAOlB,CAAC;IAEH,SAAgB,QAAQ,CAAC,KAAK,EAAE,QAAQ,GAAG,MAAM,GAAG,SAAS,CAE5D;IAED,SAAgB,UAAU,CAAC,QAAQ,EAAE,MAAM,GAAG,QAAQ,GAAG,SAAS,CAQjE;CACF;AAGD,yBAAiB,aAAa,CAAC;IAY7B,SAAgB,KAAK,IAAI,IAAI,CAO5B;IAED,SAAgB,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAIxF;CACF","file":"../../src/common/logger-protocol.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {JsonRpcServer} from './messaging';\n\nexport const ILoggerServer = Symbol('ILoggerServer');\n\nexport const loggerPath = '/services/logger';\n\nexport interface ILoggerServer extends JsonRpcServer<ILoggerClient> {\n  setLogLevel(name: string, logLevel: number): Promise<void>;\n\n  getLogLevel(name: string): Promise<number>;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  log(name: string, logLevel: number, message: any, params: any[]): Promise<void>;\n\n  child(name: string): Promise<void>;\n}\n\nexport const ILoggerClient = Symbol('ILoggerClient');\n\nexport interface ILogLevelChangedEvent {\n  loggerName: string;\n  newLogLevel: number;\n}\n\nexport interface ILoggerClient {\n  onLogLevelChanged(event: ILogLevelChangedEvent): void;\n}\n\n@injectable()\nexport class DispatchingLoggerClient implements ILoggerClient {\n\n  readonly clients = new Set<ILoggerClient>();\n\n  onLogLevelChanged(event: ILogLevelChangedEvent): void {\n    this.clients.forEach(client => client.onLogLevelChanged(event));\n  }\n\n}\n\nexport const rootLoggerName = 'root';\n\nexport enum LogLevel {\n  FATAL = 60,\n  ERROR = 50,\n  WARN = 40,\n  INFO = 30,\n  DEBUG = 20,\n  TRACE = 10\n}\n\nexport namespace LogLevel {\n  export const strings = new Map<LogLevel, string>([\n    [LogLevel.FATAL, 'fatal'],\n    [LogLevel.ERROR, 'error'],\n    [LogLevel.WARN, 'warn'],\n    [LogLevel.INFO, 'info'],\n    [LogLevel.DEBUG, 'debug'],\n    [LogLevel.TRACE, 'trace']\n  ]);\n\n  export function toString(level: LogLevel): string | undefined {\n    return strings.get(level);\n  }\n\n  export function fromString(levelStr: string): LogLevel | undefined {\n    for (const pair of strings) {\n      if (pair[1] === levelStr) {\n        return pair[0];\n      }\n    }\n\n    return undefined;\n  }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport namespace ConsoleLogger {\n  type Console = (message?: any, ...optionalParams: any[]) => void;\n  const originalConsoleLog = console.log;\n  const consoles = new Map<LogLevel, Console>([\n    [LogLevel.FATAL, console.error],\n    [LogLevel.ERROR, console.error],\n    [LogLevel.WARN, console.warn],\n    [LogLevel.INFO, console.info],\n    [LogLevel.DEBUG, console.debug],\n    [LogLevel.TRACE, console.trace]\n  ]);\n\n  export function reset(): void {\n    console.error = consoles.get(LogLevel.ERROR)!;\n    console.warn = consoles.get(LogLevel.WARN)!;\n    console.info = consoles.get(LogLevel.INFO)!;\n    console.debug = consoles.get(LogLevel.DEBUG)!;\n    console.trace = consoles.get(LogLevel.TRACE)!;\n    console.log = originalConsoleLog;\n  }\n\n  export function log(name: string, logLevel: number, message: string, params: any[]): void {\n    const console = consoles.get(logLevel) || originalConsoleLog;\n    const severity = (LogLevel.strings.get(logLevel) || 'unknown').toUpperCase();\n    console(`${name} ${severity} ${message}`, ...params);\n  }\n}\n"]}