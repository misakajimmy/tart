{"version":3,"sources":["common/preferences/preference-schema.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,uDAAuD;AAEvD,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AAUnD,MAAM,KAAW,gBAAgB,CAgBhC;AAhBD,WAAiB,gBAAgB;IAC/B,SAAgB,EAAE,CAAC,GAAuB;QACxC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,IAAI,GAAG,CAAC,IAAI,0BAA0B,CAAC,EAAE,CAAO,GAAI,CAAC,YAAY,CAAC,CAAC,CAAC;IACnG,CAAC;IAFe,mBAAE,KAEjB,CAAA;IAED,SAAgB,eAAe,CAAC,MAAwB;QACtD,IAAI,YAA6B,CAAC;QAClC,iEAAiE;QACjE,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACrC,YAAY,GAAG,eAAe,CAAC,UAAU,CAAS,MAAM,CAAC,KAAK,CAAC,CAAC;YAChE,gGAAgG;SACjG;aAAM;YACL,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC;SAC7B;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAVe,gCAAe,kBAU9B,CAAA;AACH,CAAC,EAhBgB,gBAAgB,KAAhB,gBAAgB,QAgBhC;AAMD,MAAM,KAAW,0BAA0B,CAI1C;AAJD,WAAiB,0BAA0B;IACzC,SAAgB,EAAE,CAAC,GAAuB;QACxC,OAAO,CAAC,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC;IAC1C,CAAC;IAFe,6BAAE,KAEjB,CAAA;AACH,CAAC,EAJgB,0BAA0B,KAA1B,0BAA0B,QAI1C;AA8CD,MAAM,KAAW,sBAAsB,CAUtC;AAVD,WAAiB,sBAAsB;IACrC,SAAgB,4BAA4B,CAAC,WAAqC,EAAE,YAA6B;QAC/G,2KAA2K;QAC3K,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;YACtB,WAAW,CAAC,KAAK,GAAG,YAAY,CAAC;SAClC;aAAM,IAAI,OAAO,WAAW,CAAC,KAAK,KAAK,QAAQ,EAAE;YAChD,OAAO,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,EAAC,KAAK,EAAE,eAAe,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,YAAY,EAAC,CAAC,CAAC;SAC3G;QACD,OAA+B,WAAW,CAAC;IAC7C,CAAC;IARe,mDAA4B,+BAQ3C,CAAA;AACH,CAAC,EAVgB,sBAAsB,KAAtB,sBAAsB,QAUtC","file":"../../../src/common/preferences/preference-schema.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {PreferenceScope} from './preference-scope';\n\nexport interface PreferenceSchema {\n  scope?: 'application' | 'window' | 'resource' | PreferenceScope,\n  overridable?: boolean;\n  properties: PreferenceSchemaProperties\n\n  [name: string]: any,\n}\n\nexport namespace PreferenceSchema {\n  export function is(obj: Object | undefined): obj is PreferenceSchema {\n    return !!obj && ('properties' in obj) && PreferenceSchemaProperties.is((<any>obj)['properties']);\n  }\n\n  export function getDefaultScope(schema: PreferenceSchema): PreferenceScope {\n    let defaultScope: PreferenceScope;\n    // let defaultScope: PreferenceScope = PreferenceScope.Workspace;\n    if (!PreferenceScope.is(schema.scope)) {\n      defaultScope = PreferenceScope.fromString(<string>schema.scope);\n      // defaultScope = PreferenceScope.fromString(<string>schema.scope) || PreferenceScope.Workspace;\n    } else {\n      defaultScope = schema.scope;\n    }\n    return defaultScope;\n  }\n}\n\nexport interface PreferenceSchemaProperties {\n  [name: string]: PreferenceSchemaProperty\n}\n\nexport namespace PreferenceSchemaProperties {\n  export function is(obj: Object | undefined): obj is PreferenceSchemaProperties {\n    return !!obj && typeof obj === 'object';\n  }\n}\n\nexport interface PreferenceDataSchema {\n  scope?: PreferenceScope,\n  properties: {\n    [name: string]: PreferenceDataProperty\n  }\n  patternProperties: {\n    [name: string]: PreferenceDataProperty\n  };\n\n  [name: string]: any,\n}\n\nexport interface PreferenceItem {\n  type?: JsonType | JsonType[];\n  minimum?: number;\n  /**\n   * content assist (UI) default value\n   */\n  default?: any;\n  /**\n   * preference default value, if `undefined` then `default`\n   */\n  defaultValue?: any;\n  enum?: string[];\n  items?: PreferenceItem;\n  properties?: { [name: string]: PreferenceItem };\n  additionalProperties?: object | boolean;\n  overridable?: boolean;\n\n  [name: string]: any;\n}\n\nexport interface PreferenceSchemaProperty extends PreferenceItem {\n  description?: string;\n  markdownDescription?: string;\n  scope?: 'application' | 'machine' | 'window' | 'resource' | 'language-overridable' | 'machine-overridable' | PreferenceScope;\n}\n\nexport interface PreferenceDataProperty extends PreferenceItem {\n  description?: string;\n  markdownDescription?: string;\n  scope?: PreferenceScope;\n}\n\nexport namespace PreferenceDataProperty {\n  export function fromPreferenceSchemaProperty(schemaProps: PreferenceSchemaProperty, defaultScope: PreferenceScope): PreferenceDataProperty {\n    // export function fromPreferenceSchemaProperty(schemaProps: PreferenceSchemaProperty, defaultScope: PreferenceScope = PreferenceScope.Workspace): PreferenceDataProperty {\n    if (!schemaProps.scope) {\n      schemaProps.scope = defaultScope;\n    } else if (typeof schemaProps.scope === 'string') {\n      return Object.assign(schemaProps, {scope: PreferenceScope.fromString(schemaProps.scope) || defaultScope});\n    }\n    return <PreferenceDataProperty>schemaProps;\n  }\n}\n\nexport type JsonType = 'string' | 'array' | 'number' | 'integer' | 'object' | 'boolean' | 'null';\n"]}