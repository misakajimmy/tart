{"version":3,"sources":["common/preferences/preference-scope.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAIlF,oBAAY,eAAe;IACzB,OAAO,IAAA;CAIR;AAED,yBAAiB,eAAe,CAAC;IAC/B,SAAgB,EAAE,CAAC,KAAK,EAAE,GAAG,GAAG,KAAK,IAAI,eAAe,CAEvD;IAED;;OAEG;IACH,SAAgB,SAAS,IAAI,eAAe,EAAE,CAI7C;IAED;;OAEG;IACH,SAAgB,iBAAiB,IAAI,eAAe,EAAE,CAErD;IAED,SAAgB,aAAa,CAAC,KAAK,CAAC,EAAE,eAAe,GAAG,MAAM,EAAE,CAY/D;IAED,SAAgB,UAAU,CAAC,QAAQ,EAAE,MAAM,GAAG,eAAe,GAAG,SAAS,CAYxE;CACF","file":"../../../src/common/preferences/preference-scope.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport enum PreferenceScope {\n  Default,\n  // User,\n  // Workspace,\n  // Folder\n}\n\nexport namespace PreferenceScope {\n  export function is(scope: any): scope is PreferenceScope {\n    return typeof scope === 'number' && getScopes().findIndex(s => s === scope) >= 0;\n  }\n\n  /**\n   * @returns preference scopes from broadest to narrowest: Default -> Folder.\n   */\n  export function getScopes(): PreferenceScope[] {\n    return Object.keys(PreferenceScope)\n        .filter(k => typeof PreferenceScope[k as any] === 'string')\n        .map(v => <PreferenceScope>Number(v));\n  }\n\n  /**\n   * @returns preference scopes from narrowest to broadest. Folder -> Default.\n   */\n  export function getReversedScopes(): PreferenceScope[] {\n    return getScopes().reverse();\n  }\n\n  export function getScopeNames(scope?: PreferenceScope): string[] {\n    const names: string[] = [];\n    const allNames = Object.keys(PreferenceScope)\n        .filter(k => typeof PreferenceScope[k as any] === 'number');\n    if (scope) {\n      for (const name of allNames) {\n        if ((<any>PreferenceScope)[name] <= scope) {\n          names.push(name);\n        }\n      }\n    }\n    return names;\n  }\n\n  export function fromString(strScope: string): PreferenceScope | undefined {\n    switch (strScope) {\n        // case 'application':\n        //     return PreferenceScope.User;\n        // case 'window':\n        //     return PreferenceScope.Folder;\n        // case 'resource':\n        //     return PreferenceScope.Folder;\n        // case 'language-overridable':\n        //     return PreferenceScope.Folder;\n    }\n    return PreferenceScope.Default;\n  }\n}\n"]}