{"version":3,"sources":["common/preferences/preference-schema.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAIlF,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AAEnD,MAAM,WAAW,gBAAgB;IAC/B,KAAK,CAAC,EAAE,aAAa,GAAG,QAAQ,GAAG,UAAU,GAAG,eAAe,CAAC;IAChE,WAAW,CAAC,EAAE,OAAO,CAAC;IACtB,UAAU,EAAE,0BAA0B,CAAA;IAEtC,CAAC,IAAI,EAAE,MAAM,GAAG,GAAG,CAAC;CACrB;AAED,yBAAiB,gBAAgB,CAAC;IAChC,SAAgB,EAAE,CAAC,GAAG,EAAE,MAAM,GAAG,SAAS,GAAG,GAAG,IAAI,gBAAgB,CAEnE;IAED,SAAgB,eAAe,CAAC,MAAM,EAAE,gBAAgB,GAAG,eAAe,CAUzE;CACF;AAED,MAAM,WAAW,0BAA0B;IACzC,CAAC,IAAI,EAAE,MAAM,GAAG,wBAAwB,CAAA;CACzC;AAED,yBAAiB,0BAA0B,CAAC;IAC1C,SAAgB,EAAE,CAAC,GAAG,EAAE,MAAM,GAAG,SAAS,GAAG,GAAG,IAAI,0BAA0B,CAE7E;CACF;AAED,MAAM,WAAW,oBAAoB;IACnC,KAAK,CAAC,EAAE,eAAe,CAAC;IACxB,UAAU,EAAE;QACV,CAAC,IAAI,EAAE,MAAM,GAAG,sBAAsB,CAAA;KACvC,CAAA;IACD,iBAAiB,EAAE;QACjB,CAAC,IAAI,EAAE,MAAM,GAAG,sBAAsB,CAAA;KACvC,CAAC;IAEF,CAAC,IAAI,EAAE,MAAM,GAAG,GAAG,CAAC;CACrB;AAED,MAAM,WAAW,cAAc;IAC7B,IAAI,CAAC,EAAE,QAAQ,GAAG,QAAQ,EAAE,CAAC;IAC7B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB;;OAEG;IACH,OAAO,CAAC,EAAE,GAAG,CAAC;IACd;;OAEG;IACH,YAAY,CAAC,EAAE,GAAG,CAAC;IACnB,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC;IAChB,KAAK,CAAC,EAAE,cAAc,CAAC;IACvB,UAAU,CAAC,EAAE;QAAE,CAAC,IAAI,EAAE,MAAM,GAAG,cAAc,CAAA;KAAE,CAAC;IAChD,oBAAoB,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC;IACxC,WAAW,CAAC,EAAE,OAAO,CAAC;IAEtB,CAAC,IAAI,EAAE,MAAM,GAAG,GAAG,CAAC;CACrB;AAED,MAAM,WAAW,wBAAyB,SAAQ,cAAc;IAC9D,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,mBAAmB,CAAC,EAAE,MAAM,CAAC;IAC7B,KAAK,CAAC,EAAE,aAAa,GAAG,SAAS,GAAG,QAAQ,GAAG,UAAU,GAAG,sBAAsB,GAAG,qBAAqB,GAAG,eAAe,CAAC;CAC9H;AAED,MAAM,WAAW,sBAAuB,SAAQ,cAAc;IAC5D,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,mBAAmB,CAAC,EAAE,MAAM,CAAC;IAC7B,KAAK,CAAC,EAAE,eAAe,CAAC;CACzB;AAED,yBAAiB,sBAAsB,CAAC;IACtC,SAAgB,4BAA4B,CAAC,WAAW,EAAE,wBAAwB,EAAE,YAAY,EAAE,eAAe,GAAG,sBAAsB,CAQzI;CACF;AAED,oBAAY,QAAQ,GAAG,QAAQ,GAAG,OAAO,GAAG,QAAQ,GAAG,SAAS,GAAG,QAAQ,GAAG,SAAS,GAAG,MAAM,CAAC","file":"../../../src/common/preferences/preference-schema.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {PreferenceScope} from './preference-scope';\n\nexport interface PreferenceSchema {\n  scope?: 'application' | 'window' | 'resource' | PreferenceScope,\n  overridable?: boolean;\n  properties: PreferenceSchemaProperties\n\n  [name: string]: any,\n}\n\nexport namespace PreferenceSchema {\n  export function is(obj: Object | undefined): obj is PreferenceSchema {\n    return !!obj && ('properties' in obj) && PreferenceSchemaProperties.is((<any>obj)['properties']);\n  }\n\n  export function getDefaultScope(schema: PreferenceSchema): PreferenceScope {\n    let defaultScope: PreferenceScope;\n    // let defaultScope: PreferenceScope = PreferenceScope.Workspace;\n    if (!PreferenceScope.is(schema.scope)) {\n      defaultScope = PreferenceScope.fromString(<string>schema.scope);\n      // defaultScope = PreferenceScope.fromString(<string>schema.scope) || PreferenceScope.Workspace;\n    } else {\n      defaultScope = schema.scope;\n    }\n    return defaultScope;\n  }\n}\n\nexport interface PreferenceSchemaProperties {\n  [name: string]: PreferenceSchemaProperty\n}\n\nexport namespace PreferenceSchemaProperties {\n  export function is(obj: Object | undefined): obj is PreferenceSchemaProperties {\n    return !!obj && typeof obj === 'object';\n  }\n}\n\nexport interface PreferenceDataSchema {\n  scope?: PreferenceScope,\n  properties: {\n    [name: string]: PreferenceDataProperty\n  }\n  patternProperties: {\n    [name: string]: PreferenceDataProperty\n  };\n\n  [name: string]: any,\n}\n\nexport interface PreferenceItem {\n  type?: JsonType | JsonType[];\n  minimum?: number;\n  /**\n   * content assist (UI) default value\n   */\n  default?: any;\n  /**\n   * preference default value, if `undefined` then `default`\n   */\n  defaultValue?: any;\n  enum?: string[];\n  items?: PreferenceItem;\n  properties?: { [name: string]: PreferenceItem };\n  additionalProperties?: object | boolean;\n  overridable?: boolean;\n\n  [name: string]: any;\n}\n\nexport interface PreferenceSchemaProperty extends PreferenceItem {\n  description?: string;\n  markdownDescription?: string;\n  scope?: 'application' | 'machine' | 'window' | 'resource' | 'language-overridable' | 'machine-overridable' | PreferenceScope;\n}\n\nexport interface PreferenceDataProperty extends PreferenceItem {\n  description?: string;\n  markdownDescription?: string;\n  scope?: PreferenceScope;\n}\n\nexport namespace PreferenceDataProperty {\n  export function fromPreferenceSchemaProperty(schemaProps: PreferenceSchemaProperty, defaultScope: PreferenceScope): PreferenceDataProperty {\n    // export function fromPreferenceSchemaProperty(schemaProps: PreferenceSchemaProperty, defaultScope: PreferenceScope = PreferenceScope.Workspace): PreferenceDataProperty {\n    if (!schemaProps.scope) {\n      schemaProps.scope = defaultScope;\n    } else if (typeof schemaProps.scope === 'string') {\n      return Object.assign(schemaProps, {scope: PreferenceScope.fromString(schemaProps.scope) || defaultScope});\n    }\n    return <PreferenceDataProperty>schemaProps;\n  }\n}\n\nexport type JsonType = 'string' | 'array' | 'number' | 'integer' | 'object' | 'boolean' | 'null';\n"]}