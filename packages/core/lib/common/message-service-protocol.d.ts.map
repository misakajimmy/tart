{"version":3,"sources":["common/message-service-protocol.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,iBAAiB,EAAC,MAAM,gBAAgB,CAAC;AAEjD,eAAO,MAAM,kBAAkB,6BAA6B,CAAC;AAE7D,oBAAY,WAAW;IACrB,KAAK,IAAI;IACT,OAAO,IAAI;IACX,IAAI,IAAI;IACR,GAAG,IAAI;IACP,QAAQ,IAAI;CACb;AAED,MAAM,WAAW,OAAO;IACtB;;OAEG;IACH,QAAQ,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC;IAC5B;;OAEG;IACH,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;IACtB;;OAEG;IACH,QAAQ,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC;IAC5B;;OAEG;IACH,QAAQ,CAAC,OAAO,CAAC,EAAE,cAAc,CAAC;IAClC,QAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC;CAC1B;AAED,MAAM,WAAW,eAAgB,SAAQ,OAAO;IAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,QAAQ,CAAC;IACrC,QAAQ,CAAC,OAAO,CAAC,EAAE,sBAAsB,CAAC;CAC3C;AAED,yBAAiB,eAAe,CAAC;IACxB,MAAM,MAAM,WAAW,CAAC;IAE/B,SAAgB,YAAY,CAAC,OAAO,EAAE,eAAe,GAAG,OAAO,CAE9D;CACF;AAED,MAAM,WAAW,cAAc;IAC7B;;;OAGG;IACH,QAAQ,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC;CAC3B;AAED,MAAM,WAAW,sBAAuB,SAAQ,cAAc;IAC5D;;OAEG;IACH,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,CAAC;IAC9B;;OAEG;IACH,QAAQ,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC;CAC5B;AAED,MAAM,WAAW,QAAQ;IACvB;;OAEG;IACH,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC;IACpB;;;;OAIG;IACH,QAAQ,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,cAAc,KAAK,IAAI,CAAC;IAClD;;OAEG;IACH,QAAQ,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC;IAC5B;;;;OAIG;IACH,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC;CAC9C;AAED,MAAM,WAAW,cAAc;IAC7B;;OAEG;IACH,QAAQ,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC;IAC1B;;OAEG;IACH,QAAQ,CAAC,IAAI,CAAC,EAAE;QAAE,IAAI,EAAE,MAAM,CAAC;QAAC,KAAK,EAAE,MAAM,CAAA;KAAE,CAAC;CACjD;AAED,qBACa,aAAa;IAExB;;;;;;OAMG;IACH,WAAW,CAAC,OAAO,EAAE,OAAO,GAAG,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;IAK1D;;;;OAIG;IACH,YAAY,CAAC,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,iBAAiB,EAAE,iBAAiB,GAAG,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;IAK7H;;;;OAIG;IACH,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,eAAe,EAAE,iBAAiB,EAAE,iBAAiB,GAAG,OAAO,CAAC,IAAI,CAAC;CAG1I","file":"../../src/common/message-service-protocol.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {CancellationToken} from './cancellation';\n\nexport const messageServicePath = '/services/messageService';\n\nexport enum MessageType {\n  Error = 1,\n  Warning = 2,\n  Info = 3,\n  Log = 4,\n  Progress = 5\n}\n\nexport interface Message {\n  /**\n   * Type of the message, i.e. error, warning, info, etc.\n   */\n  readonly type?: MessageType;\n  /**\n   * Message text.\n   */\n  readonly text: string;\n  /**\n   * Actions offered to the user in the context of the message.\n   */\n  readonly actions?: string[];\n  /**\n   * Additional options.\n   */\n  readonly options?: MessageOptions;\n  readonly source?: string;\n}\n\nexport interface ProgressMessage extends Message {\n  readonly type?: MessageType.Progress;\n  readonly options?: ProgressMessageOptions;\n}\n\nexport namespace ProgressMessage {\n  export const Cancel = 'Cancel';\n\n  export function isCancelable(message: ProgressMessage): boolean {\n    return !!message.options?.cancelable;\n  }\n}\n\nexport interface MessageOptions {\n  /**\n   * Timeout in milliseconds.\n   * `0` and negative values are treated as no timeout.\n   */\n  readonly timeout?: number;\n}\n\nexport interface ProgressMessageOptions extends MessageOptions {\n  /**\n   * Default: `false`\n   */\n  readonly cancelable?: boolean;\n  /**\n   * Known values: `notification` | `window` | `scm`\n   */\n  readonly location?: string;\n}\n\nexport interface Progress {\n  /**\n   * Unique progress id.\n   */\n  readonly id: string;\n  /**\n   * Update the current progress.\n   *\n   * @param update the data to update.\n   */\n  readonly report: (update: ProgressUpdate) => void;\n  /**\n   * Cancel or complete the current progress.\n   */\n  readonly cancel: () => void;\n  /**\n   * Result of the progress.\n   *\n   * @returns a promise which resolves to either 'Cancel', an alternative action or `undefined`.\n   */\n  readonly result: Promise<string | undefined>;\n}\n\nexport interface ProgressUpdate {\n  /**\n   * Updated message for the progress.\n   */\n  readonly message?: string;\n  /**\n   * Updated ratio between steps done so far and total number of steps.\n   */\n  readonly work?: { done: number, total: number };\n}\n\n@injectable()\nexport class MessageClient {\n\n  /**\n   * Show a message of the given type and possible actions to the user.\n   * Resolve to a chosen action.\n   * Never reject.\n   *\n   * To be implemented by an extension, e.g. by the messages extension.\n   */\n  showMessage(message: Message): Promise<string | undefined> {\n    console.info(message.text);\n    return Promise.resolve(undefined);\n  }\n\n  /**\n   * Show a progress message with possible actions to user.\n   *\n   * To be implemented by an extension, e.g. by the messages extension.\n   */\n  showProgress(progressId: string, message: ProgressMessage, cancellationToken: CancellationToken): Promise<string | undefined> {\n    console.info(message.text);\n    return Promise.resolve(undefined);\n  }\n\n  /**\n   * Update a previously created progress message.\n   *\n   * To be implemented by an extension, e.g. by the messages extension.\n   */\n  reportProgress(progressId: string, update: ProgressUpdate, message: ProgressMessage, cancellationToken: CancellationToken): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n}\n"]}