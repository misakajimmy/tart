{"version":3,"sources":["common/keybinding.ts"],"names":[],"mappings":"AAmDA,MAAM,KAAW,UAAU,CAsD1B;AAtDD,WAAiB,UAAU;IAEzB;;;;;;;OAOG;IACH,SAAgB,MAAM,CAAC,CAAa,EAAE,CAAa,EAAE,mBAA4B,KAAK,EAAE,aAAsB,KAAK;QACjH,IAAI,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,OAAO;YACvB,CAAC,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC;YACvC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC;YACjC,CAAC,gBAAgB,IAAI,CAAC,CAAC,UAAU,KAAK,CAAC,CAAC,UAAU,CAAC;YACnD,CAAC,UAAU,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,EAAE;YACrD,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IATe,iBAAM,SASrB,CAAA;IAED;;;;;OAKG;IACH,SAAgB,YAAY,CAAC,OAAmB;QAC9C,OAAO;YACL,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,IAAI,EAAE,OAAO,CAAC,IAAI;SACnB,CAAC;IACJ,CAAC;IARe,uBAAY,eAQ3B,CAAA;IAED;;;;;;OAMG;IACH,SAAgB,SAAS,CAAC,OAAmB;QAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/C,CAAC;IAFe,oBAAS,YAExB,CAAA;IAED,8CAA8C;IAE9C,8DAA8D;IAC9D,SAAgB,EAAE,CAAC,GAAqB;QACtC,OAAO,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC,IAAI,SAAS,IAAI,GAAG,IAAI,YAAY,IAAI,GAAG,CAAC;IACjF,CAAC;IAFe,aAAE,KAEjB,CAAA;AACH,CAAC,EAtDgB,UAAU,KAAV,UAAU,QAsD1B","file":"../../src/common/keybinding.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n/**\n * A Keybinding binds a specific key sequence ({@link Keybinding#keybinding}) to trigger a command ({@link Keybinding#command}). A Keybinding optionally may\n * define a \"when clause\" ({@link Keybinding#when}) to specify in which context it becomes active.\n * @see KeyBindingRegistry\n */\nexport interface Keybinding {\n  /**\n   * Unique command identifier of the command to be triggered by this keybinding.\n   */\n  command: string;\n  /**\n   * The key sequence for the keybinding as defined in packages/keymaps/README.md.\n   */\n  keybinding: string;\n  /**\n   * The optional keybinding context where this binding belongs to.\n   * If not specified, then this keybinding context belongs to the NOOP\n   * keybinding context.\n   *\n   * @deprecated use `when` closure instead\n   */\n  context?: string;\n  /**\n   * An optional clause defining the condition when the keybinding is active, e.g. based on the current focus.\n   * See {@link https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts} for more details.\n   */\n  when?: string;\n\n  /**\n   * Optional arguments that will be passed to the command when it gets triggered via this keybinding.\n   * Needs to be specified when the triggered command expects arguments to be passed to the command handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args?: any;\n}\n\nexport namespace Keybinding {\n\n  /**\n   * Compares two keybindings for equality.\n   * Can optionally ignore the keybinding and/or args property in the comparison.\n   * @param a The first Keybinding in the comparison\n   * @param b The second Keybinding in the comparison\n   * @param ignoreKeybinding Ignore the 'keybinding' property in the comparison\n   * @param ignoreArgs Ignore the 'args' property in the comparison\n   */\n  export function equals(a: Keybinding, b: Keybinding, ignoreKeybinding: boolean = false, ignoreArgs: boolean = false): boolean {\n    if (a.command === b.command &&\n        (a.context || '') === (b.context || '') &&\n        (a.when || '') === (b.when || '') &&\n        (ignoreKeybinding || a.keybinding === b.keybinding) &&\n        (ignoreArgs || (a.args || '') === (b.args || ''))) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Returns a new object only containing properties which\n   * are described on the `Keybinding` API.\n   *\n   * @param binding the binding to create an API object for.\n   */\n  export function apiObjectify(binding: Keybinding): Keybinding {\n    return {\n      command: binding.command,\n      keybinding: binding.keybinding,\n      context: binding.context,\n      when: binding.when,\n      args: binding.args\n    };\n  }\n\n  /**\n   * Returns with the string representation of the binding.\n   * Any additional properties which are not described on\n   * the `Keybinding` API will be ignored.\n   *\n   * @param binding the binding to stringify.\n   */\n  export function stringify(binding: Keybinding): string {\n    return JSON.stringify(apiObjectify(binding));\n  }\n\n  /* Determine whether object is a KeyBinding */\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  export function is(arg: Keybinding | any): arg is Keybinding {\n    return !!arg && arg === Object(arg) && 'command' in arg && 'keybinding' in arg;\n  }\n}\n"]}