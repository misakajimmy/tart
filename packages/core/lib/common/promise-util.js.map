{"version":3,"sources":["common/promise-util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,EAAC,iBAAiB,EAAE,SAAS,EAAC,MAAM,gBAAgB,CAAC;AAE5D;;;GAGG;AACH,MAAM,OAAO,QAAQ;IACnB,KAAK,GAA2C,YAAY,CAAC;IAC7D,OAAO,CAAsB;IAC7B,MAAM,CAAsB,CAAC,yDAAyD;IAEtF,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC3C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,EAAE;YACtB,OAAO,CAAC,MAAW,CAAC,CAAC;YACrB,IAAI,IAAI,CAAC,KAAK,KAAK,YAAY,EAAE;gBAC/B,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;aACzB;QACH,CAAC,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,EAAE;YAClB,MAAM,CAAC,GAAG,CAAC,CAAC;YACZ,IAAI,IAAI,CAAC,KAAK,KAAK,YAAY,EAAE;gBAC/B,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;aACzB;QACH,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;CACJ;AAED;;;GAGG;AACH,MAAM,UAAU,OAAO,CAAC,EAAU,EAAE,KAAK,GAAG,iBAAiB,CAAC,IAAI;IAChE,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAQ,CAAC;IACtC,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;IACxD,KAAK,CAAC,uBAAuB,CAAC,GAAG,EAAE;QACjC,YAAY,CAAC,MAAM,CAAC,CAAC;QACrB,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC1B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,KAAK,CAAI,IAAsB,EAAE,UAAkB,EAAE,OAAe;IACxF,IAAI,SAA4B,CAAC;IAEjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;QAChC,IAAI;YACF,OAAO,MAAM,IAAI,EAAE,CAAC;SACrB;QAAC,OAAO,KAAK,EAAE;YACd,SAAS,GAAG,KAAK,CAAC;YAElB,MAAM,OAAO,CAAC,UAAU,CAAC,CAAC;SAC3B;KACF;IAED,MAAM,SAAS,CAAC;AAClB,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,KAAK,CAAI,EAAU;IACjC,OAAO,KAAK,CAAC,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9C,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,EAAU;IACnC,MAAM,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;AAC7B,CAAC","file":"../../src/common/promise-util.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2017 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {CancellationToken, cancelled} from './cancellation';\r\n\r\n/**\r\n * Simple implementation of the deferred pattern.\r\n * An object that exposes a promise and functions to resolve and reject it.\r\n */\r\nexport class Deferred<T> {\r\n  state: 'resolved' | 'rejected' | 'unresolved' = 'unresolved';\r\n  resolve: (value?: T) => void;\r\n  reject: (err?: any) => void; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n\r\n  promise = new Promise<T>((resolve, reject) => {\r\n    this.resolve = result => {\r\n      resolve(result as T);\r\n      if (this.state === 'unresolved') {\r\n        this.state = 'resolved';\r\n      }\r\n    };\r\n    this.reject = err => {\r\n      reject(err);\r\n      if (this.state === 'unresolved') {\r\n        this.state = 'rejected';\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * @returns resolves after a specified number of milliseconds\r\n * @throws cancelled if a given token is cancelled before a specified number of milliseconds\r\n */\r\nexport function timeout(ms: number, token = CancellationToken.None): Promise<void> {\r\n  const deferred = new Deferred<void>();\r\n  const handle = setTimeout(() => deferred.resolve(), ms);\r\n  token.onCancellationRequested(() => {\r\n    clearTimeout(handle);\r\n    deferred.reject(cancelled());\r\n  });\r\n  return deferred.promise;\r\n}\r\n\r\nexport async function retry<T>(task: () => Promise<T>, retryDelay: number, retries: number): Promise<T> {\r\n  let lastError: Error | undefined;\r\n\r\n  for (let i = 0; i < retries; i++) {\r\n    try {\r\n      return await task();\r\n    } catch (error) {\r\n      lastError = error;\r\n\r\n      await timeout(retryDelay);\r\n    }\r\n  }\r\n\r\n  throw lastError;\r\n}\r\n\r\n/**\r\n * A function to allow a promise resolution to be delayed by a number of milliseconds. Usage is as follows:\r\n *\r\n * `const stringValue = await myPromise.then(delay(600)).then(value => value.toString());`\r\n *\r\n * @param ms the number of millisecond to delay\r\n * @returns a function that returns a promise that returns the given value, but delayed\r\n */\r\nexport function delay<T>(ms: number): (value: T) => Promise<T> {\r\n  return value => new Promise((resolve, reject) => {\r\n    setTimeout(() => resolve(value), ms);\r\n  });\r\n}\r\n\r\n/**\r\n * Constructs a promise that will resolve after a given delay.\r\n * @param ms the number of milliseconds to wait\r\n */\r\nexport async function wait(ms: number): Promise<void> {\r\n  await delay(ms)(undefined);\r\n}\r\n"]}