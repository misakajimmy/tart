{"version":3,"sources":["common/disposable.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAClF,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAC9B,OAAO,EAAC,OAAO,EAAC,MAAM,WAAW,CAAC;AAElC,MAAM,WAAW,UAAU;IACzB;;OAEG;IACH,OAAO,IAAI,IAAI,CAAC;CACjB;AAED,yBAAiB,UAAU,CAAC;IAE1B,SAAgB,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,UAAU,CAE9C;IAED,SAAgB,MAAM,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG,UAAU,CAInD;IAEM,MAAM,IAAI,YACf,CAAC;CACJ;AAED,qBAAa,oBAAqB,YAAW,UAAU;IAErD,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,UAAU,EAAE,CAAM;IAClD,SAAS,CAAC,QAAQ,CAAC,gBAAgB,gBAAuB;IAC1D,OAAO,CAAC,iBAAiB,CAAS;gBAEtB,GAAG,SAAS,EAAE,UAAU,EAAE;IAItC;;;OAGG;IACH,IAAI,SAAS,IAAI,KAAK,CAAC,IAAI,CAAC,CAE3B;IAED,IAAI,QAAQ,IAAI,OAAO,CAEtB;IAED,OAAO,IAAI,IAAI;IAgBf,IAAI,CAAC,UAAU,EAAE,UAAU,GAAG,UAAU;IAmBxC,OAAO,CAAC,WAAW,EAAE,UAAU,EAAE,GAAG,UAAU,EAAE;IAMhD,SAAS,CAAC,aAAa,IAAI,IAAI;CAOhC","file":"../../src/common/disposable.d.ts","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2017 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\nimport {Event} from './event';\r\nimport {Emitter} from './emitter';\r\n\r\nexport interface Disposable {\r\n  /**\r\n   * Dispose this object.\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport namespace Disposable {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  export function is(arg: any): arg is Disposable {\r\n    return !!arg && typeof arg === 'object' && 'dispose' in arg && typeof arg['dispose'] === 'function';\r\n  }\r\n\r\n  export function create(func: () => void): Disposable {\r\n    return {\r\n      dispose: func\r\n    };\r\n  }\r\n\r\n  export const NULL = create(() => {\r\n  });\r\n}\r\n\r\nexport class DisposableCollection implements Disposable {\r\n\r\n  protected readonly disposables: Disposable[] = [];\r\n  protected readonly onDisposeEmitter = new Emitter<void>();\r\n  private disposingElements = false;\r\n\r\n  constructor(...toDispose: Disposable[]) {\r\n    toDispose.forEach(d => this.push(d));\r\n  }\r\n\r\n  /**\r\n   * This event is fired only once\r\n   * on first dispose of not empty collection.\r\n   */\r\n  get onDispose(): Event<void> {\r\n    return this.onDisposeEmitter.event;\r\n  }\r\n\r\n  get disposed(): boolean {\r\n    return this.disposables.length === 0;\r\n  }\r\n\r\n  dispose(): void {\r\n    if (this.disposed || this.disposingElements) {\r\n      return;\r\n    }\r\n    this.disposingElements = true;\r\n    while (!this.disposed) {\r\n      try {\r\n        this.disposables.pop()!.dispose();\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    this.disposingElements = false;\r\n    this.checkDisposed();\r\n  }\r\n\r\n  push(disposable: Disposable): Disposable {\r\n    const disposables = this.disposables;\r\n    disposables.push(disposable);\r\n    const originalDispose = disposable.dispose.bind(disposable);\r\n    const toRemove = Disposable.create(() => {\r\n      const index = disposables.indexOf(disposable);\r\n      if (index !== -1) {\r\n        disposables.splice(index, 1);\r\n      }\r\n      this.checkDisposed();\r\n    });\r\n    disposable.dispose = () => {\r\n      toRemove.dispose();\r\n      disposable.dispose = originalDispose;\r\n      originalDispose();\r\n    };\r\n    return toRemove;\r\n  }\r\n\r\n  pushAll(disposables: Disposable[]): Disposable[] {\r\n    return disposables.map(disposable =>\r\n        this.push(disposable)\r\n    );\r\n  }\r\n\r\n  protected checkDisposed(): void {\r\n    if (this.disposed && !this.disposingElements) {\r\n      this.onDisposeEmitter.fire(undefined);\r\n      this.onDisposeEmitter.dispose();\r\n    }\r\n  }\r\n\r\n}\r\n"]}