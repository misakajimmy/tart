{"version":3,"sources":["common/container.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,UAAU,EAAC,MAAM,WAAW,CAAC;AAEhD,qBAAa,eAAe;IAC1B,OAAO,CAAC,UAAU,CAA8B;IAChD,OAAO,CAAC,QAAQ,CAAa;;IAK7B,IAAI,SAAS,cAEZ;IAEK,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE;IAQ/B,UAAU,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC;cAQ1B,YAAY,CAAC,MAAM,EAAE,MAAM;cAM3B,KAAK,CAAC,SAAS,EAAE,GAAG,EAAE;cAMtB,IAAI,CAAC,QAAQ,EAAE,GAAG;IAOlC,UAAU,CAAC,CAAC,EAAE,OAAO,EAAE,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC;CAG3D;AAED;;GAEG;AACH,yBAAiB,gBAAgB,CAAC;IAChC;;OAEG;IACH,KAAY,IAAI,GAAG,MAAM,GAAG,KAAK,GAAG,MAAM,GAAG,OAAO,GAAG,QAAQ,CAAC;CACjE","file":"../../src/common/container.d.ts","sourcesContent":["import {Container, interfaces} from 'inversify';\r\n\r\nexport class ContainerLoader {\r\n  private _container: Container = new Container();\r\n  private _modules: any[] = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  get container() {\r\n    return this._container;\r\n  }\r\n\r\n  async importModules(modules: string[]) {\r\n    console.log(modules);\r\n    await modules.map(async module => {\r\n      await this.importModule(module);\r\n    });\r\n    console.log('over');\r\n  }\r\n\r\n  async loadsAsync(jsModules: Promise<any[]>) {\r\n    const modules = (await jsModules).map(jsModule => {\r\n      return jsModule.default;\r\n    });\r\n    console.log(modules);\r\n    await this.loads(modules);\r\n  }\r\n\r\n  protected async importModule(module: string) {\r\n    console.log('start');\r\n    // const m = await import(`@tart_module/${module}`);\r\n    // await this.load(m.default);\r\n  }\r\n\r\n  protected async loads(jsModules: any[]) {\r\n    await jsModules.map(async (jsModule) => {\r\n      await this.load(jsModule);\r\n    });\r\n  }\r\n\r\n  protected async load(jsModule: any) {\r\n    if (!this._modules.includes(jsModule)) {\r\n      this._modules.push(jsModule);\r\n      this._container.load(jsModule);\r\n    }\r\n  }\r\n\r\n  getService<T>(service: interfaces.ServiceIdentifier<T>): T {\r\n    return this._container.get(service);\r\n  }\r\n}\r\n\r\n/**\r\n * The namespace for `ApplicationShell` class statics.\r\n */\r\nexport namespace ApplicationShell {\r\n  /**\r\n   * The areas of the application shell where widgets can reside.\r\n   */\r\n  export type Area = 'main' | 'top' | 'left' | 'right' | 'bottom';\r\n}\r\n"]}