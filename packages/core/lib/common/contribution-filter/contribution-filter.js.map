{"version":3,"sources":["common/contribution-filter/contribution-filter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAQlF,MAAM,CAAC,MAAM,0BAA0B,GAAG,MAAM,CAAC,4BAA4B,CAAC,CAAC;AAwB/E,MAAM,CAAC,MAAM,kBAAkB,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAC","file":"../../../src/common/contribution-filter/contribution-filter.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2021 STMicroelectronics and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {interfaces} from 'inversify';\r\nimport {Filter} from './filter';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type ContributionType = interfaces.ServiceIdentifier<any>;\r\n\r\nexport const ContributionFilterRegistry = Symbol('ContributionFilterRegistry');\r\n\r\nexport interface ContributionFilterRegistry {\r\n\r\n  /**\r\n   * Add filters to be applied for every type of contribution.\r\n   */\r\n  addFilters(types: '*', filters: Filter<Object>[]): void;\r\n\r\n  /**\r\n   * Given a list of contribution types, register filters to apply.\r\n   * @param types types for which to register the filters.\r\n   */\r\n  addFilters(types: ContributionType[], filters: Filter<Object>[]): void;\r\n\r\n  /**\r\n   * Applies the filters for the given contribution type. Generic filters will be applied on any given type.\r\n   * @param toFilter the elements to filter\r\n   * @param type the contribution type for which potentially filters were registered\r\n   * @returns the filtered elements\r\n   */\r\n  applyFilters<T extends Object>(toFilter: T[], type: ContributionType): T[]\r\n}\r\n\r\nexport const FilterContribution = Symbol('FilterContribution');\r\n\r\n/**\r\n * Register filters to remove contributions.\r\n */\r\nexport interface FilterContribution {\r\n  /**\r\n   * Use the registry to register your contribution filters.\r\n   */\r\n  registerContributionFilters(registry: ContributionFilterRegistry): void;\r\n}\r\n"]}