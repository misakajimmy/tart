{"version":3,"sources":["common/contribution-filter/contribution-filter-registry.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;;;;AAElF,OAAO,EAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAC,MAAM,WAAW,CAAC;AAC5D,OAAO,EAA+C,kBAAkB,EAAC,MAAM,uBAAuB,CAAC;AAGvG;;;;GAIG;AAEH,IAAa,8BAA8B,GAA3C,MAAa,8BAA8B;IAE/B,WAAW,GAAG,KAAK,CAAC;IACpB,cAAc,GAAqB,EAAE,CAAC;IACtC,aAAa,GAAG,IAAI,GAAG,EAAsC,CAAC;IAExE,YACiD,gBAAsC,EAAE;QAEvF,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;YACxC,YAAY,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC;SAChD;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED,UAAU,CAAC,KAA+B,EAAE,OAAyB;QACnE,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACrE;aAAM,IAAI,KAAK,KAAK,GAAG,EAAE;YACxB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;SACtC;aAAM;YACL,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;aACzC;SACF;IACH,CAAC;IAED,YAAY,CAAmB,QAAa,EAAE,IAAsB;QAClE,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,OAAO,QAAQ,CAAC;SACjB;QACD,OAAO,QAAQ,CAAC,MAAM,CAClB,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CACpD,CAAC;IACJ,CAAC;IAES,WAAW,CAAC,IAAsB;QAC1C,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE,CAAC,CAAC;SAC1C;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAES,UAAU,CAAC,IAAsB;QACzC,OAAO;YACL,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE;YACrC,GAAG,IAAI,CAAC,cAAc;SACvB,CAAC;IACJ,CAAC;CACF,CAAA;AAnDY,8BAA8B;IAD1C,UAAU,EAAE;IAQN,WAAA,WAAW,CAAC,kBAAkB,CAAC,CAAA;IAAE,WAAA,QAAQ,EAAE,CAAA;GAPrC,8BAA8B,CAmD1C;SAnDY,8BAA8B","file":"../../../src/common/contribution-filter/contribution-filter-registry.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2021 STMicroelectronics and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {injectable, multiInject, optional} from 'inversify';\r\nimport {ContributionFilterRegistry, ContributionType, FilterContribution} from './contribution-filter';\r\nimport {Filter} from './filter';\r\n\r\n/**\r\n * Registry of contribution filters.\r\n *\r\n * Implement/bind to the `FilterContribution` interface/symbol to register your contribution filters.\r\n */\r\n@injectable()\r\nexport class ContributionFilterRegistryImpl implements ContributionFilterRegistry {\r\n\r\n  protected initialized = false;\r\n  protected genericFilters: Filter<Object>[] = [];\r\n  protected typeToFilters = new Map<ContributionType, Filter<Object>[]>();\r\n\r\n  constructor(\r\n      @multiInject(FilterContribution) @optional() contributions: FilterContribution[] = []\r\n  ) {\r\n    for (const contribution of contributions) {\r\n      contribution.registerContributionFilters(this);\r\n    }\r\n    this.initialized = true;\r\n  }\r\n\r\n  addFilters(types: '*' | ContributionType[], filters: Filter<Object>[]): void {\r\n    if (this.initialized) {\r\n      throw new Error('cannot add filters after initialization is done.');\r\n    } else if (types === '*') {\r\n      this.genericFilters.push(...filters);\r\n    } else {\r\n      for (const type of types) {\r\n        this.getOrCreate(type).push(...filters);\r\n      }\r\n    }\r\n  }\r\n\r\n  applyFilters<T extends Object>(toFilter: T[], type: ContributionType): T[] {\r\n    const filters = this.getFilters(type);\r\n    if (filters.length === 0) {\r\n      return toFilter;\r\n    }\r\n    return toFilter.filter(\r\n        object => filters.every(filter => filter(object))\r\n    );\r\n  }\r\n\r\n  protected getOrCreate(type: ContributionType): Filter<Object>[] {\r\n    let value = this.typeToFilters.get(type);\r\n    if (value === undefined) {\r\n      this.typeToFilters.set(type, value = []);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  protected getFilters(type: ContributionType): Filter<Object>[] {\r\n    return [\r\n      ...this.typeToFilters.get(type) || [],\r\n      ...this.genericFilters\r\n    ];\r\n  }\r\n}\r\n\r\n"]}