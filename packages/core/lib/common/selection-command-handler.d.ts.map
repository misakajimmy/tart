{"version":3,"sources":["common/selection-command-handler.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAGlF,OAAO,EAAC,cAAc,EAAC,MAAM,WAAW,CAAC;AACzC,OAAO,EAAC,gBAAgB,EAAC,MAAM,6BAA6B,CAAC;AAE7D,qBAAa,uBAAuB,CAAC,CAAC,CAAE,YAAW,cAAc;IAG3D,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB;IACrD,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,SAAS;IAC3D,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,uBAAuB,CAAC,OAAO,CAAC,CAAC,CAAC;gBAF3C,gBAAgB,EAAE,gBAAgB,EAClC,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,SAAS,EACxC,OAAO,EAAE,uBAAuB,CAAC,OAAO,CAAC,CAAC,CAAC;IAIlE,OAAO,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,GAAG,SAAS;IAK3C,SAAS,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO;IAKlC,SAAS,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO;IAKlC,SAAS,CAAC,OAAO,IAAI,OAAO;IAI5B,SAAS,CAAC,YAAY,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,SAAS;IAY3D,SAAS,CAAC,kBAAkB,CAAC,GAAG,EAAE,MAAM,GAAG,SAAS,GAAG,CAAC,GAAG,SAAS;IAgBpE,SAAS,CAAC,iBAAiB,CAAC,GAAG,EAAE,MAAM,GAAG,SAAS,GAAG,CAAC,EAAE,GAAG,SAAS;CAgBtE;AAED,yBAAiB,uBAAuB,CAAC;IACvC,KAAY,OAAO,CAAC,CAAC,IAAI,gBAAgB,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,gBAAgB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;IAElF,UAAiB,gBAAgB,CAAC,KAAK,SAAS,OAAO,EAAE,CAAC;QACxD,KAAK,EAAE,KAAK,CAAC;QAEb,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;QAE3C,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;QAElD,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;KACnD;CACF","file":"../../src/common/selection-command-handler.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {CommandHandler} from './command';\nimport {SelectionService} from '../common/selection-service';\n\nexport class SelectionCommandHandler<S> implements CommandHandler {\n\n  constructor(\n      protected readonly selectionService: SelectionService,\n      protected readonly toSelection: (arg: any) => S | undefined,\n      protected readonly options: SelectionCommandHandler.Options<S>\n  ) {\n  }\n\n  execute(...args: any[]): Object | undefined {\n    const selection = this.getSelection(...args);\n    return selection ? (this.options.execute as any)(selection, ...args) : undefined;\n  }\n\n  isVisible(...args: any[]): boolean {\n    const selection = this.getSelection(...args);\n    return !!selection && (!this.options.isVisible || (this.options.isVisible as any)(selection as any, ...args));\n  }\n\n  isEnabled(...args: any[]): boolean {\n    const selection = this.getSelection(...args);\n    return !!selection && (!this.options.isEnabled || (this.options.isEnabled as any)(selection as any, ...args));\n  }\n\n  protected isMulti(): boolean {\n    return this.options && !!this.options.multi;\n  }\n\n  protected getSelection(...args: any[]): S | S[] | undefined {\n    const givenSelection = args.length && this.toSelection(args[0]);\n    if (givenSelection) {\n      return this.isMulti() ? [givenSelection] : givenSelection;\n    }\n    const globalSelection = this.getSingleSelection(this.selectionService.selection);\n    if (this.isMulti()) {\n      return this.getMultiSelection(globalSelection);\n    }\n    return this.getSingleSelection(globalSelection);\n  }\n\n  protected getSingleSelection(arg: Object | undefined): S | undefined {\n    let selection = this.toSelection(arg);\n    if (selection) {\n      return selection;\n    }\n    if (Array.isArray(arg)) {\n      for (const element of arg) {\n        selection = this.toSelection(element);\n        if (selection) {\n          return selection;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  protected getMultiSelection(arg: Object | undefined): S[] | undefined {\n    let selection = this.toSelection(arg);\n    if (selection) {\n      return [selection];\n    }\n    const result = [];\n    if (Array.isArray(arg)) {\n      for (const element of arg) {\n        selection = this.toSelection(element);\n        if (selection) {\n          result.push(selection);\n        }\n      }\n    }\n    return result.length ? result : undefined;\n  }\n}\n\nexport namespace SelectionCommandHandler {\n  export type Options<S> = SelectionOptions<false, S> | SelectionOptions<true, S[]>;\n\n  export interface SelectionOptions<Multi extends boolean, T> {\n    multi: Multi;\n\n    execute(selection: T, ...args: any[]): any;\n\n    isEnabled?(selection: T, ...args: any[]): boolean;\n\n    isVisible?(selection: T, ...args: any[]): boolean;\n  }\n}\n"]}