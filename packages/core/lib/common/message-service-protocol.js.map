{"version":3,"sources":["common/message-service-protocol.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;AAElF,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAGrC,MAAM,CAAC,MAAM,kBAAkB,GAAG,0BAA0B,CAAC;AAE7D,MAAM,CAAN,IAAY,WAMX;AAND,WAAY,WAAW;IACrB,+CAAS,CAAA;IACT,mDAAW,CAAA;IACX,6CAAQ,CAAA;IACR,2CAAO,CAAA;IACP,qDAAY,CAAA;AACd,CAAC,EANW,WAAW,KAAX,WAAW,QAMtB;AA2BD,MAAM,KAAW,eAAe,CAM/B;AAND,WAAiB,eAAe;IACjB,sBAAM,GAAG,QAAQ,CAAC;IAE/B,SAAgB,YAAY,CAAC,OAAwB;QACnD,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC;IACvC,CAAC;IAFe,4BAAY,eAE3B,CAAA;AACH,CAAC,EANgB,eAAe,KAAf,eAAe,QAM/B;AAwDD,IAAa,aAAa,GAA1B,MAAa,aAAa;IAExB;;;;;;OAMG;IACH,WAAW,CAAC,OAAgB;QAC1B,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3B,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACH,YAAY,CAAC,UAAkB,EAAE,OAAwB,EAAE,iBAAoC;QAC7F,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3B,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACH,cAAc,CAAC,UAAkB,EAAE,MAAsB,EAAE,OAAwB,EAAE,iBAAoC;QACvH,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;CACF,CAAA;AAhCY,aAAa;IADzB,UAAU,EAAE;GACA,aAAa,CAgCzB;SAhCY,aAAa","file":"../../src/common/message-service-protocol.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {injectable} from 'inversify';\nimport {CancellationToken} from './cancellation';\n\nexport const messageServicePath = '/services/messageService';\n\nexport enum MessageType {\n  Error = 1,\n  Warning = 2,\n  Info = 3,\n  Log = 4,\n  Progress = 5\n}\n\nexport interface Message {\n  /**\n   * Type of the message, i.e. error, warning, info, etc.\n   */\n  readonly type?: MessageType;\n  /**\n   * Message text.\n   */\n  readonly text: string;\n  /**\n   * Actions offered to the user in the context of the message.\n   */\n  readonly actions?: string[];\n  /**\n   * Additional options.\n   */\n  readonly options?: MessageOptions;\n  readonly source?: string;\n}\n\nexport interface ProgressMessage extends Message {\n  readonly type?: MessageType.Progress;\n  readonly options?: ProgressMessageOptions;\n}\n\nexport namespace ProgressMessage {\n  export const Cancel = 'Cancel';\n\n  export function isCancelable(message: ProgressMessage): boolean {\n    return !!message.options?.cancelable;\n  }\n}\n\nexport interface MessageOptions {\n  /**\n   * Timeout in milliseconds.\n   * `0` and negative values are treated as no timeout.\n   */\n  readonly timeout?: number;\n}\n\nexport interface ProgressMessageOptions extends MessageOptions {\n  /**\n   * Default: `false`\n   */\n  readonly cancelable?: boolean;\n  /**\n   * Known values: `notification` | `window` | `scm`\n   */\n  readonly location?: string;\n}\n\nexport interface Progress {\n  /**\n   * Unique progress id.\n   */\n  readonly id: string;\n  /**\n   * Update the current progress.\n   *\n   * @param update the data to update.\n   */\n  readonly report: (update: ProgressUpdate) => void;\n  /**\n   * Cancel or complete the current progress.\n   */\n  readonly cancel: () => void;\n  /**\n   * Result of the progress.\n   *\n   * @returns a promise which resolves to either 'Cancel', an alternative action or `undefined`.\n   */\n  readonly result: Promise<string | undefined>;\n}\n\nexport interface ProgressUpdate {\n  /**\n   * Updated message for the progress.\n   */\n  readonly message?: string;\n  /**\n   * Updated ratio between steps done so far and total number of steps.\n   */\n  readonly work?: { done: number, total: number };\n}\n\n@injectable()\nexport class MessageClient {\n\n  /**\n   * Show a message of the given type and possible actions to the user.\n   * Resolve to a chosen action.\n   * Never reject.\n   *\n   * To be implemented by an extension, e.g. by the messages extension.\n   */\n  showMessage(message: Message): Promise<string | undefined> {\n    console.info(message.text);\n    return Promise.resolve(undefined);\n  }\n\n  /**\n   * Show a progress message with possible actions to user.\n   *\n   * To be implemented by an extension, e.g. by the messages extension.\n   */\n  showProgress(progressId: string, message: ProgressMessage, cancellationToken: CancellationToken): Promise<string | undefined> {\n    console.info(message.text);\n    return Promise.resolve(undefined);\n  }\n\n  /**\n   * Update a previously created progress message.\n   *\n   * To be implemented by an extension, e.g. by the messages extension.\n   */\n  reportProgress(progressId: string, update: ProgressUpdate, message: ProgressMessage, cancellationToken: CancellationToken): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n}\n"]}