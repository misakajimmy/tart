{"version":3,"sources":["common/promise-util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,EAAC,iBAAiB,EAAY,MAAM,gBAAgB,CAAC;AAE5D;;;GAGG;AACH,qBAAa,QAAQ,CAAC,CAAC;IACrB,KAAK,EAAE,UAAU,GAAG,UAAU,GAAG,YAAY,CAAgB;IAC7D,OAAO,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC;IAC7B,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,IAAI,CAAC;IAE5B,OAAO,aAaJ;CACJ;AAED;;;GAGG;AACH,wBAAgB,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,oBAAyB,GAAG,OAAO,CAAC,IAAI,CAAC,CAQjF;AAED,wBAAsB,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CActG;AAED;;;;;;;GAOG;AACH,wBAAgB,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,CAI7D;AAED;;;GAGG;AACH,wBAAsB,IAAI,CAAC,EAAE,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAEpD","file":"../../src/common/promise-util.d.ts","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2017 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {CancellationToken, cancelled} from './cancellation';\r\n\r\n/**\r\n * Simple implementation of the deferred pattern.\r\n * An object that exposes a promise and functions to resolve and reject it.\r\n */\r\nexport class Deferred<T> {\r\n  state: 'resolved' | 'rejected' | 'unresolved' = 'unresolved';\r\n  resolve: (value?: T) => void;\r\n  reject: (err?: any) => void; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n\r\n  promise = new Promise<T>((resolve, reject) => {\r\n    this.resolve = result => {\r\n      resolve(result as T);\r\n      if (this.state === 'unresolved') {\r\n        this.state = 'resolved';\r\n      }\r\n    };\r\n    this.reject = err => {\r\n      reject(err);\r\n      if (this.state === 'unresolved') {\r\n        this.state = 'rejected';\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * @returns resolves after a specified number of milliseconds\r\n * @throws cancelled if a given token is cancelled before a specified number of milliseconds\r\n */\r\nexport function timeout(ms: number, token = CancellationToken.None): Promise<void> {\r\n  const deferred = new Deferred<void>();\r\n  const handle = setTimeout(() => deferred.resolve(), ms);\r\n  token.onCancellationRequested(() => {\r\n    clearTimeout(handle);\r\n    deferred.reject(cancelled());\r\n  });\r\n  return deferred.promise;\r\n}\r\n\r\nexport async function retry<T>(task: () => Promise<T>, retryDelay: number, retries: number): Promise<T> {\r\n  let lastError: Error | undefined;\r\n\r\n  for (let i = 0; i < retries; i++) {\r\n    try {\r\n      return await task();\r\n    } catch (error) {\r\n      lastError = error;\r\n\r\n      await timeout(retryDelay);\r\n    }\r\n  }\r\n\r\n  throw lastError;\r\n}\r\n\r\n/**\r\n * A function to allow a promise resolution to be delayed by a number of milliseconds. Usage is as follows:\r\n *\r\n * `const stringValue = await myPromise.then(delay(600)).then(value => value.toString());`\r\n *\r\n * @param ms the number of millisecond to delay\r\n * @returns a function that returns a promise that returns the given value, but delayed\r\n */\r\nexport function delay<T>(ms: number): (value: T) => Promise<T> {\r\n  return value => new Promise((resolve, reject) => {\r\n    setTimeout(() => resolve(value), ms);\r\n  });\r\n}\r\n\r\n/**\r\n * Constructs a promise that will resolve after a given delay.\r\n * @param ms the number of milliseconds to wait\r\n */\r\nexport async function wait(ms: number): Promise<void> {\r\n  await delay(ms)(undefined);\r\n}\r\n"]}