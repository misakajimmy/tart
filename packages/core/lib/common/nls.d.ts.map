{"version":3,"sources":["common/nls.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,EAAC,UAAU,EAAE,YAAY,EAAC,MAAM,qBAAqB,CAAC;AAG7D,yBAAiB,GAAG,CAAC;IAEZ,IAAI,YAAY,EAAE,YAAY,GAAG,SAAS,CAAC;IAE3C,MAAM,QAAQ,aAAa,CAAC;IAE5B,MAAM,MAAM,QAA2F,CAAC;IAI/G;;OAEG;IACH,SAAgB,iBAAiB,CAAC,YAAY,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,UAAU,EAAE,GAAG,MAAM,CAMrF;IAED,SAAgB,aAAa,CAAC,YAAY,EAAE,MAAM,GAAG,MAAM,CAa1D;IAED,SAAgB,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,UAAU,EAAE,GAAG,MAAM,CAEzF;CACF","file":"../../src/common/nls.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {FormatType, Localization} from './i18n/localization';\nimport bundle from '../assets/i18n/nls.metadata.json';\n\nexport namespace nls {\n\n  export let localization: Localization | undefined;\n\n  export const localeId = 'localeId';\n\n  export const locale = typeof window === 'object' && window && window.localStorage.getItem(localeId) || 'zh-cn';\n\n  let keyProvider: LocalizationKeyProvider | undefined;\n\n  /**\n   * Automatically localizes a text if that text also exists in the vscode repository.\n   */\n  export function localizeByDefault(defaultValue: string, ...args: FormatType[]): string {\n    const key = getDefaultKey(defaultValue);\n    if (key) {\n      return localize(key, defaultValue, ...args);\n    }\n    return Localization.format(defaultValue, args);\n  }\n\n  export function getDefaultKey(defaultValue: string): string {\n    if (localization) {\n      if (!keyProvider) {\n        keyProvider = new LocalizationKeyProvider();\n      }\n      const key = keyProvider.get(defaultValue);\n      if (key) {\n        return key;\n      } else {\n        // console.warn(`Could not find translation key for default value: \"${defaultValue}\"`);\n      }\n    }\n    return '';\n  }\n\n  export function localize(key: string, defaultValue: string, ...args: FormatType[]): string {\n    return Localization.localize(localization, key, defaultValue, ...args);\n  }\n}\n\ninterface NlsKeys {\n  [key: string]: (string | NlsInfo)[]\n}\n\ninterface NlsInfo {\n  key: string\n  comment: string[]\n}\n\nclass LocalizationKeyProvider {\n\n  private data = this.buildData();\n\n  get(defaultValue: string): string | undefined {\n    return this.data.get(defaultValue);\n  }\n\n  /**\n   * Transforms the data coming from the `nls.metadata.json` file into a map.\n   * The original data contains arrays of keys and messages.\n   * The result is a map that matches each message to the key that belongs to it.\n   *\n   * This allows us to skip the key in the localization process and map the original english default values to their translations in different languages.json.\n   */\n  private buildData(): Map<string, string> {\n    const bundles = bundle;\n    const keys: NlsKeys = bundles.keys;\n    const messages: Record<string, string[]> = bundles.messages;\n    const data = new Map<string, string>();\n    for (const [fileKey, messageBundle] of Object.entries(messages)) {\n      const keyBundle = keys[fileKey];\n      for (let i = 0; i < messageBundle.length; i++) {\n        const message = Localization.normalize(messageBundle[i]);\n        const key = keyBundle[i];\n        const localizationKey = this.buildKey(typeof key === 'string' ? key : key.key, fileKey);\n        data.set(message, localizationKey);\n      }\n    }\n    return data;\n  }\n\n  private buildKey(key: string, filepath: string): string {\n    return `vscode/${filepath}/${key}`;\n  }\n}\n"]}