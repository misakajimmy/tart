{"version":3,"sources":["common/message-service.ts"],"names":[],"mappings":"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","file":"../../src/common/message-service.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {inject, injectable} from 'inversify';\nimport {\n  MessageClient,\n  MessageOptions,\n  MessageType,\n  Progress,\n  ProgressMessage,\n  ProgressUpdate\n} from './message-service-protocol';\nimport {CancellationTokenSource} from './cancellation';\n\nexport const MessageServiceFactory = Symbol('MessageServiceFactory');\n\n/**\n * Service to log and categorize messages, show progress information and offer actions.\n *\n * The messages are processed by this service and forwarded to an injected {@link MessageClient}.\n * For example \"@tart/messages\" provides such a client, rendering messages as notifications\n * in the frontend.\n *\n * ### Example usage\n *\n * ```typescript\n *   @inject(MessageService)\n *   protected readonly messageService: MessageService;\n *\n *   messageService.warn(\"Typings not available\");\n *\n *   messageService.error(\"Could not restore state\", [\"Rollback\", \"Ignore\"])\n *   .then(action => action === \"Rollback\" && rollback());\n * ```\n */\n@injectable()\nexport class MessageService {\n\n  private progressIdPrefix = Math.random().toString(36).substring(5);\n  private counter = 0;\n\n  constructor(\n      @inject(MessageClient) protected readonly client: MessageClient\n  ) {\n  }\n\n  /**\n   * Logs the message and, if given, offers actions to act on it.\n   * @param message the message to log.\n   * @param actions the actions to offer. Can be omitted.\n   *\n   * @returns the selected action if there is any, `undefined` when there was no action or none was selected.\n   */\n  log<T extends string>(message: string, ...actions: T[]): Promise<T | undefined>;\n\n  /**\n   * Logs the message and, if given, offers actions to act on it.\n   * @param message the message to log.\n   * @param options additional options. Can be omitted\n   * @param actions the actions to offer. Can be omitted.\n   *\n   * @returns the selected action if there is any, `undefined` when there was no action or none was selected.\n   */\n  log<T extends string>(message: string, options?: MessageOptions, ...actions: T[]): Promise<T | undefined>;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  log(message: string, ...args: any[]): Promise<string | undefined> {\n    return this.processMessage(MessageType.Log, message, args);\n  }\n\n  /**\n   * Logs the message as \"info\" and, if given, offers actions to act on it.\n   * @param message the message to log.\n   * @param actions the actions to offer. Can be omitted.\n   *\n   * @returns the selected action if there is any, `undefined` when there was no action or none was selected.\n   */\n  info<T extends string>(message: string, ...actions: T[]): Promise<T | undefined>;\n\n  /**\n   * Logs the message as \"info\" and, if given, offers actions to act on it.\n   * @param message the message to log.\n   * @param options additional options. Can be omitted\n   * @param actions the actions to offer. Can be omitted.\n   *\n   * @returns the selected action if there is any, `undefined` when there was no action or none was selected.\n   */\n  info<T extends string>(message: string, options?: MessageOptions, ...actions: T[]): Promise<T | undefined>;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  info(message: string, ...args: any[]): Promise<string | undefined> {\n    return this.processMessage(MessageType.Info, message, args);\n  }\n\n  /**\n   * Logs the message as \"warning\" and, if given, offers actions to act on it.\n   * @param message the message to log.\n   * @param actions the actions to offer. Can be omitted.\n   *\n   * @returns the selected action if there is any, `undefined` when there was no action or none was selected.\n   */\n  warn<T extends string>(message: string, ...actions: T[]): Promise<T | undefined>;\n\n  /**\n   * Logs the message as \"warning\" and, if given, offers actions to act on it.\n   * @param message the message to log.\n   * @param options additional options. Can be omitted\n   * @param actions the actions to offer. Can be omitted.\n   *\n   * @returns the selected action if there is any, `undefined` when there was no action or none was selected.\n   */\n  warn<T extends string>(message: string, options?: MessageOptions, ...actions: T[]): Promise<T | undefined>;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  warn(message: string, ...args: any[]): Promise<string | undefined> {\n    return this.processMessage(MessageType.Warning, message, args);\n  }\n\n  /**\n   * Logs the message as \"error\" and, if given, offers actions to act on it.\n   * @param message the message to log.\n   * @param actions the actions to offer. Can be omitted.\n   *\n   * @returns the selected action if there is any, `undefined` when there was no action or none was selected.\n   */\n  error<T extends string>(message: string, ...actions: T[]): Promise<T | undefined>;\n\n  /**\n   * Logs the message as \"error\" and, if given, offers actions to act on it.\n   * @param message the message to log.\n   * @param options additional options. Can be omitted\n   * @param actions the actions to offer. Can be omitted.\n   *\n   * @returns the selected action if there is any, `undefined` when there was no action or none was selected.\n   */\n  error<T extends string>(message: string, options?: MessageOptions, ...actions: T[]): Promise<T | undefined>;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error(message: string, ...args: any[]): Promise<string | undefined> {\n    return this.processMessage(MessageType.Error, message, args);\n  }\n\n  /**\n   * Shows the given message as a progress.\n   *\n   * @param message the message to show for the progress.\n   * @param onDidCancel an optional callback which will be invoked if the progress indicator was canceled.\n   *\n   * @returns a promise resolving to a {@link Progress} object with which the progress can be updated.\n   *\n   * ### Example usage\n   *\n   * ```typescript\n   *   @inject(MessageService)\n   *   protected readonly messageService: MessageService;\n   *\n   *   // this will show \"Progress\" as a cancelable message\n   *   this.messageService.showProgress({text: 'Progress'});\n   *\n   *   // this will show \"Rolling back\" with \"Cancel\" and an additional \"Skip\" action\n   *   this.messageService.showProgress({\n   *     text: `Rolling back`,\n   *     actions: [\"Skip\"],\n   *   },\n   *   () => console.log(\"canceled\"))\n   *   .then((progress) => {\n   *     // register if interested in the result (only necessary for custom actions)\n   *     progress.result.then((result) => {\n   *       // will be 'Cancel', 'Skip' or `undefined`\n   *       console.log(\"result is\", result);\n   *     });\n   *     progress.report({message: \"Cleaning references\", work: {done: 10, total: 100}});\n   *     progress.report({message: \"Restoring previous state\", work: {done: 80, total: 100}});\n   *     progress.report({message: \"Complete\", work: {done: 100, total: 100}});\n   *     // we are done so we can cancel the progress message, note that this will also invoke `onDidCancel`\n   *     progress.cancel();\n   *   });\n   * ```\n   */\n  async showProgress(message: ProgressMessage, onDidCancel?: () => void): Promise<Progress> {\n    const id = this.newProgressId();\n    const cancellationSource = new CancellationTokenSource();\n    const report = (update: ProgressUpdate) => {\n      this.client.reportProgress(id, update, message, cancellationSource.token);\n    };\n    const actions = new Set<string>(message.actions);\n    if (ProgressMessage.isCancelable(message)) {\n      actions.delete(ProgressMessage.Cancel);\n      actions.add(ProgressMessage.Cancel);\n    }\n    const clientMessage = {...message, actions: Array.from(actions)};\n    const result = this.client.showProgress(id, clientMessage, cancellationSource.token);\n    if (ProgressMessage.isCancelable(message) && typeof onDidCancel === 'function') {\n      result.then(value => {\n        if (value === ProgressMessage.Cancel) {\n          onDidCancel();\n        }\n      });\n    }\n    return {\n      id,\n      cancel: () => cancellationSource.cancel(),\n      result,\n      report\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected processMessage(type: MessageType, text: string, args?: any[]): Promise<string | undefined> {\n    if (!!args && args.length > 0) {\n      const first = args[0];\n      const actions = Array.from(new Set<string>(args.filter(a => typeof a === 'string')));\n      const options = (typeof first === 'object' && !Array.isArray(first))\n          ? <MessageOptions>first\n          : undefined;\n      return this.client.showMessage({type, options, text, actions});\n    }\n    return this.client.showMessage({type, text});\n  }\n\n  protected newProgressId(): string {\n    return `${this.progressIdPrefix}-${++this.counter}`;\n  }\n}\n"]}