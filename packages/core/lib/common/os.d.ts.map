{"version":3,"sources":["common/os.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAWlF,eAAO,MAAM,SAAS,SAAyB,CAAC;AAChD,eAAO,MAAM,KAAK,SAAsB,CAAC;AAEzC,oBAAY,GAAG,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;AAErC,wBAAgB,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,MAAM,EAAE,GAAG,GAAG,CAK3D;AAED,yBAAiB,EAAE,CAAC;IAElB;;OAEG;IACH,KAAY,IAAI;QACd,OAAO,YAAY;QACnB,KAAK,UAAU;QACf,GAAG,QAAQ;KACZ;IAED;;;OAGG;IACH,SAAgB,IAAI,IAAI,EAAE,CAAC,IAAI,CAQ9B;CAEF","file":"../../src/common/os.d.ts","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nfunction is(userAgent: string, platform: string): boolean {\n  if (typeof navigator !== 'undefined') {\n    if (navigator.userAgent && navigator.userAgent.indexOf(userAgent) >= 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const isWindows = is('Windows', 'win32');\nexport const isOSX = is('Mac', 'darwin');\n\nexport type CMD = [string, string[]];\n\nexport function cmd(command: string, ...args: string[]): CMD {\n  return [\n    isWindows ? 'cmd' : command,\n    isWindows ? ['/c', command, ...args] : args\n  ];\n}\n\nexport namespace OS {\n\n  /**\n   * Enumeration of the supported operating systems.\n   */\n  export enum Type {\n    Windows = 'Windows',\n    Linux = 'Linux',\n    OSX = 'OSX'\n  }\n\n  /**\n   * Returns with the type of the operating system. If it is neither [Windows](isWindows) nor [OS X](isOSX), then\n   * it always return with the `Linux` OS type.\n   */\n  export function type(): OS.Type {\n    if (isWindows) {\n      return Type.Windows;\n    }\n    if (isOSX) {\n      return Type.OSX;\n    }\n    return Type.Linux;\n  }\n\n}\n"]}