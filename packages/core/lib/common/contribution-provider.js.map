{"version":3,"sources":["common/contribution-provider.ts"],"names":[],"mappings":"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","file":"../../src/common/contribution-provider.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport {interfaces} from 'inversify';\nimport {ContributionFilterRegistry} from './contribution-filter';\n\nexport const ContributionProvider = Symbol('ContributionProvider');\n\nexport interface ContributionProvider<T extends object> {\n\n  /**\n   * @param recursive `true` if the contributions should be collected from the parent containers as well. Otherwise, `false`. It is `false` by default.\n   */\n  getContributions(recursive?: boolean): T[]\n}\n\nclass ContainerBasedContributionProvider<T extends object> implements ContributionProvider<T> {\n\n  protected services: T[] | undefined;\n\n  constructor(\n      protected readonly serviceIdentifier: interfaces.ServiceIdentifier<T>,\n      protected readonly container: interfaces.Container\n  ) {\n  }\n\n  getContributions(recursive?: boolean): T[] {\n    if (this.services === undefined) {\n      const currentServices: T[] = [];\n      let filterRegistry: ContributionFilterRegistry | undefined;\n      let currentContainer: interfaces.Container | null = this.container;\n      // eslint-disable-next-line no-null/no-null\n      while (currentContainer !== null) {\n        if (currentContainer.isBound(this.serviceIdentifier)) {\n          try {\n            currentServices.push(...currentContainer.getAll(this.serviceIdentifier));\n          } catch (error) {\n            console.error(error);\n          }\n        }\n        if (filterRegistry === undefined && currentContainer.isBound(ContributionFilterRegistry)) {\n          filterRegistry = currentContainer.get(ContributionFilterRegistry);\n        }\n        // eslint-disable-next-line no-null/no-null\n        currentContainer = recursive === true ? currentContainer.parent : null;\n      }\n\n      this.services = filterRegistry ? filterRegistry.applyFilters(currentServices, this.serviceIdentifier) : currentServices;\n\n    }\n    return this.services;\n  }\n}\n\nexport type Bindable = interfaces.Bind | interfaces.Container;\nexport namespace Bindable {\n  export function isContainer(arg: Bindable): arg is interfaces.Container {\n    return typeof arg !== 'function'\n        // https://github.com/eclipse-tart/tart/issues/3204#issue-371029654\n        // In InversifyJS `4.14.0` containers no longer have a property `guid`.\n        && ('guid' in arg || 'parent' in arg);\n  }\n}\n\nexport function bindContributionProvider(bindable: Bindable, id: symbol): void {\n  const bindingToSyntax = (Bindable.isContainer(bindable) ? bindable.bind(ContributionProvider) : bindable(ContributionProvider));\n  bindingToSyntax\n      .toDynamicValue(ctx => new ContainerBasedContributionProvider(id, ctx.container))\n      .inSingletonScope().whenTargetNamed(id);\n}\n\n/**\n * Helper function to bind a service to a list of contributions easily.\n * @param bindable a Container or the bind function directly.\n * @param service an already bound service to refer the contributions to.\n * @param contributions array of contribution identifiers to bind the service to.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function bindContribution(bindable: Bindable, service: interfaces.ServiceIdentifier<any>, contributions: interfaces.ServiceIdentifier<any>[]): void {\n  const bind: interfaces.Bind = Bindable.isContainer(bindable) ? bindable.bind.bind(bindable) : bindable;\n  for (const contribution of contributions) {\n    bind(contribution).toService(service);\n  }\n}\n"]}