{"version":3,"sources":["common/ternary-search-tree.ts"],"names":[],"mappings":"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","file":"../../src/common/ternary-search-tree.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2020 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/base/common/map.ts#L251\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/tslint/config */\n\nimport URI from './uri';\nimport {CharCode} from './char-code';\nimport {compare, compareSubstring, compareSubstringIgnoreCase} from './strings';\n\nexport interface IKeyIterator<K> {\n  reset(key: K): this;\n\n  next(): this;\n\n  hasNext(): boolean;\n\n  cmp(a: string): number;\n\n  value(): string;\n}\n\nexport class PathIterator implements IKeyIterator<string> {\n\n  private _value!: string;\n  private _from!: number;\n  private _to!: number;\n\n  constructor(\n      private readonly _splitOnBackslash: boolean = true,\n      private readonly _caseSensitive: boolean = true\n  ) {\n  }\n\n  reset(key: string): this {\n    this._value = key.replace(/\\\\$|\\/$/, '');\n    this._from = 0;\n    this._to = 0;\n    return this.next();\n  }\n\n  hasNext(): boolean {\n    return this._to < this._value.length;\n  }\n\n  next(): this {\n    // this._data = key.split(/[\\\\/]/).filter(s => !!s);\n    this._from = this._to;\n    let justSeps = true;\n    for (; this._to < this._value.length; this._to++) {\n      const ch = this._value.charCodeAt(this._to);\n      if (ch === CharCode.Slash || this._splitOnBackslash && ch === CharCode.Backslash) {\n        if (justSeps) {\n          this._from++;\n        } else {\n          break;\n        }\n      } else {\n        justSeps = false;\n      }\n    }\n    return this;\n  }\n\n  cmp(a: string): number {\n    return this._caseSensitive\n        ? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n        : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n  }\n\n  value(): string {\n    return this._value.substring(this._from, this._to);\n  }\n}\n\nconst enum UriIteratorState {\n  Scheme = 1, Authority = 2, Path = 3, Query = 4, Fragment = 5\n}\n\nexport class UriIterator implements IKeyIterator<URI> {\n\n  private _pathIterator!: PathIterator;\n  private _value!: URI;\n  private _states: UriIteratorState[] = [];\n  private _stateIdx: number = 0;\n\n  constructor(\n      protected readonly caseSensitive: boolean\n  ) {\n  }\n\n  reset(key: URI): this {\n    this._value = key;\n    this._states = [];\n    if (this._value.scheme) {\n      this._states.push(UriIteratorState.Scheme);\n    }\n    if (this._value.authority) {\n      this._states.push(UriIteratorState.Authority);\n    }\n    if (this._value.path) {\n      this._pathIterator = new PathIterator(false, this.caseSensitive);\n      this._pathIterator.reset(key.path.toString());\n      if (this._pathIterator.value()) {\n        this._states.push(UriIteratorState.Path);\n      }\n    }\n    if (this._value.query) {\n      this._states.push(UriIteratorState.Query);\n    }\n    if (this._value.fragment) {\n      this._states.push(UriIteratorState.Fragment);\n    }\n    this._stateIdx = 0;\n    return this;\n  }\n\n  next(): this {\n    if (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext()) {\n      this._pathIterator.next();\n    } else {\n      this._stateIdx += 1;\n    }\n    return this;\n  }\n\n  hasNext(): boolean {\n    return (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext())\n        || this._stateIdx < this._states.length - 1;\n  }\n\n  cmp(a: string): number {\n    if (this._states[this._stateIdx] === UriIteratorState.Scheme) {\n      return compareSubstringIgnoreCase(a, this._value.scheme);\n    } else if (this._states[this._stateIdx] === UriIteratorState.Authority) {\n      return compareSubstringIgnoreCase(a, this._value.authority);\n    } else if (this._states[this._stateIdx] === UriIteratorState.Path) {\n      return this._pathIterator.cmp(a);\n    } else if (this._states[this._stateIdx] === UriIteratorState.Query) {\n      return compare(a, this._value.query);\n    } else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {\n      return compare(a, this._value.fragment);\n    }\n    throw new Error();\n  }\n\n  value(): string {\n    if (this._states[this._stateIdx] === UriIteratorState.Scheme) {\n      return this._value.scheme;\n    } else if (this._states[this._stateIdx] === UriIteratorState.Authority) {\n      return this._value.authority;\n    } else if (this._states[this._stateIdx] === UriIteratorState.Path) {\n      return this._pathIterator.value();\n    } else if (this._states[this._stateIdx] === UriIteratorState.Query) {\n      return this._value.query;\n    } else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {\n      return this._value.fragment;\n    }\n    throw new Error();\n  }\n}\n\nclass TernarySearchTreeNode<K, V> {\n  segment!: string;\n  value: V | undefined;\n  key!: K;\n  left: TernarySearchTreeNode<K, V> | undefined;\n  mid: TernarySearchTreeNode<K, V> | undefined;\n  right: TernarySearchTreeNode<K, V> | undefined;\n\n  isEmpty(): boolean {\n    return !this.left && !this.mid && !this.right && !this.value;\n  }\n}\n\nexport class TernarySearchTree<K, V> {\n\n  private _iter: IKeyIterator<K>;\n  private _root: TernarySearchTreeNode<K, V> | undefined;\n\n  constructor(segments: IKeyIterator<K>) {\n    this._iter = segments;\n  }\n\n  static forUris<E>(caseSensitive: boolean): TernarySearchTree<URI, E> {\n    return new TernarySearchTree<URI, E>(new UriIterator(caseSensitive));\n  }\n\n  static forPaths<E>(): TernarySearchTree<string, E> {\n    return new TernarySearchTree<string, E>(new PathIterator());\n  }\n\n  clear(): void {\n    this._root = undefined;\n  }\n\n  set(key: K, element: V): V | undefined {\n    const iter = this._iter.reset(key);\n    let node: TernarySearchTreeNode<K, V>;\n\n    if (!this._root) {\n      this._root = new TernarySearchTreeNode<K, V>();\n      this._root.segment = iter.value();\n    }\n\n    node = this._root;\n    while (true) {\n      const val = iter.cmp(node.segment);\n      if (val > 0) {\n        // left\n        if (!node.left) {\n          node.left = new TernarySearchTreeNode<K, V>();\n          node.left.segment = iter.value();\n        }\n        node = node.left;\n\n      } else if (val < 0) {\n        // right\n        if (!node.right) {\n          node.right = new TernarySearchTreeNode<K, V>();\n          node.right.segment = iter.value();\n        }\n        node = node.right;\n\n      } else if (iter.hasNext()) {\n        // mid\n        iter.next();\n        if (!node.mid) {\n          node.mid = new TernarySearchTreeNode<K, V>();\n          node.mid.segment = iter.value();\n        }\n        node = node.mid;\n      } else {\n        break;\n      }\n    }\n    const oldElement = node.value;\n    node.value = element;\n    node.key = key;\n    return oldElement;\n  }\n\n  get(key: K): V | undefined {\n    const iter = this._iter.reset(key);\n    let node = this._root;\n    while (node) {\n      const val = iter.cmp(node.segment);\n      if (val > 0) {\n        // left\n        node = node.left;\n      } else if (val < 0) {\n        // right\n        node = node.right;\n      } else if (iter.hasNext()) {\n        // mid\n        iter.next();\n        node = node.mid;\n      } else {\n        break;\n      }\n    }\n    return node ? node.value : undefined;\n  }\n\n  delete(key: K): void {\n\n    const iter = this._iter.reset(key);\n    const stack: [-1 | 0 | 1, TernarySearchTreeNode<K, V>][] = [];\n    let node = this._root;\n\n    // find and unset node\n    while (node) {\n      const val = iter.cmp(node.segment);\n      if (val > 0) {\n        // left\n        stack.push([1, node]);\n        node = node.left;\n      } else if (val < 0) {\n        // right\n        stack.push([-1, node]);\n        node = node.right;\n      } else if (iter.hasNext()) {\n        // mid\n        iter.next();\n        stack.push([0, node]);\n        node = node.mid;\n      } else {\n        // remove element\n        node.value = undefined;\n\n        // clean up empty nodes\n        while (stack.length > 0 && node.isEmpty()) {\n          const [dir, parent] = stack.pop()!;\n          switch (dir) {\n            case 1:\n              parent.left = undefined;\n              break;\n            case 0:\n              parent.mid = undefined;\n              break;\n            case -1:\n              parent.right = undefined;\n              break;\n          }\n          node = parent;\n        }\n        break;\n      }\n    }\n  }\n\n  findSubstr(key: K): V | undefined {\n    const iter = this._iter.reset(key);\n    let node = this._root;\n    let candidate: V | undefined = undefined;\n    while (node) {\n      const val = iter.cmp(node.segment);\n      if (val > 0) {\n        // left\n        node = node.left;\n      } else if (val < 0) {\n        // right\n        node = node.right;\n      } else if (iter.hasNext()) {\n        // mid\n        iter.next();\n        candidate = node.value || candidate;\n        node = node.mid;\n      } else {\n        break;\n      }\n    }\n    return node && node.value || candidate;\n  }\n\n  findSuperstr(key: K): Iterator<V> | undefined {\n    const iter = this._iter.reset(key);\n    let node = this._root;\n    while (node) {\n      const val = iter.cmp(node.segment);\n      if (val > 0) {\n        // left\n        node = node.left;\n      } else if (val < 0) {\n        // right\n        node = node.right;\n      } else if (iter.hasNext()) {\n        // mid\n        iter.next();\n        node = node.mid;\n      } else {\n        // collect\n        if (!node.mid) {\n          return undefined;\n        } else {\n          return this._nodeIterator(node.mid);\n        }\n      }\n    }\n    return undefined;\n  }\n\n  forEach(callback: (value: V, index: K) => any) {\n    this._forEach(this._root, callback);\n  }\n\n  private _nodeIterator(node: TernarySearchTreeNode<K, V>): Iterator<V> {\n    let res: { done: false; value: V; };\n    let idx: number;\n    let data: V[];\n    const next = (): IteratorResult<V> => {\n      if (!data) {\n        // lazy till first invocation\n        data = [];\n        idx = 0;\n        this._forEach(node, value => data.push(value));\n      }\n      if (idx >= data.length) {\n        return {done: true, value: undefined};\n      }\n\n      if (!res) {\n        res = {done: false, value: data[idx++]};\n      } else {\n        res.value = data[idx++];\n      }\n      return res;\n    };\n    return {next};\n  }\n\n  private _forEach(node: TernarySearchTreeNode<K, V> | undefined, callback: (value: V, index: K) => any) {\n    if (node) {\n      // left\n      this._forEach(node.left, callback);\n\n      // node\n      if (node.value) {\n        // callback(node.value, this._iter.join(parts));\n        callback(node.value, node.key);\n      }\n      // mid\n      this._forEach(node.mid, callback);\n\n      // right\n      this._forEach(node.right, callback);\n    }\n  }\n}\n"]}