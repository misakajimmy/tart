{"version":3,"sources":["browser/workspace-delete-handler.ts"],"names":[],"mappings":"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","file":"../../src/browser/workspace-delete-handler.js","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport {UriCommandHandler} from '@tart/core/lib/common/uri-command-handler';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {FileService} from '@tart/filesystem/lib/browser/file-service';\r\nimport {ApplicationShell, ConfirmDialog, NavigatableWidget, SaveableWidget} from '@tart/core';\r\nimport {WorkspaceService} from './workspace-service';\r\nimport {FileSystemPreferences} from '@tart/filesystem/lib/browser/filesystem-preferences';\r\nimport {FileDeleteOptions, FileSystemProviderCapabilities} from '@tart/filesystem/lib/common/files';\r\nimport {WorkspaceUtils} from './workspace-utils';\r\n\r\n@injectable()\r\nexport class WorkspaceDeleteHandler implements UriCommandHandler<URI[]> {\r\n\r\n  @inject(FileService)\r\n  protected readonly fileService: FileService;\r\n\r\n  @inject(ApplicationShell)\r\n  protected readonly shell: ApplicationShell;\r\n\r\n  @inject(WorkspaceUtils)\r\n  protected readonly workspaceUtils: WorkspaceUtils;\r\n\r\n  @inject(WorkspaceService)\r\n  protected readonly workspaceService: WorkspaceService;\r\n\r\n  @inject(FileSystemPreferences)\r\n  protected readonly fsPreferences: FileSystemPreferences;\r\n\r\n  /**\r\n   * Determine if the command is visible.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   * @returns `true` if the command is visible.\r\n   */\r\n  isVisible(uris: URI[]): boolean {\r\n    return !!uris.length && !this.workspaceUtils.containsRootDirectory(uris);\r\n  }\r\n\r\n  /**\r\n   * Determine if the command is enabled.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   * @returns `true` if the command is enabled.\r\n   */\r\n  isEnabled(uris: URI[]): boolean {\r\n    return !!uris.length && !this.workspaceUtils.containsRootDirectory(uris);\r\n  }\r\n\r\n  /**\r\n   * Execute the command.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   */\r\n  async execute(uris: URI[]): Promise<void> {\r\n    const distinctUris = URI.getDistinctParents(uris);\r\n    const resolved: FileDeleteOptions = {\r\n      recursive: true,\r\n      useTrash: this.fsPreferences['files.enableTrash'] && distinctUris[0] && this.fileService.hasCapability(distinctUris[0], FileSystemProviderCapabilities.Trash)\r\n    };\r\n    if (await this.confirm(distinctUris, resolved)) {\r\n      await Promise.all(distinctUris.map(uri => this.delete(uri, resolved)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display dialog to confirm deletion.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   */\r\n  protected confirm(uris: URI[], options: FileDeleteOptions): Promise<boolean | undefined> {\r\n    let title = `File${uris.length === 1 ? '' : 's'}`;\r\n    if (options.useTrash) {\r\n      title = 'Move ' + title + ' to Trash';\r\n    } else {\r\n      title = 'Delete ' + title;\r\n    }\r\n    return new ConfirmDialog({\r\n      title,\r\n      msg: this.getConfirmMessage(uris)\r\n    }).open();\r\n  }\r\n\r\n  /**\r\n   * Get the dialog confirmation message for deletion.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   */\r\n  protected getConfirmMessage(uris: URI[]): string | HTMLElement {\r\n    const dirty = this.getDirty(uris);\r\n    if (dirty.length) {\r\n      if (dirty.length === 1) {\r\n        return `Do you really want to delete ${dirty[0].path.base} with unsaved changes?`;\r\n      }\r\n      return `Do you really want to delete ${dirty.length} files with unsaved changes?`;\r\n    }\r\n    if (uris.length === 1) {\r\n      return `Do you really want to delete ${uris[0].path.base}?`;\r\n    }\r\n    if (uris.length > 10) {\r\n      return `Do you really want to delete all the ${uris.length} selected files?`;\r\n    }\r\n    const messageContainer = document.createElement('div');\r\n    messageContainer.textContent = 'Do you really want to delete the following files?';\r\n    const list = document.createElement('ul');\r\n    list.style.listStyleType = 'none';\r\n    for (const uri of uris) {\r\n      const listItem = document.createElement('li');\r\n      listItem.textContent = uri.path.base;\r\n      list.appendChild(listItem);\r\n    }\r\n    messageContainer.appendChild(list);\r\n    return messageContainer;\r\n  }\r\n\r\n  /**\r\n   * Get which URI are presently dirty.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   * @returns An array of dirty URI.\r\n   */\r\n  protected getDirty(uris: URI[]): URI[] {\r\n    const dirty = new Map<string, URI>();\r\n    const widgets = NavigatableWidget.getAffected(SaveableWidget.getDirty(this.shell.widgets), uris);\r\n    for (const [resourceUri] of widgets) {\r\n      dirty.set(resourceUri.toString(), resourceUri);\r\n    }\r\n    return [...dirty.values()];\r\n  }\r\n\r\n  /**\r\n   * Perform deletion of a given URI.\r\n   *\r\n   * @param uri URI of selected resource.\r\n   */\r\n  protected async delete(uri: URI, options: FileDeleteOptions): Promise<void> {\r\n    try {\r\n      await Promise.all([\r\n        this.closeWithoutSaving(uri),\r\n        this.fileService.delete(uri, options)\r\n      ]);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close widget without saving changes.\r\n   *\r\n   * @param uri URI of a selected resource.\r\n   */\r\n  protected async closeWithoutSaving(uri: URI): Promise<void> {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const pending: Promise<any>[] = [];\r\n    for (const [, widget] of NavigatableWidget.getAffected(this.shell.widgets, uri)) {\r\n      pending.push(this.shell.closeWidget(widget.id, {save: false}));\r\n    }\r\n    await Promise.all(pending);\r\n  }\r\n\r\n}\r\n"]}