{"version":3,"sources":["browser/workspace-frontend-contribution.ts"],"names":[],"mappings":"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","file":"../../src/browser/workspace-frontend-contribution.js","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport {CommandContribution, CommandRegistry, MenuContribution, MenuModelRegistry, OS} from '@tart/core/lib/common';\r\nimport {CommonMenus, KeybindingContribution, KeybindingRegistry, open, OpenerService} from '@tart/core';\r\nimport {FileDialogService, FileDialogTreeFilters, OpenFileDialogProps} from '@tart/filesystem';\r\nimport {WorkspaceCommands} from './workspace-commands';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {WorkspaceService} from './workspace-service';\r\nimport {FileService} from '@tart/filesystem/lib/browser/file-service';\r\nimport {WorkspacePreferences} from './workspace-preference';\r\nimport {VSCODE_EXT, WM_EXT} from '../common';\r\n\r\n@injectable()\r\nexport class WorkspaceFrontendContribution implements CommandContribution, KeybindingContribution, MenuContribution {\r\n  @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService;\r\n  @inject(OpenerService) protected readonly openerService: OpenerService;\r\n  @inject(FileService) protected readonly fileService: FileService;\r\n  @inject(FileDialogService) protected readonly fileDialogService: FileDialogService;\r\n  @inject(WorkspacePreferences) protected preferences: WorkspacePreferences;\r\n\r\n  registerCommands(commands: CommandRegistry): void {\r\n    commands.registerCommand(WorkspaceCommands.OPEN_WORKSPACE, {\r\n      isEnabled: () => true,\r\n      execute: () => this.doOpenWorkspace(),\r\n    });\r\n  }\r\n\r\n  registerKeybindings(keybindings: KeybindingRegistry): void {\r\n    keybindings.registerKeybinding({\r\n      command: WorkspaceCommands.NEW_FILE.id,\r\n      keybinding: 'alt+n',\r\n    });\r\n    keybindings.registerKeybinding({\r\n      command: WorkspaceCommands.OPEN.id,\r\n      keybinding: 'ctrlcmd+alt+o',\r\n    });\r\n    keybindings.registerKeybinding({\r\n      command: WorkspaceCommands.OPEN_WORKSPACE.id,\r\n      keybinding: 'ctrlcmd+alt+w',\r\n    });\r\n  }\r\n\r\n  registerMenus(menus: MenuModelRegistry): void {\r\n    menus.registerMenuAction(CommonMenus.FILE_OPEN, {\r\n      commandId: WorkspaceCommands.OPEN.id,\r\n      order: 'a00'\r\n    });\r\n    menus.registerMenuAction(CommonMenus.FILE_OPEN, {\r\n      commandId: WorkspaceCommands.OPEN_WORKSPACE.id,\r\n      order: 'a10'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is the generic `Open` method. Opens files and directories too. Resolves to the opened URI.\r\n   * Except when you are on either Windows or Linux `AND` running in electron. If so, it opens a file.\r\n   */\r\n  protected async doOpen(): Promise<URI | undefined> {\r\n    const [rootStat] = await this.workspaceService.roots;\r\n    const destinationUri = new URI();\r\n    const destination = await this.fileService.resolve(destinationUri);\r\n    console.log(destination);\r\n    if (destination.isDirectory) {\r\n      this.workspaceService.open(destinationUri);\r\n    } else {\r\n      await open(this.openerService, destinationUri);\r\n    }\r\n    return destinationUri;\r\n    // return undefined;\r\n  }\r\n\r\n  protected async doOpenWorkspace(): Promise<URI | undefined> {\r\n    const props = await this.openWorkspaceOpenFileDialogProps();\r\n    const [rootStat] = await this.workspaceService.roots;\r\n    const workspaceFolderOrWorkspaceFileUri = await this.fileDialogService.showOpenDialog(props, rootStat);\r\n    return undefined;\r\n  }\r\n\r\n  protected async openWorkspaceOpenFileDialogProps(): Promise<OpenFileDialogProps> {\r\n    await this.preferences.ready;\r\n    const supportMultiRootWorkspace = this.preferences['workspace.supportMultiRootWorkspace'];\r\n    const type = OS.type();\r\n    const electron = false;\r\n    return WorkspaceFrontendContribution.createOpenWorkspaceOpenFileDialogProps({\r\n      type,\r\n      electron,\r\n      supportMultiRootWorkspace\r\n    });\r\n  }\r\n}\r\n\r\nexport namespace WorkspaceFrontendContribution {\r\n  /**\r\n   * File filter for all Wm and VS Code workspace file types.\r\n   */\r\n  export const DEFAULT_FILE_FILTER: FileDialogTreeFilters = {\r\n    'Wm Workspace (*.wm-workspace)': [WM_EXT],\r\n    'VS Code Workspace (*.code-workspace)': [VSCODE_EXT]\r\n  };\r\n\r\n  /**\r\n   * Returns with an `OpenFileDialogProps` for opening the `Open Workspace` dialog.\r\n   */\r\n  export function createOpenWorkspaceOpenFileDialogProps(options: Readonly<{ type: OS.Type, electron: boolean, supportMultiRootWorkspace: boolean }>): OpenFileDialogProps {\r\n    const {electron, type, supportMultiRootWorkspace} = options;\r\n    const title = WorkspaceCommands.OPEN_WORKSPACE.dialogLabel;\r\n    // If browser\r\n    if (!electron) {\r\n      // and multi-root workspace is supported, it is always folder + workspace files.\r\n      if (supportMultiRootWorkspace) {\r\n        return {\r\n          title,\r\n          canSelectFiles: true,\r\n          canSelectFolders: true,\r\n          filters: DEFAULT_FILE_FILTER\r\n        };\r\n      } else {\r\n        // otherwise, it is always folders. No files at all.\r\n        return {\r\n          title,\r\n          canSelectFiles: false,\r\n          canSelectFolders: true\r\n        };\r\n      }\r\n    }\r\n\r\n    // If electron\r\n    if (OS.Type.OSX === type) {\r\n      // `Finder` can select folders and files at the same time. We allow folders and workspace files.\r\n      return {\r\n        title,\r\n        canSelectFiles: true,\r\n        canSelectFolders: true,\r\n        filters: DEFAULT_FILE_FILTER\r\n      };\r\n    }\r\n\r\n    // In electron, only workspace files can be selected when the multi-root workspace feature is enabled.\r\n    if (supportMultiRootWorkspace) {\r\n      return {\r\n        title,\r\n        canSelectFiles: true,\r\n        canSelectFolders: false,\r\n        filters: DEFAULT_FILE_FILTER\r\n      };\r\n    }\r\n\r\n    // Otherwise, it is always a folder.\r\n    return {\r\n      title,\r\n      canSelectFiles: false,\r\n      canSelectFolders: true\r\n    };\r\n  }\r\n}\r\n"]}