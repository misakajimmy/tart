{"version":3,"sources":["browser/workspace-preference.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,qBAAqB,EACrB,sBAAsB,EAGtB,iBAAiB,EAClB,MAAM,YAAY,CAAC;AACpB,OAAO,EAAC,GAAG,EAAC,MAAM,2BAA2B,CAAC;AAG9C,MAAM,CAAC,MAAM,yBAAyB,GAAqB;IACzD,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACV,0BAA0B,EAAE;YAC1B,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,gCAAgC,EAAE,8CAA8C,CAAC;YAC3G,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,KAAK;SACf;QACD,qCAAqC,EAAE;YACrC,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,2CAA2C,EAAE,2DAA2D,CAAC;YACnI,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,IAAI;SACd;KACF;CACF,CAAC;AAOF,MAAM,CAAC,MAAM,+BAA+B,GAAG,MAAM,CAAC,iCAAiC,CAAC,CAAC;AACzF,MAAM,CAAC,MAAM,oBAAoB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAGnE,MAAM,UAAU,0BAA0B,CAAC,WAA8B,EAAE,SAA2B,yBAAyB;IAC7H,OAAO,qBAAqB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,IAAqB;IAC5D,IAAI,CAAC,oBAAoB,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;QAC9C,MAAM,WAAW,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAoB,iBAAiB,CAAC,CAAC;QAC5E,MAAM,YAAY,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAyB,+BAA+B,CAAC,CAAC;QAChG,OAAO,0BAA0B,CAAC,WAAW,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACtB,IAAI,CAAC,+BAA+B,CAAC,CAAC,eAAe,CAAC,EAAC,MAAM,EAAE,yBAAyB,EAAC,CAAC,CAAC;IAC3F,IAAI,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAAC,+BAA+B,CAAC,CAAC;AAC1E,CAAC","file":"../../src/browser/workspace-preference.js","sourcesContent":["import {\r\n  createPreferenceProxy,\r\n  PreferenceContribution,\r\n  PreferenceProxy,\r\n  PreferenceSchema,\r\n  PreferenceService\r\n} from '@tart/core';\r\nimport {nls} from '@tart/core/lib/common/nls';\r\nimport {interfaces} from 'inversify';\r\n\r\nexport const workspacePreferenceSchema: PreferenceSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    'workspace.preserveWindow': {\r\n      description: nls.localize('theia/workspace/preserveWindow', 'Enable opening workspaces in current window.'),\r\n      type: 'boolean',\r\n      default: false\r\n    },\r\n    'workspace.supportMultiRootWorkspace': {\r\n      description: nls.localize('theia/workspace/supportMultiRootWorkspace', 'Controls whether multi-root workspace support is enabled.'),\r\n      type: 'boolean',\r\n      default: true\r\n    }\r\n  }\r\n};\r\n\r\nexport interface WorkspaceConfiguration {\r\n  'workspace.preserveWindow': boolean,\r\n  'workspace.supportMultiRootWorkspace': boolean\r\n}\r\n\r\nexport const WorkspacePreferenceContribution = Symbol('WorkspacePreferenceContribution');\r\nexport const WorkspacePreferences = Symbol('WorkspacePreferences');\r\nexport type WorkspacePreferences = PreferenceProxy<WorkspaceConfiguration>;\r\n\r\nexport function createWorkspacePreferences(preferences: PreferenceService, schema: PreferenceSchema = workspacePreferenceSchema): WorkspacePreferences {\r\n  return createPreferenceProxy(preferences, schema);\r\n}\r\n\r\nexport function bindWorkspacePreferences(bind: interfaces.Bind): void {\r\n  bind(WorkspacePreferences).toDynamicValue(ctx => {\r\n    const preferences = ctx.container.get<PreferenceService>(PreferenceService);\r\n    const contribution = ctx.container.get<PreferenceContribution>(WorkspacePreferenceContribution);\r\n    return createWorkspacePreferences(preferences, contribution.schema);\r\n  }).inSingletonScope();\r\n  bind(WorkspacePreferenceContribution).toConstantValue({schema: workspacePreferenceSchema});\r\n  bind(PreferenceContribution).toService(WorkspacePreferenceContribution);\r\n}\r\n"]}