{"version":3,"sources":["browser/workspace-preference.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,eAAe,EACf,gBAAgB,EAChB,iBAAiB,EAClB,MAAM,YAAY,CAAC;AAEpB,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAErC,eAAO,MAAM,yBAAyB,EAAE,gBAcvC,CAAC;AAEF,MAAM,WAAW,sBAAsB;IACrC,0BAA0B,EAAE,OAAO,CAAC;IACpC,qCAAqC,EAAE,OAAO,CAAA;CAC/C;AAED,eAAO,MAAM,+BAA+B,eAA4C,CAAC;AACzF,eAAO,MAAM,oBAAoB,eAAiC,CAAC;AACnE,oBAAY,oBAAoB,GAAG,eAAe,CAAC,sBAAsB,CAAC,CAAC;AAE3E,wBAAgB,0BAA0B,CAAC,WAAW,EAAE,iBAAiB,EAAE,MAAM,GAAE,gBAA4C,GAAG,oBAAoB,CAErJ;AAED,wBAAgB,wBAAwB,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,GAAG,IAAI,CAQpE","file":"../../src/browser/workspace-preference.d.ts","sourcesContent":["import {\r\n  createPreferenceProxy,\r\n  PreferenceContribution,\r\n  PreferenceProxy,\r\n  PreferenceSchema,\r\n  PreferenceService\r\n} from '@tart/core';\r\nimport {nls} from '@tart/core/lib/common/nls';\r\nimport {interfaces} from 'inversify';\r\n\r\nexport const workspacePreferenceSchema: PreferenceSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    'workspace.preserveWindow': {\r\n      description: nls.localize('theia/workspace/preserveWindow', 'Enable opening workspaces in current window.'),\r\n      type: 'boolean',\r\n      default: false\r\n    },\r\n    'workspace.supportMultiRootWorkspace': {\r\n      description: nls.localize('theia/workspace/supportMultiRootWorkspace', 'Controls whether multi-root workspace support is enabled.'),\r\n      type: 'boolean',\r\n      default: true\r\n    }\r\n  }\r\n};\r\n\r\nexport interface WorkspaceConfiguration {\r\n  'workspace.preserveWindow': boolean,\r\n  'workspace.supportMultiRootWorkspace': boolean\r\n}\r\n\r\nexport const WorkspacePreferenceContribution = Symbol('WorkspacePreferenceContribution');\r\nexport const WorkspacePreferences = Symbol('WorkspacePreferences');\r\nexport type WorkspacePreferences = PreferenceProxy<WorkspaceConfiguration>;\r\n\r\nexport function createWorkspacePreferences(preferences: PreferenceService, schema: PreferenceSchema = workspacePreferenceSchema): WorkspacePreferences {\r\n  return createPreferenceProxy(preferences, schema);\r\n}\r\n\r\nexport function bindWorkspacePreferences(bind: interfaces.Bind): void {\r\n  bind(WorkspacePreferences).toDynamicValue(ctx => {\r\n    const preferences = ctx.container.get<PreferenceService>(PreferenceService);\r\n    const contribution = ctx.container.get<PreferenceContribution>(WorkspacePreferenceContribution);\r\n    return createWorkspacePreferences(preferences, contribution.schema);\r\n  }).inSingletonScope();\r\n  bind(WorkspacePreferenceContribution).toConstantValue({schema: workspacePreferenceSchema});\r\n  bind(PreferenceContribution).toService(WorkspacePreferenceContribution);\r\n}\r\n"]}