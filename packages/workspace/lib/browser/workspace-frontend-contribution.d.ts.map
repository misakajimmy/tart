{"version":3,"sources":["browser/workspace-frontend-contribution.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,mBAAmB,EAAE,eAAe,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,EAAE,EAAC,MAAM,uBAAuB,CAAC;AACpH,OAAO,EAAc,sBAAsB,EAAE,kBAAkB,EAAQ,aAAa,EAAC,MAAM,YAAY,CAAC;AACxG,OAAO,EAAC,iBAAiB,EAAE,qBAAqB,EAAE,mBAAmB,EAAC,MAAM,kBAAkB,CAAC;AAE/F,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAC,WAAW,EAAC,MAAM,2CAA2C,CAAC;AACtE,OAAO,EAAC,oBAAoB,EAAC,MAAM,wBAAwB,CAAC;AAG5D,qBACa,6BAA8B,YAAW,mBAAmB,EAAE,sBAAsB,EAAE,gBAAgB;IACvF,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;IACzD,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC;IAClD,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC;IACtC,SAAS,CAAC,QAAQ,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;IACrD,SAAS,CAAC,WAAW,EAAE,oBAAoB,CAAC;IAE1E,gBAAgB,CAAC,QAAQ,EAAE,eAAe,GAAG,IAAI;IAOjD,mBAAmB,CAAC,WAAW,EAAE,kBAAkB,GAAG,IAAI;IAe1D,aAAa,CAAC,KAAK,EAAE,iBAAiB,GAAG,IAAI;IAW7C;;;OAGG;cACa,MAAM,IAAI,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC;cAclC,eAAe,IAAI,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC;cAO3C,gCAAgC,IAAI,OAAO,CAAC,mBAAmB,CAAC;CAWjF;AAED,yBAAiB,6BAA6B,CAAC;IAC7C;;OAEG;IACI,MAAM,mBAAmB,EAAE,qBAGjC,CAAC;IAEF;;OAEG;IACH,SAAgB,sCAAsC,CAAC,OAAO,EAAE,QAAQ,CAAC;QAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC;QAAC,QAAQ,EAAE,OAAO,CAAC;QAAC,yBAAyB,EAAE,OAAO,CAAA;KAAE,CAAC,GAAG,mBAAmB,CAkDvK;CACF","file":"../../src/browser/workspace-frontend-contribution.d.ts","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport {CommandContribution, CommandRegistry, MenuContribution, MenuModelRegistry, OS} from '@tart/core/lib/common';\r\nimport {CommonMenus, KeybindingContribution, KeybindingRegistry, open, OpenerService} from '@tart/core';\r\nimport {FileDialogService, FileDialogTreeFilters, OpenFileDialogProps} from '@tart/filesystem';\r\nimport {WorkspaceCommands} from './workspace-commands';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {WorkspaceService} from './workspace-service';\r\nimport {FileService} from '@tart/filesystem/lib/browser/file-service';\r\nimport {WorkspacePreferences} from './workspace-preference';\r\nimport {VSCODE_EXT, WM_EXT} from '../common';\r\n\r\n@injectable()\r\nexport class WorkspaceFrontendContribution implements CommandContribution, KeybindingContribution, MenuContribution {\r\n  @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService;\r\n  @inject(OpenerService) protected readonly openerService: OpenerService;\r\n  @inject(FileService) protected readonly fileService: FileService;\r\n  @inject(FileDialogService) protected readonly fileDialogService: FileDialogService;\r\n  @inject(WorkspacePreferences) protected preferences: WorkspacePreferences;\r\n\r\n  registerCommands(commands: CommandRegistry): void {\r\n    commands.registerCommand(WorkspaceCommands.OPEN_WORKSPACE, {\r\n      isEnabled: () => true,\r\n      execute: () => this.doOpenWorkspace(),\r\n    });\r\n  }\r\n\r\n  registerKeybindings(keybindings: KeybindingRegistry): void {\r\n    keybindings.registerKeybinding({\r\n      command: WorkspaceCommands.NEW_FILE.id,\r\n      keybinding: 'alt+n',\r\n    });\r\n    keybindings.registerKeybinding({\r\n      command: WorkspaceCommands.OPEN.id,\r\n      keybinding: 'ctrlcmd+alt+o',\r\n    });\r\n    keybindings.registerKeybinding({\r\n      command: WorkspaceCommands.OPEN_WORKSPACE.id,\r\n      keybinding: 'ctrlcmd+alt+w',\r\n    });\r\n  }\r\n\r\n  registerMenus(menus: MenuModelRegistry): void {\r\n    menus.registerMenuAction(CommonMenus.FILE_OPEN, {\r\n      commandId: WorkspaceCommands.OPEN.id,\r\n      order: 'a00'\r\n    });\r\n    menus.registerMenuAction(CommonMenus.FILE_OPEN, {\r\n      commandId: WorkspaceCommands.OPEN_WORKSPACE.id,\r\n      order: 'a10'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is the generic `Open` method. Opens files and directories too. Resolves to the opened URI.\r\n   * Except when you are on either Windows or Linux `AND` running in electron. If so, it opens a file.\r\n   */\r\n  protected async doOpen(): Promise<URI | undefined> {\r\n    const [rootStat] = await this.workspaceService.roots;\r\n    const destinationUri = new URI();\r\n    const destination = await this.fileService.resolve(destinationUri);\r\n    console.log(destination);\r\n    if (destination.isDirectory) {\r\n      this.workspaceService.open(destinationUri);\r\n    } else {\r\n      await open(this.openerService, destinationUri);\r\n    }\r\n    return destinationUri;\r\n    // return undefined;\r\n  }\r\n\r\n  protected async doOpenWorkspace(): Promise<URI | undefined> {\r\n    const props = await this.openWorkspaceOpenFileDialogProps();\r\n    const [rootStat] = await this.workspaceService.roots;\r\n    const workspaceFolderOrWorkspaceFileUri = await this.fileDialogService.showOpenDialog(props, rootStat);\r\n    return undefined;\r\n  }\r\n\r\n  protected async openWorkspaceOpenFileDialogProps(): Promise<OpenFileDialogProps> {\r\n    await this.preferences.ready;\r\n    const supportMultiRootWorkspace = this.preferences['workspace.supportMultiRootWorkspace'];\r\n    const type = OS.type();\r\n    const electron = false;\r\n    return WorkspaceFrontendContribution.createOpenWorkspaceOpenFileDialogProps({\r\n      type,\r\n      electron,\r\n      supportMultiRootWorkspace\r\n    });\r\n  }\r\n}\r\n\r\nexport namespace WorkspaceFrontendContribution {\r\n  /**\r\n   * File filter for all Wm and VS Code workspace file types.\r\n   */\r\n  export const DEFAULT_FILE_FILTER: FileDialogTreeFilters = {\r\n    'Wm Workspace (*.wm-workspace)': [WM_EXT],\r\n    'VS Code Workspace (*.code-workspace)': [VSCODE_EXT]\r\n  };\r\n\r\n  /**\r\n   * Returns with an `OpenFileDialogProps` for opening the `Open Workspace` dialog.\r\n   */\r\n  export function createOpenWorkspaceOpenFileDialogProps(options: Readonly<{ type: OS.Type, electron: boolean, supportMultiRootWorkspace: boolean }>): OpenFileDialogProps {\r\n    const {electron, type, supportMultiRootWorkspace} = options;\r\n    const title = WorkspaceCommands.OPEN_WORKSPACE.dialogLabel;\r\n    // If browser\r\n    if (!electron) {\r\n      // and multi-root workspace is supported, it is always folder + workspace files.\r\n      if (supportMultiRootWorkspace) {\r\n        return {\r\n          title,\r\n          canSelectFiles: true,\r\n          canSelectFolders: true,\r\n          filters: DEFAULT_FILE_FILTER\r\n        };\r\n      } else {\r\n        // otherwise, it is always folders. No files at all.\r\n        return {\r\n          title,\r\n          canSelectFiles: false,\r\n          canSelectFolders: true\r\n        };\r\n      }\r\n    }\r\n\r\n    // If electron\r\n    if (OS.Type.OSX === type) {\r\n      // `Finder` can select folders and files at the same time. We allow folders and workspace files.\r\n      return {\r\n        title,\r\n        canSelectFiles: true,\r\n        canSelectFolders: true,\r\n        filters: DEFAULT_FILE_FILTER\r\n      };\r\n    }\r\n\r\n    // In electron, only workspace files can be selected when the multi-root workspace feature is enabled.\r\n    if (supportMultiRootWorkspace) {\r\n      return {\r\n        title,\r\n        canSelectFiles: true,\r\n        canSelectFolders: false,\r\n        filters: DEFAULT_FILE_FILTER\r\n      };\r\n    }\r\n\r\n    // Otherwise, it is always a folder.\r\n    return {\r\n      title,\r\n      canSelectFiles: false,\r\n      canSelectFolders: true\r\n    };\r\n  }\r\n}\r\n"]}