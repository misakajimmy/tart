{"version":3,"sources":["browser/workspace-service.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,aAAa,EAAC,MAAM,WAAW,CAAC;AAC5D,OAAO,EAAC,wBAAwB,EAAE,eAAe,EAAE,qBAAqB,EAAE,aAAa,EAAC,MAAM,YAAY,CAAC;AAC3G,OAAO,EAAW,QAAQ,EAAC,MAAM,mCAAmC,CAAC;AACrE,OAAO,EAAC,QAAQ,EAAC,MAAM,oCAAoC,CAAC;AAC5D,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,KAAK,WAAW,MAAM,cAAc,CAAC;AAC5C,OAAO,GAAG,MAAM,KAAK,CAAC;AACtB,OAAO,EAAC,WAAW,EAAC,MAAM,2CAA2C,CAAC;AACtE,OAAO,EAAC,UAAU,EAAE,MAAM,EAAC,MAAM,WAAW,CAAC;AAC7C,OAAO,EAAC,oBAAoB,EAAC,MAAM,wBAAwB,CAAC;AAC5D,OAAO,EAAC,UAAU,EAAE,oBAAoB,EAAE,OAAO,EAAsB,MAAM,uBAAuB,CAAC;AACrG,OAAO,EAAC,eAAe,EAAC,MAAM,4BAA4B,CAAC;AAC3D,OAAO,EAAC,qBAAqB,EAAC,MAAM,qDAAqD,CAAC;AAC1F,OAAO,EAAC,mBAAmB,EAAC,MAAM,8BAA8B,CAAC;AACjE,OAAO,EAAC,iCAAiC,EAAC,MAAM,6DAA6D,CAAC;AAE9G;;GAEG;AAEH,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAA7B;QAEY,kBAAa,GAAG,IAAI,QAAQ,EAAc,CAAC;QAclC,sCAAiC,GAAG,IAAI,OAAO,EAAwB,CAAC;QACxE,yBAAoB,GAAG,IAAI,oBAAoB,EAAE,CAAC;QAClD,6BAAwB,GAAG,IAAI,OAAO,EAAc,CAAC;QACrD,iBAAY,GAAG,IAAI,GAAG,EAAsB,CAAC;QAQtD,WAAM,GAAe,EAAE,CAAC;QAMxB,WAAM,GAAG,IAAI,QAAQ,EAAQ,CAAC;IAqc1C,CAAC;IA/cC,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAID,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;IACpC,CAAC;IAID,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAC7B,CAAC;IAED,IAAI,0BAA0B;QAC5B,OAAO,IAAI,CAAC,iCAAiC,CAAC,KAAK,CAAC;IACtD,CAAC;IAED,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC;IAC7C,CAAC;IAED,IAAI,KAAK;QACP,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;IAC3D,CAAC;IAED;;;OAGG;IACH,IAAI,MAAM;QACR,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;;;OAKG;IACH,mBAAmB,CAAC,GAAoB;QACtC,IAAI,CAAC,GAAG,EAAE;YACR,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,IAAI,EAAE;gBACR,OAAO,IAAI,CAAC,QAAQ,CAAC;aACtB;YACD,OAAO,SAAS,CAAC;SAClB;QACD,MAAM,QAAQ,GAAU,EAAE,CAAC;QAC3B,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;YACrC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9B,IAAI,OAAO,IAAI,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;gBAC3C,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACxB;SACF;QACD,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACnF,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO,CAAC,IAAiB;QAC7B,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAClD,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,KAAa,EAAE,WAAoB,EAAE,GAAG,UAAiB;QACzE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QACD,MAAM,KAAK,GAAG,IAAI,GAAG,EAAU,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACvG,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;YAC7B,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACnB,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACjB;SACF;QACD,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACrC,OAAO,EAAE,CAAC;SACX;QACD,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE;YAC/B,+DAA+D;YAC/D,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;YACpC,MAAM,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SACpC;QACD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAC1D,MAAM,OAAO,GAAG,aAAa,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QACrE,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACxD,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;QAC7B,OAAO,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,IAAI,CAAC,GAAmB;QAC5B,MAAM,QAAQ,GAAG,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC;QACzD,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;YAC5C,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SACzC;QACD,MAAM,aAAa,GAAkB,EAAC,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAC,CAAC;QACjE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,KAAK,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC,UAAU,CAAC,EAAE;gBAC/E,IAAI,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,EAAE,eAAe,CAAC,OAAO,CAAC,EAAE;oBAClE,SAAS;iBACV;gBACD,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACnD,mDAAmD;gBACnD,+DAA+D;gBAC/D,IAAI;aACL;SACF;QACD,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC;QACpE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,IAAI,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QACzG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,GAAQ,EAAE,OAAwB;QACrC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC5B,CAAC;IAGS,KAAK,CAAC,IAAI;QAClB,IAAI,CAAC,eAAe,GAAG,iCAAiC,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC;QAC/E,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAClD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAES,KAAK,CAAC,YAAY,CAAC,aAAmC;QAC9D,IAAI,IAAI,CAAC,UAAU,IAAI,aAAa;YAChC,IAAI,CAAC,UAAU,CAAC,QAAQ,KAAK,aAAa,CAAC,QAAQ;YACnD,IAAI,CAAC,UAAU,CAAC,KAAK,KAAK,aAAa,CAAC,KAAK;YAC7C,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI;YAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,EAAE;YAC/C,OAAO;SACR;QACD,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC;QAChC,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;YACrC,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBAC1B,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAC9D;YACD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC1C;aAAM;YACL,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;SACzB;QACD,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,CAAC;IAES,WAAW;QACnB,IAAI,KAAyB,CAAC;QAC9B,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACzC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW;gBAC5B,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,MAAM,EAAE,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,IAAI,UAAU,EAAE,CAAC,CAAC,EAAE;gBAClF,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;aAC5D;iBAAM;gBACL,KAAK,GAAG,WAAW,CAAC;aACrB;SACF;QACD,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;;;;;OASG;IACO,sBAAsB;QAC9B,OAAO,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACzC,CAAC;IAES,WAAW,CAAC,KAAc;QAClC,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC;QAClC,OAAO,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAC7C,CAAC;IAED,+CAA+C;IAC/C,mEAAmE;IACnE,IAAI;IAEM,KAAK,CAAC,wBAAwB;QAEtC,kFAAkF;QAClF,kEAAkE;QAClE,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,mBAAmB,EAAE,EAAE;YACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC;YAC1B,OAAO,SAAS,CAAC;SAClB;QAED,uEAAuE;QACvE,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACnC,2CAA2C;YAC3C,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YACnE,IAAI,aAAmC,CAAC;YACxC,IAAI;gBACF,aAAa,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;aAC9D;YAAC,WAAM;aACP;YACD,IAAI,aAAa,IAAI,CAAC,aAAa,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE;gBACvF,OAAO,CAAC,KAAK,CAAC,+BAA+B,YAAY,EAAE,CAAC,CAAC;gBAC7D,OAAO,SAAS,CAAC;aAClB;YACD,OAAO,YAAY,CAAC,QAAQ,EAAE,CAAC;SAChC;aAAM;YACL,oEAAoE;YACpE,6CAA6C;YAC7C,qDAAqD;SACtD;IACH,CAAC;IAES,KAAK,CAAC,kBAAkB,CAAC,aAAmC,EAAE,aAA4B;QAClG,IAAI,aAAa,EAAE;YACjB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,mBAAmB,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC;YAC7F,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,EAAC,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAC,CAAC,CAAC;YAC7F,MAAM,MAAM,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAC7D,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACzD;IACH,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,IAAc;QACtC,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxC,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACjC,OAAO;SACR;QACD,6CAA6C;QAC7C,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE;YACtD,SAAS,EAAE,IAAI;YACf,QAAQ;SACT,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,oBAAoB,CAClD,OAAO,EACP,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAC5D,CAAC,CAAC;IACL,CAAC;IAES,WAAW,CAAC,GAAW;QAC/B,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,sBAAsB,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;QAChF,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IACpE,CAAC;IAES,KAAK,CAAC,UAAU;QACxB,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACtE,KAAK,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE;YACxD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACtB,OAAO,CAAC,OAAO,EAAE,CAAC;aACnB;SACF;QACD,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;YAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACtB;IACH,CAAC;IAES,KAAK,CAAC,eAAe;QAC7B,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QACzB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAES,KAAK,CAAC,WAAW;QACzB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAC3C,IAAI,YAAY,GAAG,KAAK,CAAC;QACzB,IAAI,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACnE,YAAY,GAAG,IAAI,CAAC;SACrB;aAAM;YACL,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;gBAC9B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,EAAE;oBACjF,YAAY,GAAG,IAAI,CAAC;oBACpB,MAAM;iBACP;aACF;SACF;QACD,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,4BAA4B;YACrE,IAAI,CAAC,aAAa,GAAG,IAAI,QAAQ,EAAc,CAAC;YAChD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACjD;IACH,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,WAAW,CAAC,GAA6B;QACvD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,QAAQ,IAAI,QAAQ,CAAC,WAAW,EAAE;YACpC,OAAO,QAAQ,CAAC;SACjB;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAES,KAAK,CAAC,YAAY;QAC1B,MAAM,KAAK,GAAe,EAAE,CAAC;QAC7B,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE;gBAC/B,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAC1B;YAED,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAC5D,IAAI,aAAa,EAAE;gBACjB,KAAK,MAAM,EAAC,IAAI,EAAC,IAAI,aAAa,CAAC,OAAO,EAAE;oBAC1C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;oBAC3C,IAAI,KAAK,EAAE;wBACT,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACnB;yBAAM;wBACL,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;qBAChC;iBACF;aACF;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAES,KAAK,CAAC,wBAAwB;QACtC,IAAI,IAAI,CAAC,UAAU,IAAI,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;YAC9E,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE;gBAC/B,OAAO;oBACL,OAAO,EAAE,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAC,CAAC;iBACvD,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBAChD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBACnE,MAAM,eAAe,GAAG,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9D,MAAM,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;gBAChD,IAAI,IAAI,IAAI,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;oBAClC,OAAO,aAAa,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;iBACtD;gBACD,sKAAsK;aACvK;iBAAM;gBACL,sGAAsG;aACvG;SACF;IACH,CAAC;IAED;;OAEG;IACO,cAAc,CAAC,aAAqB;QAC5C,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;IAClD,CAAC;IAES,KAAK,CAAC,MAAM,CAAC,GAAQ,EAAE,OAAwB;QACvD,MAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC/B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;gBACpD,MAAM,OAAO,GAAG,+BAA+B,GAAG,EAAE,CAAC;gBACrD,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;aAC1B;YACD,+JAA+J;YAC/J,mHAAmH;YACnH,MAAM,IAAI,CAAC,KAAK,CAAC;YACjB,MAAM,EAAC,cAAc,EAAC,mBACpB,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IACzE,OAAO,CACX,CAAC;YACF,2DAA2D;YAC3D,IAAI,cAAc,EAAE;gBAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;aACxB;YACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC5B,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,EAAC,cAAc,EAAC,CAAC,CAAC;YACxC,OAAO;SACR;QACD,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;IAC1F,CAAC;IAES,oBAAoB,CAAC,OAAwB;QACrD,OAAO,OAAO,KAAK,SAAS,IAAI,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC;IAC3D,CAAC;IAES,YAAY;QACpB,kDAAkD;QAClD,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;YACjC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC/D;aAAM;YACL,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;SACzB;QAED,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC3B,CAAC;IAES,aAAa,CAAC,aAAqB;QAC3C,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC1C,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;IACnD,CAAC;IAES,UAAU,CAAC,GAAa,EAAE,OAAwB;QAC1D,MAAM,aAAa,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEnD,IAAI,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE;YACtC,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;aAAM;YACL,IAAI;gBACF,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;aACnC;YAAC,OAAO,KAAK,EAAE;gBACd,2FAA2F;gBAC3F,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;gBACtB,uEAAuE;aACxE;SACF;IACH,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,UAAU,CAAC,GAA6B;QACtD,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,SAAS,CAAC;SAClB;QACD,IAAI,MAAM,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC5B,IAAI;YACF,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACxB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aAC9B;YACD,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,CAAC;YACtD,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;SACtD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IAED;;;;OAIG;IACO,eAAe,CAAC,QAAkB;QAC1C,OAAO,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,MAAM,EAAE,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,UAAU,EAAE,CAAC;IACxG,CAAC;CACF,CAAA;AAleC;IADC,MAAM,CAAC,WAAW,CAAC;qDACwB;AAE5C;IADC,MAAM,CAAC,oBAAoB,CAAC;qDACe;AAE5C;IADC,MAAM,CAAC,aAAa,CAAC;uDAC0B;AAEhD;IADC,MAAM,CAAC,qBAAqB,CAAC;wDAC2B;AAEzD;IADC,MAAM,CAAC,wBAAwB,CAAC;wDAC2B;AAE5D;IADC,MAAM,CAAC,qBAAqB,CAAC;uDAC0B;AAsJxD;IADC,aAAa,EAAE;4CAOf;AA1KU,gBAAgB;IAD5B,UAAU,EAAE;GACA,gBAAgB,CAse5B;SAteY,gBAAgB;AAuf7B,MAAM,KAAW,aAAa,CA2D7B;AA3DD,WAAiB,aAAa;IAC5B,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IAE1D,8DAA8D;IAC9D,SAAgB,EAAE,CAAC,IAAS;QAC1B,OAAO,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAFe,gBAAE,KAEjB,CAAA;IAED,8DAA8D;IAC9D,SAAgB,kBAAkB,CAAC,OAA8B,EAAE,gBAAyC;QAC1G,IAAI,KAAK,GAAa,EAAE,CAAC;QACzB,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,IAAI,OAAO,OAAO,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;gBAClC,KAAK,GAAgB,OAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;aACzE;iBAAM;gBACL,KAAK,GAAa,OAAO,CAAC;aAC3B;SACF;QACD,MAAM,IAAI,GAAkB;YAC1B,OAAO,EAAE,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;SAC/C,CAAC;QACF,IAAI,gBAAgB,EAAE;YACpB,OAAO,gBAAgB,CAAC,OAAO,CAAC;YAChC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;SACvC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAjBe,gCAAkB,qBAiBjC,CAAA;IAED,SAAgB,mBAAmB,CAAC,IAAmB,EAAE,aAAwB;QAC/E,MAAM,UAAU,GAAa,EAAE,CAAC;QAChC,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAC5G,KAAK,MAAM,EAAC,IAAI,EAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YACjC,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YACnD,MAAM,GAAG,GAAG,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACxD,IAAI,GAAG,EAAE;gBACP,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;aACjC;iBAAM;gBACL,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;aACvC;SACF;QACD,OAAO,kBAAkB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IAbe,iCAAmB,sBAalC,CAAA;IAED,SAAgB,mBAAmB,CAAC,IAAmB,EAAE,aAAwB;QAC/E,IAAI,aAAa,EAAE;YACjB,MAAM,OAAO,GAAa,EAAE,CAAC;YAC7B,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBACjC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;gBACzB,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;oBAC/B,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACpB;qBAAM;oBACL,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;iBACzF;aAEF;YACD,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;SAC/D;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAfe,iCAAmB,sBAelC,CAAA;AACH,CAAC,EA3DgB,aAAa,KAAb,aAAa,QA2D7B","file":"../../src/browser/workspace-service.js","sourcesContent":["import {inject, injectable, postConstruct} from 'inversify';\r\nimport {PreferenceSchemaProvider, PreferenceScope, PreferenceServiceImpl, WindowService} from '@tart/core';\r\nimport {BaseStat, FileStat} from '@tart/filesystem/lib/common/files';\r\nimport {Deferred} from '@tart/core/lib/common/promise-util';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport * as jsoncparser from 'jsonc-parser';\r\nimport Ajv from 'ajv';\r\nimport {FileService} from '@tart/filesystem/lib/browser/file-service';\r\nimport {VSCODE_EXT, WM_EXT} from '../common';\r\nimport {WorkspacePreferences} from './workspace-preference';\r\nimport {Disposable, DisposableCollection, Emitter, Event, MaybePromise} from '@tart/core/lib/common';\r\nimport {workspaceSchema} from './workspace-schema-updater';\r\nimport {FileSystemPreferences} from '@tart/filesystem/lib/browser/filesystem-preferences';\r\nimport {DEFAULT_WINDOW_HASH} from '@tart/core/lib/common/window';\r\nimport {FrontendApplicationConfigProvider} from '@tart/core/lib/browser/frontend-application-config-provider';\r\n\r\n/**\r\n *  The workspace service\r\n */\r\n@injectable()\r\nexport class WorkspaceService {\r\n\r\n  protected deferredRoots = new Deferred<FileStat[]>();\r\n  @inject(FileService)\r\n  protected readonly fileService: FileService;\r\n  @inject(WorkspacePreferences)\r\n  protected preferences: WorkspacePreferences;\r\n  @inject(WindowService)\r\n  protected readonly windowService: WindowService;\r\n  @inject(PreferenceServiceImpl)\r\n  protected readonly preferenceImpl: PreferenceServiceImpl;\r\n  @inject(PreferenceSchemaProvider)\r\n  protected readonly schemaProvider: PreferenceSchemaProvider;\r\n  @inject(FileSystemPreferences)\r\n  protected readonly fsPreferences: FileSystemPreferences;\r\n  protected applicationName: string;\r\n  protected readonly onWorkspaceLocationChangedEmitter = new Emitter<FileStat | undefined>();\r\n  protected readonly toDisposeOnWorkspace = new DisposableCollection();\r\n  protected readonly onWorkspaceChangeEmitter = new Emitter<FileStat[]>();\r\n  protected readonly rootWatchers = new Map<string, Disposable>();\r\n\r\n  protected _workspace: FileStat | undefined;\r\n\r\n  get workspace(): FileStat | undefined {\r\n    return this._workspace;\r\n  }\r\n\r\n  protected _roots: FileStat[] = [];\r\n\r\n  get roots(): Promise<FileStat[]> {\r\n    return this.deferredRoots.promise;\r\n  }\r\n\r\n  protected _ready = new Deferred<void>();\r\n\r\n  get ready(): Promise<void> {\r\n    return this._ready.promise;\r\n  }\r\n\r\n  get onWorkspaceLocationChanged(): Event<FileStat | undefined> {\r\n    return this.onWorkspaceLocationChangedEmitter.event;\r\n  }\r\n\r\n  get onWorkspaceChanged(): Event<FileStat[]> {\r\n    return this.onWorkspaceChangeEmitter.event;\r\n  }\r\n\r\n  get saved(): boolean {\r\n    return !!this._workspace && !this._workspace.isDirectory;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if theia has an opened workspace or folder\r\n   * @returns {boolean}\r\n   */\r\n  get opened(): boolean {\r\n    return !!this._workspace;\r\n  }\r\n\r\n  tryGetRoots(): FileStat[] {\r\n    return this._roots;\r\n  }\r\n\r\n  /**\r\n   * Returns the workspace root uri that the given file belongs to.\r\n   * In case that the file is found in more than one workspace roots, returns the root that is closest to the file.\r\n   * If the file is not from the current workspace, returns `undefined`.\r\n   * @param uri URI of the file\r\n   */\r\n  getWorkspaceRootUri(uri: URI | undefined): URI | undefined {\r\n    if (!uri) {\r\n      const root = this.tryGetRoots()[0];\r\n      if (root) {\r\n        return root.resource;\r\n      }\r\n      return undefined;\r\n    }\r\n    const rootUris: URI[] = [];\r\n    for (const root of this.tryGetRoots()) {\r\n      const rootUri = root.resource;\r\n      if (rootUri && rootUri.isEqualOrParent(uri)) {\r\n        rootUris.push(rootUri);\r\n      }\r\n    }\r\n    return rootUris.sort((r1, r2) => r2.toString().length - r1.toString().length)[0];\r\n  }\r\n\r\n  /**\r\n   * Adds root folder(s) to the workspace\r\n   * @param uris URI or URIs of the root folder(s) to add\r\n   */\r\n  async addRoot(uris: URI[] | URI): Promise<void> {\r\n    const toAdd = Array.isArray(uris) ? uris : [uris];\r\n    await this.spliceRoots(this._roots.length, 0, ...toAdd);\r\n  }\r\n\r\n  async spliceRoots(start: number, deleteCount?: number, ...rootsToAdd: URI[]): Promise<URI[]> {\r\n    if (!this._workspace) {\r\n      throw new Error('There is not active workspace');\r\n    }\r\n    const dedup = new Set<string>();\r\n    const roots = this._roots.map(root => (dedup.add(root.resource.toString()), root.resource.toString()));\r\n    const toAdd: string[] = [];\r\n    for (const root of rootsToAdd) {\r\n      const uri = root.toString();\r\n      if (!dedup.has(uri)) {\r\n        dedup.add(uri);\r\n        toAdd.push(uri);\r\n      }\r\n    }\r\n    const toRemove = roots.splice(start, deleteCount || 0, ...toAdd);\r\n    if (!toRemove.length && !toAdd.length) {\r\n      return [];\r\n    }\r\n    if (this._workspace.isDirectory) {\r\n      // const untitledWorkspace = await this.getUntitledWorkspace();\r\n      const untitledWorkspace = new URI();\r\n      await this.save(untitledWorkspace);\r\n    }\r\n    const currentData = await this.getWorkspaceDataFromFile();\r\n    const newData = WorkspaceData.buildWorkspaceData(roots, currentData);\r\n    await this.writeWorkspaceFile(this._workspace, newData);\r\n    await this.updateWorkspace();\r\n    return toRemove.map(root => new URI(root));\r\n  }\r\n\r\n  /**\r\n   * Save workspace data into a file\r\n   * @param uri URI or FileStat of the workspace file\r\n   */\r\n  async save(uri: URI | FileStat): Promise<void> {\r\n    const resource = uri instanceof URI ? uri : uri.resource;\r\n    if (!await this.fileService.exists(resource)) {\r\n      await this.fileService.create(resource);\r\n    }\r\n    const workspaceData: WorkspaceData = {folders: [], settings: {}};\r\n    if (!this.saved) {\r\n      for (const p of Object.keys(this.schemaProvider.getCombinedSchema().properties)) {\r\n        if (this.schemaProvider.isValidInScope(p, PreferenceScope.Default)) {\r\n          continue;\r\n        }\r\n        const preferences = this.preferenceImpl.inspect(p);\r\n        // if (preferences && preferences.workspaceValue) {\r\n        //     workspaceData.settings![p] = preferences.workspaceValue;\r\n        // }\r\n      }\r\n    }\r\n    let stat = await this.toFileStat(resource);\r\n    Object.assign(workspaceData, await this.getWorkspaceDataFromFile());\r\n    console.log(stat);\r\n    stat = await this.writeWorkspaceFile(stat, WorkspaceData.buildWorkspaceData(this._roots, workspaceData));\r\n    console.log(stat);\r\n    await this.setWorkspace(stat);\r\n    this.onWorkspaceLocationChangedEmitter.fire(stat);\r\n  }\r\n\r\n  /**\r\n   * Opens directory, or recreates a workspace from the file that `uri` points to.\r\n   */\r\n  open(uri: URI, options?: WorkspaceInput): void {\r\n    this.doOpen(uri, options);\r\n  }\r\n\r\n  @postConstruct()\r\n  protected async init(): Promise<void> {\r\n    this.applicationName = FrontendApplicationConfigProvider.get().applicationName;\r\n    const wsUri = await this.getDefaultWorkspaceUri();\r\n    const wsStat = await this.toFileStat(wsUri);\r\n    await this.setWorkspace(wsStat);\r\n    this._ready.resolve();\r\n  }\r\n\r\n  protected async setWorkspace(workspaceStat: FileStat | undefined): Promise<void> {\r\n    if (this._workspace && workspaceStat &&\r\n        this._workspace.resource === workspaceStat.resource &&\r\n        this._workspace.mtime === workspaceStat.mtime &&\r\n        this._workspace.etag === workspaceStat.etag &&\r\n        this._workspace.size === workspaceStat.size) {\r\n      return;\r\n    }\r\n    this.toDisposeOnWorkspace.dispose();\r\n    this._workspace = workspaceStat;\r\n    if (this._workspace) {\r\n      const uri = this._workspace.resource;\r\n      if (this._workspace.isFile) {\r\n        this.toDisposeOnWorkspace.push(this.fileService.watch(uri));\r\n        this.onWorkspaceLocationChangedEmitter.fire(this._workspace);\r\n      }\r\n      this.setURLFragment(uri.path.toString());\r\n    } else {\r\n      this.setURLFragment('');\r\n    }\r\n    this.updateTitle();\r\n    await this.updateWorkspace();\r\n  }\r\n\r\n  protected updateTitle(): void {\r\n    let title: string | undefined;\r\n    if (this._workspace) {\r\n      const displayName = this._workspace.name;\r\n      if (!this._workspace.isDirectory &&\r\n          (displayName.endsWith(`.${WM_EXT}`) || displayName.endsWith(`.${VSCODE_EXT}`))) {\r\n        title = displayName.slice(0, displayName.lastIndexOf('.'));\r\n      } else {\r\n        title = displayName;\r\n      }\r\n    }\r\n    document.title = this.formatTitle(title);\r\n  }\r\n\r\n  /**\r\n   * Resolves to the default workspace URI as string.\r\n   *\r\n   * The default implementation tries to extract the default workspace location\r\n   * from the `window.location.hash`, then falls-back to the most recently\r\n   * used workspace root from the server.\r\n   *\r\n   * It is not ensured that the resolved workspace URI is valid, it can point\r\n   * to a non-existing location.\r\n   */\r\n  protected getDefaultWorkspaceUri(): MaybePromise<string | undefined> {\r\n    return this.doGetDefaultWorkspaceUri();\r\n  }\r\n\r\n  protected formatTitle(title?: string): string {\r\n    const name = this.applicationName;\r\n    return title ? `${title} — ${name}` : name;\r\n  }\r\n\r\n  // async getUntitledWorkspace(): Promise<URI> {\r\n  //     return getTemporaryWorkspaceFileUri(this.envVariableServer);\r\n  // }\r\n\r\n  protected async doGetDefaultWorkspaceUri(): Promise<string | undefined> {\r\n\r\n    // If an empty window is explicitly requested do not restore a previous workspace.\r\n    // Note: `window.location.hash` includes leading \"#\" if non-empty.\r\n    if (window.location.hash === `#${DEFAULT_WINDOW_HASH}`) {\r\n      window.location.hash = '';\r\n      return undefined;\r\n    }\r\n\r\n    // Prefer the workspace path specified as the URL fragment, if present.\r\n    if (window.location.hash.length > 1) {\r\n      // Remove the leading # and decode the URI.\r\n      const wpPath = decodeURI(window.location.hash.substring(1));\r\n      const workspaceUri = new URI().withPath(wpPath).withScheme('file');\r\n      let workspaceStat: FileStat | undefined;\r\n      try {\r\n        workspaceStat = await this.fileService.resolve(workspaceUri);\r\n      } catch {\r\n      }\r\n      if (workspaceStat && !workspaceStat.isDirectory && !this.isWorkspaceFile(workspaceStat)) {\r\n        console.error(`Not a valid workspace file: ${workspaceUri}`);\r\n        return undefined;\r\n      }\r\n      return workspaceUri.toString();\r\n    } else {\r\n      // Else, ask the server for its suggested workspace (usually the one\r\n      // specified on the CLI, or the most recent).\r\n      // return this.server.getMostRecentlyUsedWorkspace();\r\n    }\r\n  }\r\n\r\n  protected async writeWorkspaceFile(workspaceFile: FileStat | undefined, workspaceData: WorkspaceData): Promise<FileStat | undefined> {\r\n    if (workspaceFile) {\r\n      const data = JSON.stringify(WorkspaceData.transformToRelative(workspaceData, workspaceFile));\r\n      const edits = jsoncparser.format(data, undefined, {tabSize: 3, insertSpaces: true, eol: ''});\r\n      const result = jsoncparser.applyEdits(data, edits);\r\n      await this.fileService.write(workspaceFile.resource, result);\r\n      return this.fileService.resolve(workspaceFile.resource);\r\n    }\r\n  }\r\n\r\n  protected async watchRoot(root: FileStat): Promise<void> {\r\n    const uriStr = root.resource.toString();\r\n    if (this.rootWatchers.has(uriStr)) {\r\n      return;\r\n    }\r\n    // const excludes = this.getExcludes(uriStr);\r\n    const excludes = [];\r\n    const watcher = this.fileService.watch(new URI(uriStr), {\r\n      recursive: true,\r\n      excludes\r\n    });\r\n    this.rootWatchers.set(uriStr, new DisposableCollection(\r\n        watcher,\r\n        Disposable.create(() => this.rootWatchers.delete(uriStr))\r\n    ));\r\n  }\r\n\r\n  protected getExcludes(uri: string): string[] {\r\n    const patterns = this.fsPreferences.get('files.watcherExclude', undefined, uri);\r\n    return Object.keys(patterns).filter(pattern => patterns[pattern]);\r\n  }\r\n\r\n  protected async watchRoots(): Promise<void> {\r\n    const rootUris = new Set(this._roots.map(r => r.resource.toString()));\r\n    for (const [uri, watcher] of this.rootWatchers.entries()) {\r\n      if (!rootUris.has(uri)) {\r\n        watcher.dispose();\r\n      }\r\n    }\r\n    for (const root of this._roots) {\r\n      this.watchRoot(root);\r\n    }\r\n  }\r\n\r\n  protected async updateWorkspace(): Promise<void> {\r\n    await this.updateRoots();\r\n    this.watchRoots();\r\n  }\r\n\r\n  protected async updateRoots(): Promise<void> {\r\n    const newRoots = await this.computeRoots();\r\n    let rootsChanged = false;\r\n    if (newRoots.length !== this._roots.length || newRoots.length === 0) {\r\n      rootsChanged = true;\r\n    } else {\r\n      for (const newRoot of newRoots) {\r\n        if (!this._roots.some(r => r.resource.toString() === newRoot.resource.toString())) {\r\n          rootsChanged = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (rootsChanged) {\r\n      this._roots = newRoots;\r\n      this.deferredRoots.resolve(this._roots); // in order to resolve first\r\n      this.deferredRoots = new Deferred<FileStat[]>();\r\n      this.deferredRoots.resolve(this._roots);\r\n      this.onWorkspaceChangeEmitter.fire(this._roots);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * returns a FileStat if the argument URI points to an existing directory. Otherwise, `undefined`.\r\n   */\r\n  protected async toValidRoot(uri: URI | string | undefined): Promise<FileStat | undefined> {\r\n    const fileStat = await this.toFileStat(uri);\r\n    if (fileStat && fileStat.isDirectory) {\r\n      return fileStat;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  protected async computeRoots(): Promise<FileStat[]> {\r\n    const roots: FileStat[] = [];\r\n    if (this._workspace) {\r\n      if (this._workspace.isDirectory) {\r\n        return [this._workspace];\r\n      }\r\n\r\n      const workspaceData = await this.getWorkspaceDataFromFile();\r\n      if (workspaceData) {\r\n        for (const {path} of workspaceData.folders) {\r\n          const valid = await this.toValidRoot(path);\r\n          if (valid) {\r\n            roots.push(valid);\r\n          } else {\r\n            roots.push(FileStat.dir(path));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return roots;\r\n  }\r\n\r\n  protected async getWorkspaceDataFromFile(): Promise<WorkspaceData | undefined> {\r\n    if (this._workspace && await this.fileService.exists(this._workspace.resource)) {\r\n      if (this._workspace.isDirectory) {\r\n        return {\r\n          folders: [{path: this._workspace.resource.toString()}]\r\n        };\r\n      } else if (this.isWorkspaceFile(this._workspace)) {\r\n        const stat = await this.fileService.read(this._workspace.resource);\r\n        const strippedContent = jsoncparser.stripComments(stat.value);\r\n        const data = jsoncparser.parse(strippedContent);\r\n        if (data && WorkspaceData.is(data)) {\r\n          return WorkspaceData.transformToAbsolute(data, stat);\r\n        }\r\n        // this.logger.error(`Unable to retrieve workspace data from the file: '${this.labelProvider.getLongName(this._workspace)}'. Please check if the file is corrupted.`);\r\n      } else {\r\n        // this.logger.warn(`Not a valid workspace file: ${this.labelProvider.getLongName(this._workspace)}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the URL fragment to the given workspace path.\r\n   */\r\n  protected setURLFragment(workspacePath: string): void {\r\n    window.location.hash = encodeURI(workspacePath);\r\n  }\r\n\r\n  protected async doOpen(uri: URI, options?: WorkspaceInput): Promise<void> {\r\n    const rootUri = uri.toString();\r\n    const stat = await this.toFileStat(rootUri);\r\n    if (stat) {\r\n      if (!stat.isDirectory && !this.isWorkspaceFile(stat)) {\r\n        const message = `Not a valid workspace file: ${uri}`;\r\n        throw new Error(message);\r\n      }\r\n      // The same window has to be preserved too (instead of opening a new one), if the workspace root is not yet available and we are setting it for the first time.\r\n      // Option passed as parameter has the highest priority (for api developers), then the preference, then the default.\r\n      await this.roots;\r\n      const {preserveWindow} = {\r\n        preserveWindow: this.preferences['workspace.preserveWindow'] || !this.opened,\r\n        ...options\r\n      };\r\n      // await this.server.setMostRecentlyUsedWorkspace(rootUri);\r\n      if (preserveWindow) {\r\n        this._workspace = stat;\r\n      }\r\n      console.log(stat);\r\n      console.log(preserveWindow);\r\n      this.openWindow(stat, {preserveWindow});\r\n      return;\r\n    }\r\n    throw new Error('Invalid workspace root URI. Expected an existing directory location.');\r\n  }\r\n\r\n  protected shouldPreserveWindow(options?: WorkspaceInput): boolean {\r\n    return options !== undefined && !!options.preserveWindow;\r\n  }\r\n\r\n  protected reloadWindow(): void {\r\n    // Set the new workspace path as the URL fragment.\r\n    if (this._workspace !== undefined) {\r\n      this.setURLFragment(this._workspace.resource.path.toString());\r\n    } else {\r\n      this.setURLFragment('');\r\n    }\r\n\r\n    window.location.reload();\r\n  }\r\n\r\n  protected openNewWindow(workspacePath: string): void {\r\n    const url = new URL(window.location.href);\r\n    url.hash = encodeURI(workspacePath);\r\n    this.windowService.openNewWindow(url.toString());\r\n  }\r\n\r\n  protected openWindow(uri: FileStat, options?: WorkspaceInput): void {\r\n    const workspacePath = uri.resource.path.toString();\r\n\r\n    if (this.shouldPreserveWindow(options)) {\r\n      this.reloadWindow();\r\n    } else {\r\n      try {\r\n        this.openNewWindow(workspacePath);\r\n      } catch (error) {\r\n        // Fall back to reloading the current window in case the browser has blocked the new window\r\n        this._workspace = uri;\r\n        // this.logger.error(error.toString()).then(() => this.reloadWindow());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * returns a FileStat if the argument URI points to a file or directory. Otherwise, `undefined`.\r\n   */\r\n  protected async toFileStat(uri: URI | string | undefined): Promise<FileStat | undefined> {\r\n    if (!uri) {\r\n      return undefined;\r\n    }\r\n    let uriStr = uri.toString();\r\n    try {\r\n      if (uriStr.endsWith('/')) {\r\n        uriStr = uriStr.slice(0, -1);\r\n      }\r\n      const normalizedUri = new URI(uriStr).normalizePath();\r\n      return await this.fileService.resolve(normalizedUri);\r\n    } catch (error) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the file should be considered as a workspace file.\r\n   *\r\n   * Example: We should not try to read the contents of an .exe file.\r\n   */\r\n  protected isWorkspaceFile(fileStat: FileStat): boolean {\r\n    return fileStat.resource.path.ext === `.${WM_EXT}` || fileStat.resource.path.ext === `.${VSCODE_EXT}`;\r\n  }\r\n}\r\n\r\nexport interface WorkspaceInput {\r\n\r\n  /**\r\n   * Tests whether the same window should be used or a new one has to be opened after setting the workspace root. By default it is `false`.\r\n   */\r\n  preserveWindow?: boolean;\r\n}\r\n\r\nexport interface WorkspaceData {\r\n  folders: Array<{ path: string, name?: string }>;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  [key: string]: { [id: string]: any };\r\n}\r\n\r\nexport namespace WorkspaceData {\r\n  const validateSchema = new Ajv().compile(workspaceSchema);\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  export function is(data: any): data is WorkspaceData {\r\n    return !!validateSchema(data);\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  export function buildWorkspaceData(folders: string[] | FileStat[], additionalFields?: Partial<WorkspaceData>): WorkspaceData {\r\n    let roots: string[] = [];\r\n    if (folders.length > 0) {\r\n      if (typeof folders[0] !== 'string') {\r\n        roots = (<FileStat[]>folders).map(folder => folder.resource.toString());\r\n      } else {\r\n        roots = <string[]>folders;\r\n      }\r\n    }\r\n    const data: WorkspaceData = {\r\n      folders: roots.map(folder => ({path: folder}))\r\n    };\r\n    if (additionalFields) {\r\n      delete additionalFields.folders;\r\n      Object.assign(data, additionalFields);\r\n    }\r\n    return data;\r\n  }\r\n\r\n  export function transformToRelative(data: WorkspaceData, workspaceFile?: FileStat): WorkspaceData {\r\n    const folderUris: string[] = [];\r\n    const workspaceFileUri = new URI(workspaceFile ? workspaceFile.resource.toString() : '').withScheme('file');\r\n    for (const {path} of data.folders) {\r\n      const folderUri = new URI(path).withScheme('file');\r\n      const rel = workspaceFileUri.parent.relative(folderUri);\r\n      if (rel) {\r\n        folderUris.push(rel.toString());\r\n      } else {\r\n        folderUris.push(folderUri.toString());\r\n      }\r\n    }\r\n    return buildWorkspaceData(folderUris, data);\r\n  }\r\n\r\n  export function transformToAbsolute(data: WorkspaceData, workspaceFile?: BaseStat): WorkspaceData {\r\n    if (workspaceFile) {\r\n      const folders: string[] = [];\r\n      for (const folder of data.folders) {\r\n        const path = folder.path;\r\n        if (path.startsWith('file:///')) {\r\n          folders.push(path);\r\n        } else {\r\n          folders.push(workspaceFile.resource.withScheme('file').parent.resolve(path).toString());\r\n        }\r\n\r\n      }\r\n      return Object.assign(data, buildWorkspaceData(folders, data));\r\n    }\r\n    return data;\r\n  }\r\n}\r\n"]}