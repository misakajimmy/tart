{"version":3,"sources":["browser/workspace-uri-contribution.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,EAAC,mCAAmC,EAAE,gBAAgB,EAAC,MAAM,wBAAwB,CAAC;AAC7F,OAAO,EAAC,QAAQ,EAAC,MAAM,mCAAmC,CAAC;AAG3D,qBACa,qCAAsC,SAAQ,mCAAmC;IAGtF,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC;IAI3B,SAAS,CAAC,OAAO,EAAE,MAAM,GAAG,MAAM;IAOlC,OAAO,CAAC,OAAO,EAAE,GAAG,GAAG,gBAAgB,GAAG,QAAQ,GAAG,MAAM;IAI3D,OAAO,CAAC,OAAO,EAAE,GAAG,GAAG,gBAAgB,GAAG,QAAQ,GAAG,MAAM,GAAG,SAAS;IAIvE;;OAEG;IACH,WAAW,CAAC,OAAO,EAAE,GAAG,GAAG,gBAAgB,GAAG,QAAQ,GAAG,MAAM,GAAG,SAAS;IAa3E,SAAS,CAAC,kBAAkB,CAAC,OAAO,EAAE,GAAG,GAAG,gBAAgB,GAAG,QAAQ,GAAG,GAAG,GAAG,gBAAgB;IAWhG,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,GAAG,gBAAgB,GAAG,QAAQ,GAAG,GAAG,GAAG,SAAS;CAM9E","file":"../../src/browser/workspace-uri-contribution.d.ts","sourcesContent":["import URI from '@tart/core/lib/common/uri';\r\nimport {DefaultUriLabelProviderContribution, URIIconReference} from '@tart/core/lib/browser';\r\nimport {FileStat} from '@tart/filesystem/lib/common/files';\r\nimport {injectable, postConstruct} from 'inversify';\r\n\r\n@injectable()\r\nexport class WorkspaceUriLabelProviderContribution extends DefaultUriLabelProviderContribution {\r\n\r\n  @postConstruct()\r\n  async init(): Promise<void> {\r\n    // no-op, backward compatibility\r\n  }\r\n\r\n  canHandle(element: object): number {\r\n    if ((element instanceof URI && element.scheme === 'file' || URIIconReference.is(element) || FileStat.is(element))) {\r\n      return 10;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  getIcon(element: URI | URIIconReference | FileStat): string {\r\n    return super.getIcon(this.asURIIconReference(element));\r\n  }\r\n\r\n  getName(element: URI | URIIconReference | FileStat): string | undefined {\r\n    return super.getName(this.asURIIconReference(element));\r\n  }\r\n\r\n  /**\r\n   * trims the workspace root from a file uri, if it is a child.\r\n   */\r\n  getLongName(element: URI | URIIconReference | FileStat): string | undefined {\r\n    const uri = this.getUri(element);\r\n    if (uri) {\r\n      const formatting = this.findFormatting(uri);\r\n      if (formatting) {\r\n        return this.formatUri(uri, formatting);\r\n      }\r\n    }\r\n    // const relativePath = uri && this.workspaceVariable.getWorkspaceRelativePath(uri);\r\n    const relativePath = uri;\r\n    return super.getLongName(this.asURIIconReference(element));\r\n  }\r\n\r\n  protected asURIIconReference(element: URI | URIIconReference | FileStat): URI | URIIconReference {\r\n    if (FileStat.is(element)) {\r\n      return URIIconReference.create(element.isDirectory ? 'folder' : 'file', element.resource);\r\n    }\r\n    const uri = this.getUri(element);\r\n    // if (uri && this.workspaceVariable.getWorkspaceRootUri(uri)?.isEqual(uri)) {\r\n    //     return URIIconReference.create('folder', uri);\r\n    // }\r\n    return element;\r\n  }\r\n\r\n  protected getUri(element: URI | URIIconReference | FileStat): URI | undefined {\r\n    if (FileStat.is(element)) {\r\n      return element.resource;\r\n    }\r\n    return super.getUri(element);\r\n  }\r\n}\r\n"]}