{"version":3,"sources":["browser/workspace-delete-handler.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,iBAAiB,EAAC,MAAM,2CAA2C,CAAC;AAC5E,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,EAAC,WAAW,EAAC,MAAM,2CAA2C,CAAC;AACtE,OAAO,EAAC,gBAAgB,EAAmD,MAAM,YAAY,CAAC;AAC9F,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAC,qBAAqB,EAAC,MAAM,qDAAqD,CAAC;AAC1F,OAAO,EAAC,iBAAiB,EAAiC,MAAM,mCAAmC,CAAC;AACpG,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AAEjD,qBACa,sBAAuB,YAAW,iBAAiB,CAAC,GAAG,EAAE,CAAC;IAGrE,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC;IAG5C,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,gBAAgB,CAAC;IAG3C,SAAS,CAAC,QAAQ,CAAC,cAAc,EAAE,cAAc,CAAC;IAGlD,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;IAGtD,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,qBAAqB,CAAC;IAExD;;;;;OAKG;IACH,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO;IAI/B;;;;;OAKG;IACH,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO;IAI/B;;;;OAIG;IACG,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAWzC;;;;OAIG;IACH,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAiB,GAAG,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC;IAaxF;;;;OAIG;IACH,SAAS,CAAC,iBAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,GAAG,WAAW;IA2B9D;;;;;OAKG;IACH,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE;IAStC;;;;OAIG;cACa,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,iBAAiB,GAAG,OAAO,CAAC,IAAI,CAAC;IAW3E;;;;OAIG;cACa,kBAAkB,CAAC,GAAG,EAAE,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC;CAS5D","file":"../../src/browser/workspace-delete-handler.d.ts","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport {UriCommandHandler} from '@tart/core/lib/common/uri-command-handler';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {FileService} from '@tart/filesystem/lib/browser/file-service';\r\nimport {ApplicationShell, ConfirmDialog, NavigatableWidget, SaveableWidget} from '@tart/core';\r\nimport {WorkspaceService} from './workspace-service';\r\nimport {FileSystemPreferences} from '@tart/filesystem/lib/browser/filesystem-preferences';\r\nimport {FileDeleteOptions, FileSystemProviderCapabilities} from '@tart/filesystem/lib/common/files';\r\nimport {WorkspaceUtils} from './workspace-utils';\r\n\r\n@injectable()\r\nexport class WorkspaceDeleteHandler implements UriCommandHandler<URI[]> {\r\n\r\n  @inject(FileService)\r\n  protected readonly fileService: FileService;\r\n\r\n  @inject(ApplicationShell)\r\n  protected readonly shell: ApplicationShell;\r\n\r\n  @inject(WorkspaceUtils)\r\n  protected readonly workspaceUtils: WorkspaceUtils;\r\n\r\n  @inject(WorkspaceService)\r\n  protected readonly workspaceService: WorkspaceService;\r\n\r\n  @inject(FileSystemPreferences)\r\n  protected readonly fsPreferences: FileSystemPreferences;\r\n\r\n  /**\r\n   * Determine if the command is visible.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   * @returns `true` if the command is visible.\r\n   */\r\n  isVisible(uris: URI[]): boolean {\r\n    return !!uris.length && !this.workspaceUtils.containsRootDirectory(uris);\r\n  }\r\n\r\n  /**\r\n   * Determine if the command is enabled.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   * @returns `true` if the command is enabled.\r\n   */\r\n  isEnabled(uris: URI[]): boolean {\r\n    return !!uris.length && !this.workspaceUtils.containsRootDirectory(uris);\r\n  }\r\n\r\n  /**\r\n   * Execute the command.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   */\r\n  async execute(uris: URI[]): Promise<void> {\r\n    const distinctUris = URI.getDistinctParents(uris);\r\n    const resolved: FileDeleteOptions = {\r\n      recursive: true,\r\n      useTrash: this.fsPreferences['files.enableTrash'] && distinctUris[0] && this.fileService.hasCapability(distinctUris[0], FileSystemProviderCapabilities.Trash)\r\n    };\r\n    if (await this.confirm(distinctUris, resolved)) {\r\n      await Promise.all(distinctUris.map(uri => this.delete(uri, resolved)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display dialog to confirm deletion.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   */\r\n  protected confirm(uris: URI[], options: FileDeleteOptions): Promise<boolean | undefined> {\r\n    let title = `File${uris.length === 1 ? '' : 's'}`;\r\n    if (options.useTrash) {\r\n      title = 'Move ' + title + ' to Trash';\r\n    } else {\r\n      title = 'Delete ' + title;\r\n    }\r\n    return new ConfirmDialog({\r\n      title,\r\n      msg: this.getConfirmMessage(uris)\r\n    }).open();\r\n  }\r\n\r\n  /**\r\n   * Get the dialog confirmation message for deletion.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   */\r\n  protected getConfirmMessage(uris: URI[]): string | HTMLElement {\r\n    const dirty = this.getDirty(uris);\r\n    if (dirty.length) {\r\n      if (dirty.length === 1) {\r\n        return `Do you really want to delete ${dirty[0].path.base} with unsaved changes?`;\r\n      }\r\n      return `Do you really want to delete ${dirty.length} files with unsaved changes?`;\r\n    }\r\n    if (uris.length === 1) {\r\n      return `Do you really want to delete ${uris[0].path.base}?`;\r\n    }\r\n    if (uris.length > 10) {\r\n      return `Do you really want to delete all the ${uris.length} selected files?`;\r\n    }\r\n    const messageContainer = document.createElement('div');\r\n    messageContainer.textContent = 'Do you really want to delete the following files?';\r\n    const list = document.createElement('ul');\r\n    list.style.listStyleType = 'none';\r\n    for (const uri of uris) {\r\n      const listItem = document.createElement('li');\r\n      listItem.textContent = uri.path.base;\r\n      list.appendChild(listItem);\r\n    }\r\n    messageContainer.appendChild(list);\r\n    return messageContainer;\r\n  }\r\n\r\n  /**\r\n   * Get which URI are presently dirty.\r\n   *\r\n   * @param uris URIs of selected resources.\r\n   * @returns An array of dirty URI.\r\n   */\r\n  protected getDirty(uris: URI[]): URI[] {\r\n    const dirty = new Map<string, URI>();\r\n    const widgets = NavigatableWidget.getAffected(SaveableWidget.getDirty(this.shell.widgets), uris);\r\n    for (const [resourceUri] of widgets) {\r\n      dirty.set(resourceUri.toString(), resourceUri);\r\n    }\r\n    return [...dirty.values()];\r\n  }\r\n\r\n  /**\r\n   * Perform deletion of a given URI.\r\n   *\r\n   * @param uri URI of selected resource.\r\n   */\r\n  protected async delete(uri: URI, options: FileDeleteOptions): Promise<void> {\r\n    try {\r\n      await Promise.all([\r\n        this.closeWithoutSaving(uri),\r\n        this.fileService.delete(uri, options)\r\n      ]);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close widget without saving changes.\r\n   *\r\n   * @param uri URI of a selected resource.\r\n   */\r\n  protected async closeWithoutSaving(uri: URI): Promise<void> {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const pending: Promise<any>[] = [];\r\n    for (const [, widget] of NavigatableWidget.getAffected(this.shell.widgets, uri)) {\r\n      pending.push(this.shell.closeWidget(widget.id, {save: false}));\r\n    }\r\n    await Promise.all(pending);\r\n  }\r\n\r\n}\r\n"]}