{"version":3,"sources":["browser/workspace-utils.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAE5C,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AAErD,qBACa,cAAc;IAGzB,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;IAEtD;;;;OAIG;IACH,qBAAqB,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO;CAM5C","file":"../../src/browser/workspace-utils.d.ts","sourcesContent":["/**\r\n * Collection of workspace utility functions\r\n * @class\r\n */\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {inject, injectable} from 'inversify';\r\nimport {WorkspaceService} from './workspace-service';\r\n\r\n@injectable()\r\nexport class WorkspaceUtils {\r\n\r\n  @inject(WorkspaceService)\r\n  protected readonly workspaceService: WorkspaceService;\r\n\r\n  /**\r\n   * Determine if root directory exists\r\n   * for a given array of URIs\r\n   * @param uris\r\n   */\r\n  containsRootDirectory(uris: URI[]): boolean {\r\n    // obtain all roots URIs for a given workspace\r\n    const rootUris = this.workspaceService.tryGetRoots().map(root => root.resource);\r\n    // return true if at least a single URI is a root directory\r\n    return rootUris.some(rootUri => uris.some(uri => uri.isEqualOrParent(rootUri)));\r\n  }\r\n}\r\n"]}