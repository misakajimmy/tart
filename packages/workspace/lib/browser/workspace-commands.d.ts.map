{"version":3,"sources":["browser/workspace-commands.ts"],"names":[],"mappings":"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","file":"../../src/browser/workspace-commands.d.ts","sourcesContent":["import {\r\n  CommonCommands,\r\n  CommonMenus,\r\n  LabelProvider,\r\n  open,\r\n  OpenerService,\r\n  OpenHandler,\r\n  SingleTextInputDialog\r\n} from '@tart/core';\r\nimport {\r\n  Command,\r\n  CommandContribution,\r\n  CommandRegistry,\r\n  Emitter,\r\n  Event,\r\n  MenuContribution,\r\n  MenuModelRegistry,\r\n  SelectionService,\r\n} from '@tart/core/lib/common';\r\nimport {nls} from '@tart/core/lib/common/nls';\r\nimport {inject, injectable, postConstruct} from 'inversify';\r\nimport {WorkspacePreferences} from './workspace-preference';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {FileService} from '@tart/filesystem/lib/browser/file-service';\r\nimport {WorkspaceService} from './workspace-service';\r\nimport {UriAwareCommandHandler, UriCommandHandler} from '@tart/core/lib/common/uri-command-handler';\r\nimport {FileStat} from '@tart/filesystem/lib/common/files';\r\nimport {FileSystemUtils} from '@tart/filesystem/lib/browser/file-tree/filesystem-utils';\r\nimport {WorkspaceInputDialog} from './workspace-input-dialog';\r\nimport * as validFilename from 'valid-filename';\r\nimport {FileSystemCommands} from '@tart/filesystem';\r\nimport {WorkspaceDeleteHandler} from './workspace-delete-handler';\r\nimport {FileDownloadCommands} from '@tart/filesystem/lib/browser/download/file-download-command-contribution';\r\n\r\nexport namespace WorkspaceCommands {\r\n\r\n  const WORKSPACE_CATEGORY = 'Workspaces';\r\n  const FILE_CATEGORY = CommonCommands.FILE_CATEGORY;\r\n\r\n  // On Linux and Windows, both files and folders cannot be opened at the same time in electron.\r\n  // `OPEN_FILE` and `OPEN_FOLDER` must be available only on Linux and Windows in electron.\r\n  // `OPEN` must *not* be available on Windows and Linux in electron.\r\n  // VS Code does the same. See: https://github.com/eclipse-theia/theia/pull/3202#issuecomment-430585357\r\n  export const OPEN: Command & { dialogLabel: string } = {\r\n    ...Command.toDefaultLocalizedCommand({\r\n      id: 'workspace:open',\r\n      category: CommonCommands.FILE_CATEGORY,\r\n      label: 'Open...'\r\n    }),\r\n    dialogLabel: nls.localizeByDefault('Open')\r\n  };\r\n  // No `label`. Otherwise, it shows up in the `Command Palette`.\r\n  export const OPEN_FILE: Command & { dialogLabel: string } = {\r\n    id: 'workspace:openFile',\r\n    originalCategory: FILE_CATEGORY,\r\n    category: nls.localizeByDefault(CommonCommands.FILE_CATEGORY),\r\n    dialogLabel: 'Open File'\r\n  };\r\n  export const OPEN_FOLDER: Command & { dialogLabel: string } = {\r\n    id: 'workspace:openFolder',\r\n    dialogLabel: nls.localizeByDefault('Open Folder') // No `label`. Otherwise, it shows up in the `Command Palette`.\r\n  };\r\n  export const OPEN_WORKSPACE: Command & { dialogLabel: string } = {\r\n    ...Command.toDefaultLocalizedCommand({\r\n      id: 'workspace:openWorkspace',\r\n      category: CommonCommands.FILE_CATEGORY,\r\n      label: nls.localizeByDefault('Open Workspace'),\r\n    }),\r\n    dialogLabel: nls.localizeByDefault('Open Workspace')\r\n  };\r\n  export const OPEN_RECENT_WORKSPACE = Command.toLocalizedCommand({\r\n    id: 'workspace:openRecent',\r\n    category: FILE_CATEGORY,\r\n    label: 'Open Recent Workspace...'\r\n  }, 'theia/workspace/openRecentWorkspace', CommonCommands.FILE_CATEGORY_KEY);\r\n  export const CLOSE = Command.toDefaultLocalizedCommand({\r\n    id: 'workspace:close',\r\n    category: WORKSPACE_CATEGORY,\r\n    label: 'Close Workspace'\r\n  });\r\n  export const NEW_FILE = Command.toDefaultLocalizedCommand({\r\n    id: 'file.newFile',\r\n    category: FILE_CATEGORY,\r\n    label: 'New File'\r\n  });\r\n  export const NEW_PYTHON_FILE = Command.toDefaultLocalizedCommand({\r\n    id: 'file.newPythonFile',\r\n    category: FILE_CATEGORY,\r\n    label: '新建 Python 文件'\r\n  });\r\n  export const NEW_BLOCKLY_FILE = Command.toDefaultLocalizedCommand({\r\n    id: 'file.newBlocklyFile',\r\n    category: FILE_CATEGORY,\r\n    label: '新建 Blockly 文件'\r\n  });\r\n  export const NEW_FOLDER = Command.toDefaultLocalizedCommand({\r\n    id: 'file.newFolder',\r\n    category: FILE_CATEGORY,\r\n    label: 'New Folder'\r\n  });\r\n  export const FILE_OPEN_WITH = (opener: OpenHandler): Command => ({\r\n    id: `file.openWith.${opener.id}`\r\n  });\r\n  export const FILE_RENAME = Command.toDefaultLocalizedCommand({\r\n    id: 'file.rename',\r\n    category: FILE_CATEGORY,\r\n    label: 'Rename'\r\n  });\r\n  export const FILE_DELETE = Command.toDefaultLocalizedCommand({\r\n    id: 'file.delete',\r\n    category: FILE_CATEGORY,\r\n    label: 'Delete'\r\n  });\r\n  export const FILE_DUPLICATE = Command.toLocalizedCommand({\r\n    id: 'file.duplicate',\r\n    category: FILE_CATEGORY,\r\n    label: 'Duplicate'\r\n  }, 'theia/workspace/duplicate', CommonCommands.FILE_CATEGORY_KEY);\r\n  export const FILE_COMPARE = Command.toLocalizedCommand({\r\n    id: 'file.compare',\r\n    category: FILE_CATEGORY,\r\n    label: 'Compare with Each Other'\r\n  }, 'theia/workspace/compareWithEachOther', CommonCommands.FILE_CATEGORY_KEY);\r\n  export const ADD_FOLDER = Command.toDefaultLocalizedCommand({\r\n    id: 'workspace:addFolder',\r\n    category: WORKSPACE_CATEGORY,\r\n    label: 'Add Folder to Workspace...'\r\n  });\r\n  export const REMOVE_FOLDER = Command.toDefaultLocalizedCommand({\r\n    id: 'workspace:removeFolder',\r\n    category: WORKSPACE_CATEGORY,\r\n    label: 'Remove Folder from Workspace'\r\n  });\r\n  export const SAVE_WORKSPACE_AS = Command.toDefaultLocalizedCommand({\r\n    id: 'workspace:saveAs',\r\n    category: WORKSPACE_CATEGORY,\r\n    label: 'Save Workspace As...'\r\n  });\r\n  export const OPEN_WORKSPACE_FILE = Command.toDefaultLocalizedCommand({\r\n    id: 'workspace:openConfigFile',\r\n    category: WORKSPACE_CATEGORY,\r\n    label: 'Open Workspace Configuration File'\r\n  });\r\n  export const SAVE_AS = Command.toDefaultLocalizedCommand({\r\n    id: 'file.saveAs',\r\n    category: CommonCommands.FILE_CATEGORY,\r\n    label: 'Save As...',\r\n  });\r\n}\r\n\r\nexport interface DidCreateNewResourceEvent {\r\n  uri: URI\r\n  parent: URI\r\n}\r\n\r\n\r\n@injectable()\r\nexport class WorkspaceCommandContribution implements CommandContribution {\r\n\r\n  @inject(LabelProvider) protected readonly labelProvider: LabelProvider;\r\n  @inject(FileService) protected readonly fileService: FileService;\r\n  @inject(OpenerService) protected readonly openerService: OpenerService;\r\n  @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService;\r\n  @inject(SelectionService) protected readonly selectionService: SelectionService;\r\n  @inject(WorkspaceDeleteHandler) protected readonly deleteHandler: WorkspaceDeleteHandler;\r\n  @inject(WorkspacePreferences) protected readonly preferences: WorkspacePreferences;\r\n  private readonly onDidCreateNewFileEmitter = new Emitter<DidCreateNewResourceEvent>();\r\n  private readonly onDidCreateNewFolderEmitter = new Emitter<DidCreateNewResourceEvent>();\r\n\r\n  get onDidCreateNewFile(): Event<DidCreateNewResourceEvent> {\r\n    return this.onDidCreateNewFileEmitter.event;\r\n  }\r\n\r\n  get onDidCreateNewFolder(): Event<DidCreateNewResourceEvent> {\r\n    return this.onDidCreateNewFolderEmitter.event;\r\n  }\r\n\r\n  @postConstruct()\r\n  init(): void {\r\n  }\r\n\r\n  registerCommands(commands: CommandRegistry) {\r\n    commands.registerCommand(WorkspaceCommands.NEW_FILE, this.newWorkspaceRootUriAwareCommandHandler({\r\n      execute: uri => this.getDirectory(uri).then(parent => {\r\n        if (parent) {\r\n          const parentUri = parent.resource;\r\n          const {fileName, fileExtension} = this.getDefaultFileConfig();\r\n          const vacantChildUri = FileSystemUtils.generateUniqueResourceURI(parentUri, parent, fileName, fileExtension);\r\n\r\n          const dialog = new WorkspaceInputDialog({\r\n            title: nls.localizeByDefault('New File'),\r\n            parentUri: parentUri,\r\n            initialValue: vacantChildUri.path.base,\r\n            validate: name => this.validateFileName(name, parent, true)\r\n          }, this.labelProvider);\r\n\r\n          dialog.open().then(async name => {\r\n            if (name) {\r\n              const fileUri = parentUri.resolve(name);\r\n              await this.fileService.create(fileUri);\r\n              this.fireCreateNewFile({parent: parentUri, uri: fileUri});\r\n              open(this.openerService, fileUri);\r\n            }\r\n          });\r\n        }\r\n      })\r\n    }));\r\n    commands.registerCommand(WorkspaceCommands.NEW_PYTHON_FILE, this.newWorkspaceRootUriAwareCommandHandler({\r\n      execute: uri => this.getDirectory(uri).then(parent => {\r\n        if (parent) {\r\n          const parentUri = parent.resource;\r\n          const {fileName} = this.getDefaultFileConfig();\r\n          const fileExtension = '.py';\r\n          const vacantChildUri = FileSystemUtils.generateUniqueResourceURI(parentUri, parent, fileName, fileExtension);\r\n\r\n          const dialog = new WorkspaceInputDialog({\r\n            title: nls.localizeByDefault('New File'),\r\n            parentUri: parentUri,\r\n            initialValue: vacantChildUri.path.base,\r\n            validate: name => this.validateFileName(name, parent, true)\r\n          }, this.labelProvider);\r\n\r\n          dialog.open().then(async name => {\r\n            if (name) {\r\n              name = name.endsWith('.py') ? name : name + '.py';\r\n              const fileUri = parentUri.resolve(name);\r\n              await this.fileService.create(fileUri);\r\n              this.fireCreateNewFile({parent: parentUri, uri: fileUri});\r\n              open(this.openerService, fileUri);\r\n            }\r\n          });\r\n        }\r\n      })\r\n    }));\r\n\r\n    commands.registerCommand(WorkspaceCommands.NEW_BLOCKLY_FILE, this.newWorkspaceRootUriAwareCommandHandler({\r\n      execute: uri => this.getDirectory(uri).then(parent => {\r\n        if (parent) {\r\n          const parentUri = parent.resource;\r\n          const {fileName} = this.getDefaultFileConfig();\r\n          const fileExtension = '.blockly';\r\n          const vacantChildUri = FileSystemUtils.generateUniqueResourceURI(parentUri, parent, fileName, fileExtension);\r\n\r\n          const dialog = new WorkspaceInputDialog({\r\n            title: nls.localizeByDefault('New File'),\r\n            parentUri: parentUri,\r\n            initialValue: vacantChildUri.path.base,\r\n            validate: name => this.validateFileName(name, parent, true)\r\n          }, this.labelProvider);\r\n\r\n          dialog.open().then(async name => {\r\n            if (name) {\r\n              name = name.endsWith('.blockly?') ? name : name + '.blockly';\r\n              const fileUri = parentUri.resolve(name);\r\n              await this.fileService.create(fileUri);\r\n              this.fireCreateNewFile({parent: parentUri, uri: fileUri});\r\n              open(this.openerService, fileUri);\r\n            }\r\n          });\r\n        }\r\n      })\r\n    }));\r\n    commands.registerCommand(WorkspaceCommands.NEW_FOLDER, this.newWorkspaceRootUriAwareCommandHandler({\r\n      execute: uri => this.getDirectory(uri).then(parent => {\r\n        if (parent) {\r\n          const parentUri = parent.resource;\r\n          const vacantChildUri = FileSystemUtils.generateUniqueResourceURI(parentUri, parent, 'Untitled');\r\n          const dialog = new WorkspaceInputDialog({\r\n            title: nls.localizeByDefault('New Folder'),\r\n            parentUri: parentUri,\r\n            initialValue: vacantChildUri.path.base,\r\n            validate: name => this.validateFileName(name, parent, true)\r\n          }, this.labelProvider);\r\n          dialog.open().then(async name => {\r\n            if (name) {\r\n              const folderUri = parentUri.resolve(name);\r\n              await this.fileService.createFolder(folderUri);\r\n              this.fireCreateNewFile({parent: parentUri, uri: folderUri});\r\n            }\r\n          });\r\n        }\r\n      })\r\n    }));\r\n    commands.registerCommand(WorkspaceCommands.FILE_RENAME, this.newMultiUriAwareCommandHandler({\r\n      isEnabled: uris => uris.some(uri => !this.isWorkspaceRoot(uri)) && uris.length === 1,\r\n      isVisible: uris => uris.some(uri => !this.isWorkspaceRoot(uri)) && uris.length === 1,\r\n      execute: (uris): void => {\r\n        uris.forEach(async uri => {\r\n          const parent = await this.getParent(uri);\r\n          if (parent) {\r\n            const oldName = uri.path.base;\r\n            const dialog = new SingleTextInputDialog({\r\n              title: nls.localizeByDefault('Rename'),\r\n              initialValue: oldName,\r\n              initialSelectionRange: {\r\n                start: 0,\r\n                end: uri.path.name.length\r\n              },\r\n              validate: async (newName, mode) => {\r\n                if (oldName === newName && mode === 'preview') {\r\n                  return false;\r\n                }\r\n                return this.validateFileRename(oldName, newName, parent);\r\n              }\r\n            });\r\n            const fileName = await dialog.open();\r\n            if (fileName) {\r\n              const oldUri = uri;\r\n              const newUri = uri.parent.resolve(fileName);\r\n              this.fileService.move(oldUri, newUri);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }));\r\n    commands.registerCommand(WorkspaceCommands.FILE_DELETE, this.newMultiUriAwareCommandHandler(this.deleteHandler));\r\n    this.preferences.ready.then(() => {\r\n      // commands.registerCommand(WorkspaceCommands.ADD_FOLDER, {\r\n      //     execute: async () => {\r\n      //         let uri = [new URI()];\r\n      //         await this.addFolderToWorkspace(...uri);\r\n      //     }\r\n      // });\r\n    });\r\n  }\r\n\r\n  protected fireCreateNewFile(uri: DidCreateNewResourceEvent): void {\r\n    this.onDidCreateNewFileEmitter.fire(uri);\r\n  }\r\n\r\n  protected fireCreateNewFolder(uri: DidCreateNewResourceEvent): void {\r\n    this.onDidCreateNewFolderEmitter.fire(uri);\r\n  }\r\n\r\n  protected async getDirectory(candidate: URI): Promise<FileStat | undefined> {\r\n    let stat: FileStat | undefined;\r\n    try {\r\n      stat = await this.fileService.resolve(candidate);\r\n    } catch {\r\n    }\r\n    if (stat && stat.isDirectory) {\r\n      return stat;\r\n    }\r\n    return this.getParent(candidate);\r\n  }\r\n\r\n  protected async validateFileRename(oldName: string, newName: string, parent: FileStat): Promise<string> {\r\n    if (\r\n        await parent.resource.resolve(newName).isEqual(parent.resource.resolve(oldName), false)\r\n    ) {\r\n      return '';\r\n    }\r\n    return this.validateFileName(newName, parent, false);\r\n  }\r\n\r\n  protected isWorkspaceRoot(uri: URI): boolean {\r\n    const rootUris = new Set(this.workspaceService.tryGetRoots().map(root => root.resource.toString()));\r\n    return rootUris.has(uri.toString());\r\n  }\r\n\r\n  protected async getParent(candidate: URI): Promise<FileStat | undefined> {\r\n    try {\r\n      return await this.fileService.resolve(candidate.parent);\r\n    } catch {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  protected getDefaultFileConfig(): { fileName: string, fileExtension: string } {\r\n    return {\r\n      fileName: 'Untitled',\r\n      fileExtension: '.txt'\r\n    };\r\n  }\r\n\r\n  protected async addFolderToWorkspace(...uris: URI[]): Promise<void> {\r\n    if (uris.length) {\r\n      const foldersToAdd = [];\r\n      try {\r\n        for (const uri of uris) {\r\n          const stat = await this.fileService.resolve(uri);\r\n          if (stat.isDirectory) {\r\n            foldersToAdd.push(uri);\r\n          }\r\n        }\r\n        await this.workspaceService.addRoot(foldersToAdd);\r\n      } catch {\r\n      }\r\n    }\r\n  }\r\n\r\n  protected newMultiUriAwareCommandHandler(handler: UriCommandHandler<URI[]>): UriAwareCommandHandler<URI[]> {\r\n    return UriAwareCommandHandler.MultiSelect(this.selectionService, handler);\r\n  }\r\n\r\n  /**\r\n   * Returns an error message if the file name is invalid. Otherwise, an empty string.\r\n   *\r\n   * @param name the simple file name of the file to validate.\r\n   * @param parent the parent directory's file stat.\r\n   * @param allowNested allow file or folder creation using recursive path\r\n   */\r\n  protected async validateFileName(name: string, parent: FileStat, allowNested: boolean = false): Promise<string> {\r\n    if (!name) {\r\n      return '';\r\n    }\r\n    // do not allow recursive rename\r\n    if (!allowNested && !validFilename(name)) {\r\n      return nls.localizeByDefault('Invalid file or folder name');\r\n    }\r\n    if (name.startsWith('/')) {\r\n      return nls.localizeByDefault('Absolute paths or names that starts with / are not allowed');\r\n    } else if (name.startsWith(' ') || name.endsWith(' ')) {\r\n      return nls.localizeByDefault('Names with leading or trailing whitespaces are not allowed');\r\n    }\r\n    // check and validate each sub-paths\r\n    if (name.split(/[\\\\/]/).some(file => !file || !validFilename(file) || /^\\s+$/.test(file))) {\r\n      return nls.localizeByDefault('The name \"{0}\" is not a valid file or folder name.', this.trimFileName(name));\r\n    }\r\n    const childUri = parent.resource.resolve(name);\r\n    const exists = await this.fileService.exists(childUri);\r\n    if (exists) {\r\n      return nls.localizeByDefault('A file or folder \"{0}\" already exists at this location.', this.trimFileName(name));\r\n    }\r\n    return '';\r\n  }\r\n\r\n  protected trimFileName(name: string): string {\r\n    if (name && name.length > 30) {\r\n      return `${name.substr(0, 30)}...`;\r\n    }\r\n    return name;\r\n  }\r\n\r\n  protected newWorkspaceRootUriAwareCommandHandler(handler: UriCommandHandler<URI>): WorkspaceRootUriAwareCommandHandler {\r\n    return new WorkspaceRootUriAwareCommandHandler(this.workspaceService, this.selectionService, handler);\r\n  }\r\n}\r\n\r\nexport class WorkspaceRootUriAwareCommandHandler extends UriAwareCommandHandler<URI> {\r\n\r\n  constructor(\r\n      protected readonly workspaceService: WorkspaceService,\r\n      protected readonly selectionService: SelectionService,\r\n      protected readonly handler: UriCommandHandler<URI>\r\n  ) {\r\n    super(selectionService, handler);\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public isEnabled(...args: any[]): boolean {\r\n    return super.isEnabled(...args) && !!this.workspaceService.tryGetRoots().length;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public isVisible(...args: any[]): boolean {\r\n    return super.isVisible(...args) && !!this.workspaceService.tryGetRoots().length;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  protected getUri(...args: any[]): URI | undefined {\r\n    const uri = super.getUri(...args);\r\n    // Return the `uri` immediately if the resource exists in any of the workspace roots and is of `file` scheme.\r\n    if (uri && uri.scheme === 'file' && this.workspaceService.getWorkspaceRootUri(uri)) {\r\n      return uri;\r\n    }\r\n    // Return the first root if available.\r\n    if (!!this.workspaceService.tryGetRoots().length) {\r\n      return this.workspaceService.tryGetRoots()[0].resource;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n@injectable()\r\nexport class FileMenuContribution implements MenuContribution {\r\n\r\n  registerMenus(registry: MenuModelRegistry): void {\r\n    registry.registerMenuAction(CommonMenus.FILE_NEW, {\r\n      commandId: WorkspaceCommands.NEW_FILE.id,\r\n      order: 'a'\r\n    });\r\n    registry.registerMenuAction(CommonMenus.FILE_NEW, {\r\n      commandId: WorkspaceCommands.NEW_FOLDER.id,\r\n      order: 'b'\r\n    });\r\n    const downloadUploadMenu = [...CommonMenus.FILE, '4_downloadupload'];\r\n    registry.registerMenuAction(downloadUploadMenu, {\r\n      commandId: FileSystemCommands.UPLOAD.id,\r\n      order: 'a'\r\n    });\r\n    registry.registerMenuAction(downloadUploadMenu, {\r\n      commandId: FileDownloadCommands.DOWNLOAD.id,\r\n      order: 'b'\r\n    });\r\n  }\r\n\r\n}\r\n"]}