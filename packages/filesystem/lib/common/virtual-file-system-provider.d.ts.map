{"version":3,"sources":["common/virtual-file-system-provider.ts"],"names":[],"mappings":"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","file":"../../src/common/virtual-file-system-provider.d.ts","sourcesContent":["import {injectable, postConstruct} from 'inversify';\r\nimport {\r\n    FileChange,\r\n    FileChangeType,\r\n    FileDeleteOptions,\r\n    FileOpenOptions,\r\n    FileOverwriteOptions,\r\n    FileReadStreamOptions,\r\n    FileSystemProvider,\r\n    FileSystemProviderCapabilities,\r\n    FileType,\r\n    FileUpdateOptions,\r\n    FileUpdateResult,\r\n    FileWriteOptions,\r\n    Stat,\r\n    WatchOptions\r\n} from './files';\r\nimport {CancellationToken, Disposable, DisposableCollection, Emitter, Event} from '@tart/core/lib/common';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {newWriteableStream, ReadableStreamEvents} from '@tart/core/lib/common/stream';\r\nimport type {TextDocumentContentChangeEvent} from 'vscode-languageserver-protocol';\r\nimport {Deferred} from '@tart/core/lib/common/promise-util';\r\nimport {BinaryBuffer} from '@tart/core/lib/common/buffer';\r\nimport {\r\n    add_dir_to_pointer,\r\n    add_file_to_pointer,\r\n    FS,\r\n    get_child_list,\r\n    get_pointer,\r\n    get_root_pointer,\r\n    movePointer,\r\n    remove_pointer,\r\n    setNotifyDidChangeFile,\r\n    update_data_file_pointer\r\n} from './localstorage';\r\n\r\nconst decoder = new TextDecoder();\r\nconst encoder = new TextEncoder();\r\n\r\nexport interface VirtualFileChange {\r\n    readonly type: FileChangeType;\r\n    readonly resource: string;\r\n}\r\n\r\nexport type VirtualFileChanges = VirtualFileChange[];\r\n\r\n@injectable()\r\nexport class VirtualFileSystemProvider implements Required<FileSystemProvider>, Disposable {\r\n\r\n    private readonly onDidChangeCapabilitiesEmitter = new Emitter<void>();\r\n    readonly onDidChangeCapabilities = this.onDidChangeCapabilitiesEmitter.event;\r\n\r\n    readonly onFileWatchError: Event<void>;\r\n    protected readonly readyDeferred = new Deferred<void>();\r\n    readonly ready = this.readyDeferred.promise;\r\n    private readonly onDidChangeFileEmitter = new Emitter<readonly FileChange[]>();\r\n    readonly onDidChangeFile = this.onDidChangeFileEmitter.event;\r\n    protected readonly toDispose = new DisposableCollection(\r\n        this.onDidChangeFileEmitter,\r\n    );\r\n\r\n    private _capabilities: FileSystemProviderCapabilities = 0;\r\n\r\n    get capabilities(): FileSystemProviderCapabilities {\r\n        return this._capabilities;\r\n    }\r\n\r\n    private _root: FS.Directory;\r\n\r\n    private get root() {\r\n        this._root = get_root_pointer();\r\n        return this._root;\r\n    }\r\n\r\n    access(resource: URI, mode: number | undefined): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    close(fd: number): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    copy(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> {\r\n        // console.log('copy');\r\n        const pointer = get_pointer(this.root, from.path.toString());\r\n        if (pointer.type === FS.Type.file) {\r\n            this.writeFile(to, encoder.encode(pointer.data().toString()), {overwrite: true, create: true});\r\n        } else if (pointer.type === FS.Type.directory) {\r\n        }\r\n\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    delete(resource: URI, opts: FileDeleteOptions): Promise<void> {\r\n        let pointer = get_pointer(this.root, resource.path.toString());\r\n        if (pointer !== undefined) {\r\n            remove_pointer(pointer, resource.toString());\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    fsPath(resource: URI): Promise<string> {\r\n        return Promise.resolve('');\r\n    }\r\n\r\n    mkdir(resource: URI): Promise<void> {\r\n        // console.log('mkdir');\r\n        let pointer = get_pointer(this.root, resource.path.toString());\r\n        switch (pointer.type) {\r\n            case FS.Type.error:\r\n                pointer = get_pointer(this.root, resource.path.toString().split('/').slice(0, -1).join('/'));\r\n                if (pointer !== undefined && pointer.type !== FS.Type.error) {\r\n                    add_dir_to_pointer(pointer, resource.path.name, '', resource.toString());\r\n                }\r\n                break;\r\n            case FS.Type.file:\r\n                break;\r\n            case FS.Type.directory:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    open(resource: URI, opts: FileOpenOptions): Promise<number> {\r\n        // console.log('open')\r\n        return Promise.resolve(0);\r\n    }\r\n\r\n    read(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\r\n        // console.log('read');\r\n        return Promise.resolve(0);\r\n    }\r\n\r\n    readFile(resource: URI): Promise<Uint8Array> {\r\n        // console.log('readFile');\r\n        const pointer = get_pointer(this.root, resource.path.toString());\r\n        if (pointer.type === FS.Type.file) {\r\n            return Promise.resolve(encoder.encode(pointer.data().toString()));\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    readFileStream(resource: URI, opts: FileReadStreamOptions, token: CancellationToken): Promise<ReadableStreamEvents<Uint8Array>> {\r\n        const pointer = get_pointer(this.root, resource.path.toString());\r\n        const stream = newWriteableStream<Uint8Array>(data => BinaryBuffer.concat(data.map(data => BinaryBuffer.wrap(data))).buffer);\r\n        if (pointer !== undefined && pointer.type !== FS.Type.error) {\r\n            stream.write(new TextEncoder().encode(pointer.data().toString()));\r\n        }\r\n        stream.end();\r\n        return Promise.resolve(stream);\r\n    }\r\n\r\n    readdir(resource: URI): Promise<[string, FileType][]> {\r\n        const result = get_pointer(this.root, resource.path.toString());\r\n\r\n        return Promise.resolve(result.type === FS.Type.directory ?\r\n            get_child_list(result).map((c) => [c.name, c.type === FS.Type.file ? FileType.File : FileType.Directory]) : []);\r\n    }\r\n\r\n    rename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> {\r\n        const fileName = to.path.toString().split('/').pop();\r\n        const pointer = get_pointer(this.root, from.path.toString());\r\n        const toPointer = get_pointer(this.root, to.path.toString().slice(0, -(fileName.length + 1)));\r\n\r\n        if (pointer.type !== FS.Type.error) {\r\n            movePointer(pointer, toPointer, fileName, to.toString());\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    stat(resource: URI): Promise<Stat> {\r\n        // console.log(resource);\r\n        // console.log(this.getStat(resource));\r\n        return Promise.resolve(this.getStat(resource));\r\n    }\r\n\r\n    updateFile(resource: URI, changes: TextDocumentContentChangeEvent[], opts: FileUpdateOptions): Promise<FileUpdateResult> {\r\n        return Promise.resolve({\r\n            ...this.getStat(resource),\r\n            encoding: 'utf8'\r\n        });\r\n    }\r\n\r\n    watch(resource: URI, opts: WatchOptions): Disposable {\r\n        return undefined;\r\n    }\r\n\r\n    write(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\r\n        // console.log('write');\r\n        return Promise.resolve(0);\r\n    }\r\n\r\n    writeFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void> {\r\n        // console.log('write file');\r\n        let pointer = get_pointer(this.root, resource.path.toString());\r\n        switch (pointer.type) {\r\n            case FS.Type.error:\r\n                pointer = get_pointer(this.root, resource.path.toString().split('/').slice(0, -1).join('/'));\r\n                if (pointer !== undefined && pointer.type !== FS.Type.error) {\r\n                    add_file_to_pointer(\r\n                        pointer,\r\n                        resource.toString().split('/').slice(-1),\r\n                        decoder.decode(content),\r\n                        resource.toString()\r\n                    );\r\n                }\r\n                break;\r\n            case FS.Type.file:\r\n                update_data_file_pointer(pointer, decoder.decode(content));\r\n                break;\r\n            case FS.Type.directory:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    dispose(): void {\r\n    }\r\n\r\n    @postConstruct()\r\n    protected init(): void {\r\n        this._capabilities = 16781342;\r\n        setNotifyDidChangeFile(({changes}) => {\r\n            this.onDidChangeFileEmitter.fire(changes.map(event => ({\r\n                resource: new URI(event.resource),\r\n                type: event.type\r\n            })));\r\n        });\r\n        this.readyDeferred.resolve();\r\n        this._root = get_root_pointer();\r\n    }\r\n\r\n    private getStat(resource: URI): Stat {\r\n        const result = get_pointer(this.root, resource.path.toString());\r\n        return result.type === FS.Type.error ? undefined :\r\n            result.type === FS.Type.file ? {\r\n                ctime: 1637652983302,\r\n                mtime: 1639099297702,\r\n                size: 148,\r\n                type: FileType.File,\r\n            } : {\r\n                ctime: 1637652983302,\r\n                mtime: 1639099297702,\r\n                size: 148,\r\n                type: FileType.Directory,\r\n            };\r\n    }\r\n\r\n}\r\n"]}