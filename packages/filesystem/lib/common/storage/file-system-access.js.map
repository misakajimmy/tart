{"version":3,"sources":["common/storage/file-system-access.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,EAAC,QAAQ,EAAO,MAAM,UAAU,CAAC;AACxC,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAGrC,IAAa,gBAAgB,wBAA7B,MAAa,gBAAgB;IAiBzB;IACA,CAAC;IAdD,KAAK,CAAC,OAAO;QACT,IAAI,CAAC,KAAK,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,SAAS;QACX,aAAa;QACb,IAAI,CAAC,KAAK,GAAG,MAAM,MAAM,CAAC,mBAAmB,EAAE,CAAC;IACpD,CAAC;IAED,sBAAsB,CAAC,MAA+B;QAClD,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC;IACvC,CAAC;IAKD,KAAK,CAAC,OAAO,CAAC,IAA+B;QACzC,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC1B,IAAI,MAAM,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;QAC7B,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE;YACjB,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACvB,MAAM,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;SAC5B;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,IAA+B,EAAE,MAAc;QAC/D,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YACxB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SAC5B;QACD,IAAI,MAAM,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE;YAC1B,OAAO,OAAO,CAAC;SAClB;QACD,KAAK,IAAI,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YACjC,IAAI;gBACA,IAAI,GAAG,GAAG,MAAM,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBAClD,IAAI,GAAG,KAAK,SAAS,EAAE;oBACnB,OAAO,GAAG,GAAG,CAAC;iBACjB;qBAAM;oBACH,OAAO,SAAS,CAAC;iBACpB;aACJ;YAAC,OAAO,CAAC,EAAE;gBACR,OAAO,SAAS,CAAC;aACpB;SACJ;QACD,OAAO,OAAO,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,GAAW;QACnC,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAA+B,EAAE,MAAc;QAChE,IAAI,MAAM,KAAK,GAAG,EAAE;YAChB,IAAI;gBACA,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBACzC,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrE,IAAI,IAAI,KAAK,SAAS,EAAE;oBACpB,OAAO,IAAI,CAAC;iBACf;qBAAM;oBACH,OAAO,SAAS,CAAC;iBACpB;aACJ;YAAC,WAAM;gBACJ,OAAO,SAAS,CAAA;aACnB;SACJ;aAAM;YACH,OAAO,SAAS,CAAC;SACpB;IACL,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,MAAc;QACvC,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAAW;QACrB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;QACpD,IAAI,kBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAC/B,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;SAClC;aAAM;YACH,OAAO,SAAS,CAAC;SACpB;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,GAAW;QACxB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;QAClD,IAAI,GAAG,KAAK,SAAS,EAAE;YACnB,OAAO,GAAG,CAAA;SACb;QACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;QACpD,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,OAAO,IAAI,CAAA;SACd;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAAW;QACrB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;QACpD,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,OAAO;gBACH,KAAK,EAAE,aAAa;gBACpB,KAAK,EAAE,aAAa;gBACpB,IAAI,EAAE,GAAG;gBACT,IAAI,EAAE,QAAQ,CAAC,IAAI;aACtB,CAAA;SACJ;QACD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;QAClD,IAAI,GAAG,KAAK,SAAS,EAAE;YACnB,OAAO;gBACH,KAAK,EAAE,aAAa;gBACpB,KAAK,EAAE,aAAa;gBACpB,IAAI,EAAE,GAAG;gBACT,IAAI,EAAE,QAAQ,CAAC,SAAS;aAC3B,CAAA;SACJ;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,IAA+B,EAAE,IAAY;QACrD,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,IAA+B,EAAE,IAAY;QACtD,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;IAC1D,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,IAA+B,EAAE,IAAY;QACtD,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,GAAW;QACvB,OAAO,MAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACnF,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,WAA6B,EAAE,IAAS;QACpD,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,gBAAgB,CAAC,EAAE,CAAC;QACrD,MAAM,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACzB,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,IAAsB,EAAE,GAA8B,EAAE,IAAY;QAC3E,IAAI;YACA,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACxB,OAAO,IAAI,CAAC;SACf;QAAC,WAAM;YACJ,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;CACJ,CAAA;AAzJY,gBAAgB;IAD5B,UAAU,EAAE;GACA,gBAAgB,CAyJ5B;SAzJY,gBAAgB;AA2J7B,WAAiB,gBAAgB;IAG7B,SAAgB,MAAM,CAAC,GAAQ;QAC3B,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,MAAM,CAAC,CAAC;IACnF,CAAC;IAFe,uBAAM,SAErB,CAAA;IAED,SAAgB,WAAW,CAAC,GAAQ;QAChC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,WAAW,CAAC,CAAC;IACxF,CAAC;IAFe,4BAAW,cAE1B,CAAA;AACL,CAAC,EAVgB,gBAAgB,KAAhB,gBAAgB,QAUhC;AAED,eAAe,gBAAgB,CAAC","file":"../../../src/common/storage/file-system-access.js","sourcesContent":["import {FileType, Stat} from \"../files\";\r\nimport {injectable} from \"inversify\";\r\n\r\n@injectable()\r\nexport class FileSystemAccess {\r\n    private _root: FileSystemDirectoryHandle;\r\n    private _notifyDidChangeFile: ({changes: any}) => any;\r\n\r\n    async setRoot() {\r\n        this._root = await navigator.storage.getDirectory();\r\n    }\r\n\r\n    async localRoot() {\r\n        // @ts-ignore\r\n        this._root = await window.showDirectoryPicker();\r\n    }\r\n\r\n    setNotifyDidChangeFile(change: ({changes: any}) => any) {\r\n        this._notifyDidChangeFile = change;\r\n    }\r\n\r\n    constructor() {\r\n    }\r\n\r\n    async listDir(root: FileSystemDirectoryHandle): Promise<FileSystemAccess.FileSystemChildrenType[]> {\r\n        let res = [];\r\n        let it = root['values']();\r\n        let result = await it.next();\r\n        while (!result.done) {\r\n            res.push(result.value);\r\n            result = await it.next();\r\n        }\r\n        return res;\r\n    }\r\n\r\n    async getDirHandler(root: FileSystemDirectoryHandle, routes: string): Promise<FileSystemDirectoryHandle> {\r\n        let current = root;\r\n        if (routes.startsWith('/')) {\r\n            routes = routes.slice(1);\r\n        }\r\n        if (routes === '' || !routes) {\r\n            return current;\r\n        }\r\n        for (let route of routes.split('/')) {\r\n            try {\r\n                let res = await current.getDirectoryHandle(route);\r\n                if (res !== undefined) {\r\n                    current = res;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch (e) {\r\n                return undefined;\r\n            }\r\n        }\r\n        return current;\r\n    }\r\n\r\n    async getDirHandlerFromRoot(url: string): Promise<FileSystemDirectoryHandle> {\r\n        return this.getDirHandler(this._root, url);\r\n    }\r\n\r\n    async getFileHandler(root: FileSystemDirectoryHandle, routes: string): Promise<FileSystemHandle> {\r\n        if (routes !== '/') {\r\n            try {\r\n                const dir = await this.parentDir(routes);\r\n                const file = await dir.getFileHandle(routes.split('/').slice(-1)[0]);\r\n                if (file !== undefined) {\r\n                    return file;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch {\r\n                return undefined\r\n            }\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async getFileHandlerFromRoot(routes: string): Promise<FileSystemHandle> {\r\n        return this.getFileHandler(this._root, routes);\r\n    }\r\n\r\n    async getFile(url: string): Promise<File | undefined> {\r\n        const file = await this.getFileHandlerFromRoot(url);\r\n        if (FileSystemAccess.IsFile(file)) {\r\n            return await file['getFile']();\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async getPointer(url: string): Promise<FileSystemAccess.FileSystemChildrenType> {\r\n        const dir = await this.getDirHandlerFromRoot(url);\r\n        if (dir !== undefined) {\r\n            return dir\r\n        }\r\n        const file = await this.getFileHandlerFromRoot(url);\r\n        if (file !== undefined) {\r\n            return file\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    async getStat(url: string): Promise<Stat> {\r\n        const file = await this.getFileHandlerFromRoot(url);\r\n        if (file !== undefined) {\r\n            return {\r\n                ctime: 1637652983302,\r\n                mtime: 1639099297702,\r\n                size: 148,\r\n                type: FileType.File,\r\n            }\r\n        }\r\n        const dir = await this.getDirHandlerFromRoot(url);\r\n        if (dir !== undefined) {\r\n            return {\r\n                ctime: 1637652983302,\r\n                mtime: 1639099297702,\r\n                size: 148,\r\n                type: FileType.Directory,\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    async mkdir(root: FileSystemDirectoryHandle, name: string): Promise<any> {\r\n        return await root.getDirectoryHandle(name, {create: true});\r\n    }\r\n\r\n    async mkFile(root: FileSystemDirectoryHandle, name: string): Promise<any> {\r\n        return await root.getFileHandle(name, {create: true});\r\n    }\r\n\r\n    async delete(root: FileSystemDirectoryHandle, name: string): Promise<any> {\r\n        return await root.removeEntry(name, {recursive: true});\r\n    }\r\n\r\n    async parentDir(url: string): Promise<FileSystemDirectoryHandle> {\r\n        return await this.getDirHandlerFromRoot(url.split('/').slice(0, -1).join('/'));\r\n    }\r\n\r\n    async writeFile(fileHandler: FileSystemHandle, data: any) {\r\n        const stream = await fileHandler['createWritable']();\r\n        await stream.write(data);\r\n        await stream.close();\r\n    }\r\n\r\n    async move(file: FileSystemHandle, dir: FileSystemDirectoryHandle, name: string): Promise<boolean> {\r\n        try {\r\n            file['move'](dir, name);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace FileSystemAccess {\r\n    export type FileSystemChildrenType = FileSystemHandle | FileSystemDirectoryHandle | undefined;\r\n\r\n    export function IsFile(arg: any): arg is FileSystemHandle {\r\n        return !!arg && ('kind' in arg) && ('name' in arg) && (arg['kind'] === 'file');\r\n    }\r\n\r\n    export function IsDirectory(arg: any): arg is FileSystemDirectoryHandle {\r\n        return !!arg && ('kind' in arg) && ('name' in arg) && (arg['kind'] === 'directory');\r\n    }\r\n}\r\n\r\nexport default FileSystemAccess;\r\n"]}