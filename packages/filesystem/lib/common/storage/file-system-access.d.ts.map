{"version":3,"sources":["common/storage/file-system-access.ts"],"names":[],"mappings":"AAAA,OAAO,EAAW,IAAI,EAAC,MAAM,UAAU,CAAC;AAGxC,qBACa,gBAAgB;IACzB,OAAO,CAAC,KAAK,CAA4B;IACzC,OAAO,CAAC,oBAAoB,CAA0B;IAEhD,OAAO;IAIP,SAAS;IAKf,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAC,OAAO,EAAE,GAAG,EAAC;;KAAA,KAAK,GAAG;;IAOhD,OAAO,CAAC,IAAI,EAAE,yBAAyB,GAAG,OAAO,CAAC,gBAAgB,CAAC,sBAAsB,EAAE,CAAC;IAW5F,aAAa,CAAC,IAAI,EAAE,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAuBlG,qBAAqB,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAItE,cAAc,CAAC,IAAI,EAAE,yBAAyB,EAAE,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC;IAkB1F,sBAAsB,CAAC,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC;IAIjE,OAAO,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC;IAS/C,UAAU,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,sBAAsB,CAAC;IAYzE,OAAO,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAsBnC,KAAK,CAAC,IAAI,EAAE,yBAAyB,EAAE,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC;IAIlE,MAAM,CAAC,IAAI,EAAE,yBAAyB,EAAE,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC;IAInE,MAAM,CAAC,IAAI,EAAE,yBAAyB,EAAE,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC;IAInE,SAAS,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAI1D,SAAS,CAAC,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG;IAMlD,IAAI,CAAC,IAAI,EAAE,gBAAgB,EAAE,GAAG,EAAE,yBAAyB,EAAE,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC;CAQrG;AAED,yBAAiB,gBAAgB,CAAC;IAC9B,KAAY,sBAAsB,GAAG,gBAAgB,GAAG,yBAAyB,GAAG,SAAS,CAAC;IAE9F,SAAgB,MAAM,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,gBAAgB,CAExD;IAED,SAAgB,WAAW,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,yBAAyB,CAEtE;CACJ;AAED,eAAe,gBAAgB,CAAC","file":"../../../src/common/storage/file-system-access.d.ts","sourcesContent":["import {FileType, Stat} from \"../files\";\r\nimport {injectable} from \"inversify\";\r\n\r\n@injectable()\r\nexport class FileSystemAccess {\r\n    private _root: FileSystemDirectoryHandle;\r\n    private _notifyDidChangeFile: ({changes: any}) => any;\r\n\r\n    async setRoot() {\r\n        this._root = await navigator.storage.getDirectory();\r\n    }\r\n\r\n    async localRoot() {\r\n        // @ts-ignore\r\n        this._root = await window.showDirectoryPicker();\r\n    }\r\n\r\n    setNotifyDidChangeFile(change: ({changes: any}) => any) {\r\n        this._notifyDidChangeFile = change;\r\n    }\r\n\r\n    constructor() {\r\n    }\r\n\r\n    async listDir(root: FileSystemDirectoryHandle): Promise<FileSystemAccess.FileSystemChildrenType[]> {\r\n        let res = [];\r\n        let it = root['values']();\r\n        let result = await it.next();\r\n        while (!result.done) {\r\n            res.push(result.value);\r\n            result = await it.next();\r\n        }\r\n        return res;\r\n    }\r\n\r\n    async getDirHandler(root: FileSystemDirectoryHandle, routes: string): Promise<FileSystemDirectoryHandle> {\r\n        let current = root;\r\n        if (routes.startsWith('/')) {\r\n            routes = routes.slice(1);\r\n        }\r\n        if (routes === '' || !routes) {\r\n            return current;\r\n        }\r\n        for (let route of routes.split('/')) {\r\n            try {\r\n                let res = await current.getDirectoryHandle(route);\r\n                if (res !== undefined) {\r\n                    current = res;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch (e) {\r\n                return undefined;\r\n            }\r\n        }\r\n        return current;\r\n    }\r\n\r\n    async getDirHandlerFromRoot(url: string): Promise<FileSystemDirectoryHandle> {\r\n        return this.getDirHandler(this._root, url);\r\n    }\r\n\r\n    async getFileHandler(root: FileSystemDirectoryHandle, routes: string): Promise<FileSystemHandle> {\r\n        if (routes !== '/') {\r\n            try {\r\n                const dir = await this.parentDir(routes);\r\n                const file = await dir.getFileHandle(routes.split('/').slice(-1)[0]);\r\n                if (file !== undefined) {\r\n                    return file;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch {\r\n                return undefined\r\n            }\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async getFileHandlerFromRoot(routes: string): Promise<FileSystemHandle> {\r\n        return this.getFileHandler(this._root, routes);\r\n    }\r\n\r\n    async getFile(url: string): Promise<File | undefined> {\r\n        const file = await this.getFileHandlerFromRoot(url);\r\n        if (FileSystemAccess.IsFile(file)) {\r\n            return await file['getFile']();\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async getPointer(url: string): Promise<FileSystemAccess.FileSystemChildrenType> {\r\n        const dir = await this.getDirHandlerFromRoot(url);\r\n        if (dir !== undefined) {\r\n            return dir\r\n        }\r\n        const file = await this.getFileHandlerFromRoot(url);\r\n        if (file !== undefined) {\r\n            return file\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    async getStat(url: string): Promise<Stat> {\r\n        const file = await this.getFileHandlerFromRoot(url);\r\n        if (file !== undefined) {\r\n            return {\r\n                ctime: 1637652983302,\r\n                mtime: 1639099297702,\r\n                size: 148,\r\n                type: FileType.File,\r\n            }\r\n        }\r\n        const dir = await this.getDirHandlerFromRoot(url);\r\n        if (dir !== undefined) {\r\n            return {\r\n                ctime: 1637652983302,\r\n                mtime: 1639099297702,\r\n                size: 148,\r\n                type: FileType.Directory,\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    async mkdir(root: FileSystemDirectoryHandle, name: string): Promise<any> {\r\n        return await root.getDirectoryHandle(name, {create: true});\r\n    }\r\n\r\n    async mkFile(root: FileSystemDirectoryHandle, name: string): Promise<any> {\r\n        return await root.getFileHandle(name, {create: true});\r\n    }\r\n\r\n    async delete(root: FileSystemDirectoryHandle, name: string): Promise<any> {\r\n        return await root.removeEntry(name, {recursive: true});\r\n    }\r\n\r\n    async parentDir(url: string): Promise<FileSystemDirectoryHandle> {\r\n        return await this.getDirHandlerFromRoot(url.split('/').slice(0, -1).join('/'));\r\n    }\r\n\r\n    async writeFile(fileHandler: FileSystemHandle, data: any) {\r\n        const stream = await fileHandler['createWritable']();\r\n        await stream.write(data);\r\n        await stream.close();\r\n    }\r\n\r\n    async move(file: FileSystemHandle, dir: FileSystemDirectoryHandle, name: string): Promise<boolean> {\r\n        try {\r\n            file['move'](dir, name);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace FileSystemAccess {\r\n    export type FileSystemChildrenType = FileSystemHandle | FileSystemDirectoryHandle | undefined;\r\n\r\n    export function IsFile(arg: any): arg is FileSystemHandle {\r\n        return !!arg && ('kind' in arg) && ('name' in arg) && (arg['kind'] === 'file');\r\n    }\r\n\r\n    export function IsDirectory(arg: any): arg is FileSystemDirectoryHandle {\r\n        return !!arg && ('kind' in arg) && ('name' in arg) && (arg['kind'] === 'directory');\r\n    }\r\n}\r\n\r\nexport default FileSystemAccess;\r\n"]}