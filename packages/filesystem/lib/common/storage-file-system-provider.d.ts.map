{"version":3,"sources":["common/storage-file-system-provider.ts"],"names":[],"mappings":"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","file":"../../src/common/storage-file-system-provider.d.ts","sourcesContent":["import {injectable, postConstruct} from \"inversify\";\r\nimport {\r\n    FileChange,\r\n    FileChangeType,\r\n    FileDeleteOptions,\r\n    FileOpenOptions,\r\n    FileOverwriteOptions,\r\n    FileReadStreamOptions,\r\n    FileSystemProvider,\r\n    FileSystemProviderCapabilities,\r\n    FileType,\r\n    FileUpdateOptions,\r\n    FileUpdateResult,\r\n    FileWriteOptions,\r\n    Stat,\r\n    WatchOptions\r\n} from './files';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport type {TextDocumentContentChangeEvent} from 'vscode-languageserver-protocol';\r\nimport {newWriteableStream, ReadableStreamEvents} from '@tart/core/lib/common/stream';\r\nimport {CancellationToken, Disposable, DisposableCollection, Emitter, Event} from '@tart/core/lib/common';\r\nimport {Deferred} from \"@tart/core/lib/common/promise-util\";\r\nimport FileSystemAccess from \"./storage/file-system-access\";\r\nimport {BinaryBuffer} from \"@tart/core/lib/common/buffer\";\r\n\r\nconst decoder = new TextDecoder();\r\nconst encoder = new TextEncoder();\r\n\r\n@injectable()\r\nexport class StorageFileSystemProvider implements Required<FileSystemProvider>, Disposable {\r\n\r\n    private readonly onDidChangeCapabilitiesEmitter = new Emitter<void>();\r\n    readonly onDidChangeCapabilities = this.onDidChangeCapabilitiesEmitter.event;\r\n\r\n    readonly onFileWatchError: Event<void>;\r\n    protected readonly readyDeferred = new Deferred<void>();\r\n    readonly ready = this.readyDeferred.promise;\r\n    private readonly onDidChangeFileEmitter = new Emitter<readonly FileChange[]>();\r\n    readonly onDidChangeFile = this.onDidChangeFileEmitter.event;\r\n    protected readonly toDispose = new DisposableCollection(\r\n        this.onDidChangeFileEmitter,\r\n    );\r\n\r\n    private _capabilities: FileSystemProviderCapabilities = 0;\r\n\r\n    get capabilities(): FileSystemProviderCapabilities {\r\n        return this._capabilities;\r\n    }\r\n\r\n    private _fs: FileSystemAccess;\r\n\r\n    access(resource: URI, mode: number | undefined): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    close(fd: number): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async copy(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> {\r\n        const pointer = await this._fs.getPointer(from.path.toString());\r\n        if (FileSystemAccess.IsFile(pointer)) {\r\n            await this.writeFile(to, encoder.encode(await (await pointer['getFile']()).text()), {\r\n                overwrite: true,\r\n                create: true\r\n            });\r\n        } else if (FileSystemAccess.IsDirectory(pointer)) {\r\n\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async delete(resource: URI, opts: FileDeleteOptions): Promise<void> {\r\n        let pointer = await this._fs.getPointer(resource.path.toString());\r\n        if (pointer !== undefined) {\r\n            const parent = await this._fs.parentDir(resource.path.toString());\r\n            await this._fs.delete(parent, resource.path.base);\r\n            this.onDidChangeFileEmitter.fire([{type: FileChangeType.DELETED, resource: resource}]);\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    fsPath(resource: URI): Promise<string> {\r\n        return Promise.resolve(\"\");\r\n    }\r\n\r\n    async mkdir(resource: URI): Promise<void> {\r\n        let pointer = await this._fs.getPointer(resource.path.toString());\r\n        if (FileSystemAccess.IsFile(pointer)) {\r\n\r\n        } else if (FileSystemAccess.IsDirectory(pointer)) {\r\n\r\n        } else {\r\n            pointer = await this._fs.parentDir(resource.path.toString());\r\n            if (FileSystemAccess.IsDirectory(pointer)) {\r\n                await this._fs.mkdir(pointer, resource.path.name);\r\n                this.onDidChangeFileEmitter.fire([{type: FileChangeType.ADDED, resource: resource}]);\r\n            }\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    open(resource: URI, opts: FileOpenOptions): Promise<number> {\r\n        return Promise.resolve(0);\r\n    }\r\n\r\n    read(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\r\n        return Promise.resolve(0);\r\n    }\r\n\r\n    async readFile(resource: URI): Promise<Uint8Array> {\r\n        const file = await this._fs.getFile(resource.path.toString());\r\n        if (!!file) {\r\n            return new Uint8Array(await file.arrayBuffer());\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async readFileStream(resource: URI, opts: FileReadStreamOptions, token: CancellationToken): Promise<ReadableStreamEvents<Uint8Array>> {\r\n        const stream = newWriteableStream<Uint8Array>(data => BinaryBuffer.concat(data.map(data => BinaryBuffer.wrap(data))).buffer);\r\n        const file = await this._fs.getFile(resource.path.toString());\r\n        const s = file.stream();\r\n        const reader = s['getReader']() as ReadableStreamDefaultReader;\r\n        let res = await reader.read();\r\n        while (!res.done) {\r\n            stream.write(res.value);\r\n            res = await reader.read();\r\n        }\r\n        stream.end();\r\n        return stream;\r\n    }\r\n\r\n    async readdir(resource: URI): Promise<[string, FileType][]> {\r\n        const dir = await this._fs.getDirHandlerFromRoot(resource.path.toString());\r\n        const files = await this._fs.listDir(dir);\r\n        return Promise.resolve(files.map(file => {\r\n            return [file.name, file.kind === 'file' ? FileType.File : FileType.Directory];\r\n        }));\r\n    }\r\n\r\n    async rename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> {\r\n        let pointer = await this._fs.getPointer(from.path.toString());\r\n        if (FileSystemAccess.IsFile(pointer)) {\r\n            const dir = await this._fs.parentDir(to.path.toString());\r\n            await this._fs.move(pointer, dir, to.path.base);\r\n            this.onDidChangeFileEmitter.fire([{type: FileChangeType.UPDATED, resource: to}]);\r\n        } else if (FileSystemAccess.IsDirectory(pointer)) {\r\n\r\n        } else {\r\n\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    async stat(resource: URI): Promise<Stat> {\r\n        return await this._fs.getStat(resource.path.toString());\r\n    }\r\n\r\n    async updateFile(resource: URI, changes: TextDocumentContentChangeEvent[], opts: FileUpdateOptions): Promise<FileUpdateResult> {\r\n        return Promise.resolve({\r\n            ...(await this._fs.getStat(resource.path.toString())),\r\n            encoding: 'utf8'\r\n        });\r\n    }\r\n\r\n    watch(resource: URI, opts: WatchOptions): Disposable {\r\n        return undefined;\r\n    }\r\n\r\n    write(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\r\n        return Promise.resolve(0);\r\n    }\r\n\r\n    async writeFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void> {\r\n        let pointer = await this._fs.getPointer(resource.path.toString());\r\n\r\n        if (FileSystemAccess.IsFile(pointer)) {\r\n            await this._fs.writeFile(pointer, content.buffer);\r\n        } else if (FileSystemAccess.IsDirectory(pointer)) {\r\n        } else {\r\n            const parent = await this._fs.parentDir(resource.path.toString());\r\n            const file = await this._fs.mkFile(parent, resource.path.base);\r\n            await this._fs.writeFile(file, content.buffer);\r\n            this.onDidChangeFileEmitter.fire([{type: FileChangeType.UPDATED, resource: resource}]);\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    dispose(): void {\r\n    }\r\n\r\n    useLocal(): void {\r\n        this._fs.localRoot();\r\n    }\r\n\r\n    @postConstruct()\r\n    protected init(): void {\r\n        this._capabilities = 16781342;\r\n        this._fs = new FileSystemAccess();\r\n        this._fs.setRoot().then(() => {\r\n            this.readyDeferred.resolve();\r\n        });\r\n        this._fs.setNotifyDidChangeFile(({changes}) => {\r\n            this.onDidChangeFileEmitter.fire(changes.map(event => ({\r\n                resource: new URI(event.resource),\r\n                type: event.type\r\n            })));\r\n        });\r\n    }\r\n}\r\n"]}