{"version":3,"sources":["common/filesystem.ts"],"names":[],"mappings":"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","file":"../../src/common/filesystem.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2017 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\n/* eslint-disable max-len */\r\n\r\nimport {TextDocumentContentChangeEvent} from 'vscode-languageserver-protocol';\r\nimport {ApplicationError} from '@tart/core/lib/common';\r\n\r\n/**\r\n * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService` instead\r\n */\r\nexport const FileSystem = Symbol('FileSystem');\r\n\r\nexport interface FileSystem {\r\n\r\n    /**\r\n     * Returns the file stat for the given URI.\r\n     *\r\n     * If the uri points to a folder it will contain one level of unresolved children.\r\n     *\r\n     * `undefined` if a file for the given URI does not exist.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.resolve` instead\r\n     */\r\n    getFileStat(uri: string): Promise<FileStat | undefined>;\r\n\r\n    /**\r\n     * Finds out if a file identified by the resource exists.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.exists` instead\r\n     */\r\n    exists(uri: string): Promise<boolean>;\r\n\r\n    /**\r\n     * Resolve the contents of a file identified by the resource.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.read` instead\r\n     */\r\n    resolveContent(uri: string, options?: { encoding?: string }): Promise<{ stat: FileStat, content: string }>;\r\n\r\n    /**\r\n     * Updates the content replacing its previous value.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.write` instead\r\n     */\r\n    setContent(file: FileStat, content: string, options?: { encoding?: string }): Promise<FileStat>;\r\n\r\n    /**\r\n     * Updates the content replacing its previous value.\r\n     *\r\n     * The optional parameter `overwriteEncoding` can be used to transform the encoding of a file.\r\n     *\r\n     * |   | encoding | overwriteEncoding | behaviour |\r\n     * |---|----------|-------------------|-----------|\r\n     * | 1 | undefined |    undefined     | read & write file in default encoding |\r\n     * | 2 | undefined |        ✓         | read file in default encoding; write file in `overwriteEncoding` |\r\n     * | 3 |     ✓    |     undefined     | read & write file in `encoding` |\r\n     * | 4 |     ✓    |        ✓         | read file in `encoding`; write file in `overwriteEncoding` |\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.write` instead\r\n     */\r\n    updateContent(file: FileStat, contentChanges: TextDocumentContentChangeEvent[], options?: { encoding?: string, overwriteEncoding?: string }): Promise<FileStat>;\r\n\r\n    /**\r\n     * Moves the file to a new path identified by the resource.\r\n     *\r\n     * The optional parameter overwrite can be set to replace an existing file at the location.\r\n     *\r\n     * |           | missing | file | empty dir |    dir    |\r\n     * |-----------|---------|------|-----------|-----------|\r\n     * | missing   |    x    |   x  |     x     |     x     |\r\n     * | file      |    ✓    |   x  |     x     |     x     |\r\n     * | empty dir |    ✓    |   x  |     x     | overwrite |\r\n     * | dir       |    ✓    |   x  | overwrite | overwrite |\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.move` instead\r\n     */\r\n    move(sourceUri: string, targetUri: string, options?: FileMoveOptions): Promise<FileStat>;\r\n\r\n    /**\r\n     * Copies the file to a path identified by the resource.\r\n     *\r\n     * The optional parameter overwrite can be set to replace an existing file at the location.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.copy` instead\r\n     */\r\n    copy(sourceUri: string, targetUri: string, options?: { overwrite?: boolean, recursive?: boolean }): Promise<FileStat>;\r\n\r\n    /**\r\n     * Creates a new file with the given path. The returned promise\r\n     * will have the stat model object as a result.\r\n     *\r\n     * The optional parameter content can be used as value to fill into the new file.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.create` instead\r\n     */\r\n    createFile(uri: string, options?: { content?: string, encoding?: string }): Promise<FileStat>;\r\n\r\n    /**\r\n     * Creates a new folder with the given path. The returned promise\r\n     * will have the stat model object as a result.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.createFolder` instead\r\n     */\r\n    createFolder(uri: string): Promise<FileStat>;\r\n\r\n    /**\r\n     * Creates a new empty file if the given path does not exist and otherwise\r\n     * will set the mtime and atime of the file to the current date.\r\n     */\r\n    touchFile(uri: string): Promise<FileStat>;\r\n\r\n    /**\r\n     * Deletes the provided file. The optional moveToTrash parameter allows to\r\n     * move the file to trash.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.delete` instead\r\n     */\r\n    delete(uri: string, options?: FileDeleteOptions): Promise<void>;\r\n\r\n    /**\r\n     * Returns the encoding of the given file resource.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908) use `FileService.read` without `autoGuessEncoding` option instead\r\n     */\r\n    getEncoding(uri: string): Promise<string>;\r\n\r\n    /**\r\n     * Guess encoding of a given file based on its content.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.read` with `autoGuessEncoding` option instead\r\n     */\r\n    guessEncoding(uri: string): Promise<string | undefined>;\r\n\r\n    /**\r\n     * Return list of available roots.\r\n     */\r\n    getRoots(): Promise<FileStat[]>;\r\n\r\n    /**\r\n     * Returns a promise that resolves to a file stat representing the current user's home directory.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `EnvVariablesServer.getHomeDirUri` instead\r\n     */\r\n    getCurrentUserHome(): Promise<FileStat | undefined>;\r\n\r\n    /**\r\n     * Resolves to an array of URIs pointing to the available drives on the filesystem.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `EnvVariablesServer.getDrives` instead\r\n     */\r\n    getDrives(): Promise<string[]>;\r\n\r\n    /**\r\n     * Tests a user's permissions for the file or directory specified by URI.\r\n     * The mode argument is an optional integer that specifies the accessibility checks to be performed.\r\n     * Check `FileAccess.Constants` for possible values of mode.\r\n     * It is possible to create a mask consisting of the bitwise `OR` of two or more values (e.g. FileAccess.Constants.W_OK | FileAccess.Constants.R_OK).\r\n     * If `mode` is not defined, `FileAccess.Constants.F_OK` will be used instead.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.access` instead\r\n     */\r\n    access(uri: string, mode?: number): Promise<boolean>\r\n\r\n    /**\r\n     * Returns the path of the given file URI, specific to the backend's operating system.\r\n     * If the URI is not a file URI, undefined is returned.\r\n     *\r\n     * USE WITH CAUTION: You should always prefer URIs to paths if possible, as they are\r\n     * portable and platform independent. Paths should only be used in cases you directly\r\n     * interact with the OS, e.g. when running a command on the shell.\r\n     *\r\n     * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.fsPath` instead\r\n     */\r\n    getFsPath(uri: string): Promise<string | undefined>\r\n}\r\n\r\n/**\r\n * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileService.access` instead\r\n */\r\nexport namespace FileAccess {\r\n\r\n    export namespace Constants {\r\n\r\n        /**\r\n         * Flag indicating that the file is visible to the calling process.\r\n         * This is useful for determining if a file exists, but says nothing about rwx permissions. Default if no mode is specified.\r\n         */\r\n        export const F_OK: number = 0;\r\n\r\n        /**\r\n         * Flag indicating that the file can be read by the calling process.\r\n         */\r\n        export const R_OK: number = 4;\r\n\r\n        /**\r\n         * Flag indicating that the file can be written by the calling process.\r\n         */\r\n        export const W_OK: number = 2;\r\n\r\n        /**\r\n         * Flag indicating that the file can be executed by the calling process.\r\n         * This has no effect on Windows (will behave like `FileAccess.F_OK`).\r\n         */\r\n        export const X_OK: number = 1;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport interface FileMoveOptions {\r\n    overwrite?: boolean;\r\n}\r\n\r\nexport interface FileDeleteOptions {\r\n    moveToTrash?: boolean\r\n}\r\n\r\n/**\r\n * A file resource with meta information.\r\n *\r\n * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileStat` from `@tart/filesystem/lib/common/files` instead\r\n */\r\nexport interface FileStat {\r\n\r\n    /**\r\n     * The URI of the file.\r\n     */\r\n    uri: string;\r\n\r\n    /**\r\n     * The last modification of this file.\r\n     */\r\n    lastModification: number;\r\n\r\n    /**\r\n     * `true` if the resource is a directory. Otherwise, `false`.\r\n     */\r\n    isDirectory: boolean;\r\n\r\n    /**\r\n     * The children of the file stat.\r\n     * If it is `undefined` and `isDirectory` is `true`, then this file stat is unresolved.\r\n     */\r\n    children?: FileStat[];\r\n\r\n    /**\r\n     * The size of the file if known.\r\n     */\r\n    size?: number;\r\n\r\n}\r\n\r\nexport namespace FileStat {\r\n    export function is(candidate: Object | undefined): candidate is FileStat {\r\n        return typeof candidate === 'object' && ('uri' in candidate) && ('lastModification' in candidate) && ('isDirectory' in candidate);\r\n    }\r\n\r\n    export function equals(one: object | undefined, other: object | undefined): boolean {\r\n        if (!one || !other || !is(one) || !is(other)) {\r\n            return false;\r\n        }\r\n        return one.uri === other.uri\r\n            && one.lastModification === other.lastModification\r\n            && one.isDirectory === other.isDirectory;\r\n    }\r\n}\r\n\r\n/**\r\n * @deprecated since 1.4.0 - in order to support VS Code FS API (https://github.com/eclipse-tart/tart/pull/7908), use `FileOperationError` instead\r\n */\r\nexport namespace FileSystemError {\r\n    export const FileNotFound = ApplicationError.declare(-33000, (uri: string, prefix?: string) => ({\r\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' has not been found.`,\r\n        data: {uri}\r\n    }));\r\n    export const FileExists = ApplicationError.declare(-33001, (uri: string, prefix?: string) => ({\r\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' already exists.`,\r\n        data: {uri}\r\n    }));\r\n    export const FileIsDirectory = ApplicationError.declare(-33002, (uri: string, prefix?: string) => ({\r\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' is a directory.`,\r\n        data: {uri}\r\n    }));\r\n    export const FileNotDirectory = ApplicationError.declare(-33003, (uri: string, prefix?: string) => ({\r\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' is not a directory.`,\r\n        data: {uri}\r\n    }));\r\n    export const FileIsOutOfSync = ApplicationError.declare(-33004, (file: FileStat, stat: FileStat) => ({\r\n        message: `'${file.uri}' is out of sync.`,\r\n        data: {file, stat}\r\n    }));\r\n}\r\n"]}