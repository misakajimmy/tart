{"version":3,"sources":["common/virtual-file-system-provider.ts"],"names":[],"mappings":"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","file":"../../src/common/virtual-file-system-provider.js","sourcesContent":["import {injectable, postConstruct} from 'inversify';\r\nimport {\r\n    FileChange,\r\n    FileChangeType,\r\n    FileDeleteOptions,\r\n    FileOpenOptions,\r\n    FileOverwriteOptions,\r\n    FileReadStreamOptions,\r\n    FileSystemProvider,\r\n    FileSystemProviderCapabilities,\r\n    FileType,\r\n    FileUpdateOptions,\r\n    FileUpdateResult,\r\n    FileWriteOptions,\r\n    Stat,\r\n    WatchOptions\r\n} from './files';\r\nimport {CancellationToken, Disposable, DisposableCollection, Emitter, Event} from '@tart/core/lib/common';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {newWriteableStream, ReadableStreamEvents} from '@tart/core/lib/common/stream';\r\nimport type {TextDocumentContentChangeEvent} from 'vscode-languageserver-protocol';\r\nimport {Deferred} from '@tart/core/lib/common/promise-util';\r\nimport {BinaryBuffer} from '@tart/core/lib/common/buffer';\r\nimport {\r\n    add_dir_to_pointer,\r\n    add_file_to_pointer,\r\n    FS,\r\n    get_child_list,\r\n    get_pointer,\r\n    get_root_pointer,\r\n    movePointer,\r\n    remove_pointer,\r\n    setNotifyDidChangeFile,\r\n    update_data_file_pointer\r\n} from './localstorage';\r\n\r\nconst decoder = new TextDecoder();\r\nconst encoder = new TextEncoder();\r\n\r\nexport interface VirtualFileChange {\r\n    readonly type: FileChangeType;\r\n    readonly resource: string;\r\n}\r\n\r\nexport type VirtualFileChanges = VirtualFileChange[];\r\n\r\n@injectable()\r\nexport class VirtualFileSystemProvider implements Required<FileSystemProvider>, Disposable {\r\n\r\n    private readonly onDidChangeCapabilitiesEmitter = new Emitter<void>();\r\n    readonly onDidChangeCapabilities = this.onDidChangeCapabilitiesEmitter.event;\r\n\r\n    readonly onFileWatchError: Event<void>;\r\n    protected readonly readyDeferred = new Deferred<void>();\r\n    readonly ready = this.readyDeferred.promise;\r\n    private readonly onDidChangeFileEmitter = new Emitter<readonly FileChange[]>();\r\n    readonly onDidChangeFile = this.onDidChangeFileEmitter.event;\r\n    protected readonly toDispose = new DisposableCollection(\r\n        this.onDidChangeFileEmitter,\r\n    );\r\n\r\n    private _capabilities: FileSystemProviderCapabilities = 0;\r\n\r\n    get capabilities(): FileSystemProviderCapabilities {\r\n        return this._capabilities;\r\n    }\r\n\r\n    private _root: FS.Directory;\r\n\r\n    private get root() {\r\n        this._root = get_root_pointer();\r\n        return this._root;\r\n    }\r\n\r\n    access(resource: URI, mode: number | undefined): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    close(fd: number): Promise<void> {\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    copy(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> {\r\n        // console.log('copy');\r\n        const pointer = get_pointer(this.root, from.path.toString());\r\n        if (pointer.type === FS.Type.file) {\r\n            this.writeFile(to, encoder.encode(pointer.data().toString()), {overwrite: true, create: true});\r\n        } else if (pointer.type === FS.Type.directory) {\r\n        }\r\n\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    delete(resource: URI, opts: FileDeleteOptions): Promise<void> {\r\n        let pointer = get_pointer(this.root, resource.path.toString());\r\n        if (pointer !== undefined) {\r\n            remove_pointer(pointer, resource.toString());\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    fsPath(resource: URI): Promise<string> {\r\n        return Promise.resolve('');\r\n    }\r\n\r\n    mkdir(resource: URI): Promise<void> {\r\n        // console.log('mkdir');\r\n        let pointer = get_pointer(this.root, resource.path.toString());\r\n        switch (pointer.type) {\r\n            case FS.Type.error:\r\n                pointer = get_pointer(this.root, resource.path.toString().split('/').slice(0, -1).join('/'));\r\n                if (pointer !== undefined && pointer.type !== FS.Type.error) {\r\n                    add_dir_to_pointer(pointer, resource.path.name, '', resource.toString());\r\n                }\r\n                break;\r\n            case FS.Type.file:\r\n                break;\r\n            case FS.Type.directory:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    open(resource: URI, opts: FileOpenOptions): Promise<number> {\r\n        // console.log('open')\r\n        return Promise.resolve(0);\r\n    }\r\n\r\n    read(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\r\n        // console.log('read');\r\n        return Promise.resolve(0);\r\n    }\r\n\r\n    readFile(resource: URI): Promise<Uint8Array> {\r\n        // console.log('readFile');\r\n        const pointer = get_pointer(this.root, resource.path.toString());\r\n        if (pointer.type === FS.Type.file) {\r\n            return Promise.resolve(encoder.encode(pointer.data().toString()));\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    readFileStream(resource: URI, opts: FileReadStreamOptions, token: CancellationToken): Promise<ReadableStreamEvents<Uint8Array>> {\r\n        const pointer = get_pointer(this.root, resource.path.toString());\r\n        const stream = newWriteableStream<Uint8Array>(data => BinaryBuffer.concat(data.map(data => BinaryBuffer.wrap(data))).buffer);\r\n        if (pointer !== undefined && pointer.type !== FS.Type.error) {\r\n            stream.write(new TextEncoder().encode(pointer.data().toString()));\r\n        }\r\n        stream.end();\r\n        return Promise.resolve(stream);\r\n    }\r\n\r\n    readdir(resource: URI): Promise<[string, FileType][]> {\r\n        const result = get_pointer(this.root, resource.path.toString());\r\n\r\n        return Promise.resolve(result.type === FS.Type.directory ?\r\n            get_child_list(result).map((c) => [c.name, c.type === FS.Type.file ? FileType.File : FileType.Directory]) : []);\r\n    }\r\n\r\n    rename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void> {\r\n        const fileName = to.path.toString().split('/').pop();\r\n        const pointer = get_pointer(this.root, from.path.toString());\r\n        const toPointer = get_pointer(this.root, to.path.toString().slice(0, -(fileName.length + 1)));\r\n\r\n        if (pointer.type !== FS.Type.error) {\r\n            movePointer(pointer, toPointer, fileName, to.toString());\r\n        }\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    stat(resource: URI): Promise<Stat> {\r\n        // console.log(resource);\r\n        // console.log(this.getStat(resource));\r\n        return Promise.resolve(this.getStat(resource));\r\n    }\r\n\r\n    updateFile(resource: URI, changes: TextDocumentContentChangeEvent[], opts: FileUpdateOptions): Promise<FileUpdateResult> {\r\n        return Promise.resolve({\r\n            ...this.getStat(resource),\r\n            encoding: 'utf8'\r\n        });\r\n    }\r\n\r\n    watch(resource: URI, opts: WatchOptions): Disposable {\r\n        return undefined;\r\n    }\r\n\r\n    write(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\r\n        // console.log('write');\r\n        return Promise.resolve(0);\r\n    }\r\n\r\n    writeFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void> {\r\n        // console.log('write file');\r\n        let pointer = get_pointer(this.root, resource.path.toString());\r\n        switch (pointer.type) {\r\n            case FS.Type.error:\r\n                pointer = get_pointer(this.root, resource.path.toString().split('/').slice(0, -1).join('/'));\r\n                if (pointer !== undefined && pointer.type !== FS.Type.error) {\r\n                    add_file_to_pointer(\r\n                        pointer,\r\n                        resource.toString().split('/').slice(-1),\r\n                        decoder.decode(content),\r\n                        resource.toString()\r\n                    );\r\n                }\r\n                break;\r\n            case FS.Type.file:\r\n                update_data_file_pointer(pointer, decoder.decode(content));\r\n                break;\r\n            case FS.Type.directory:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    dispose(): void {\r\n    }\r\n\r\n    @postConstruct()\r\n    protected init(): void {\r\n        this._capabilities = 16781342;\r\n        setNotifyDidChangeFile(({changes}) => {\r\n            this.onDidChangeFileEmitter.fire(changes.map(event => ({\r\n                resource: new URI(event.resource),\r\n                type: event.type\r\n            })));\r\n        });\r\n        this.readyDeferred.resolve();\r\n        this._root = get_root_pointer();\r\n    }\r\n\r\n    private getStat(resource: URI): Stat {\r\n        const result = get_pointer(this.root, resource.path.toString());\r\n        return result.type === FS.Type.error ? undefined :\r\n            result.type === FS.Type.file ? {\r\n                ctime: 1637652983302,\r\n                mtime: 1639099297702,\r\n                size: 148,\r\n                type: FileType.File,\r\n            } : {\r\n                ctime: 1637652983302,\r\n                mtime: 1639099297702,\r\n                size: 148,\r\n                type: FileType.Directory,\r\n            };\r\n    }\r\n\r\n}\r\n"]}