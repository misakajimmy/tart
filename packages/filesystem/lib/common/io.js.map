{"version":3,"sources":["common/io.ts"],"names":[],"mappings":"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","file":"../../src/common/io.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2020 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/platform/files/common/io.ts\r\n\r\n/* eslint-disable max-len */\r\n\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {BinaryBuffer} from '@tart/core/lib/common//buffer';\r\nimport {CancellationToken, cancelled as canceled} from '@tart/core/lib/common/cancellation';\r\nimport {\r\n    createFileSystemProviderError,\r\n    ensureFileSystemProviderError,\r\n    FileReadStreamOptions,\r\n    FileSystemProviderErrorCode,\r\n    FileSystemProviderWithOpenReadWriteCloseCapability\r\n} from './files';\r\nimport {DataTransformer, ErrorTransformer, WriteableStream} from '@tart/core/lib/common/stream';\r\n\r\nexport interface CreateReadStreamOptions extends FileReadStreamOptions {\r\n\r\n    /**\r\n     * The size of the buffer to use before sending to the stream.\r\n     */\r\n    bufferSize: number;\r\n\r\n    /**\r\n     * Allows to massage any possibly error that happens during reading.\r\n     */\r\n    errorTransformer?: ErrorTransformer;\r\n}\r\n\r\n/**\r\n * A helper to read a file from a provider with open/read/close capability into a stream.\r\n */\r\nexport async function readFileIntoStream<T>(\r\n    provider: FileSystemProviderWithOpenReadWriteCloseCapability,\r\n    resource: URI,\r\n    target: WriteableStream<T>,\r\n    transformer: DataTransformer<BinaryBuffer, T>,\r\n    options: CreateReadStreamOptions,\r\n    token: CancellationToken\r\n): Promise<void> {\r\n    let error: Error | undefined = undefined;\r\n\r\n    try {\r\n        await doReadFileIntoStream(provider, resource, target, transformer, options, token);\r\n    } catch (err) {\r\n        error = err;\r\n    } finally {\r\n        if (error && options.errorTransformer) {\r\n            error = options.errorTransformer(error);\r\n        }\r\n\r\n        target.end(error);\r\n    }\r\n}\r\n\r\nasync function doReadFileIntoStream<T>(provider: FileSystemProviderWithOpenReadWriteCloseCapability, resource: URI, target: WriteableStream<T>, transformer: DataTransformer<BinaryBuffer, T>, options: CreateReadStreamOptions, token: CancellationToken): Promise<void> {\r\n\r\n    // Check for cancellation\r\n    throwIfCancelled(token);\r\n\r\n    // open handle through provider\r\n    const handle = await provider.open(resource, {create: false});\r\n\r\n    // Check for cancellation\r\n    throwIfCancelled(token);\r\n\r\n    try {\r\n        let totalBytesRead = 0;\r\n        let bytesRead = 0;\r\n        let allowedRemainingBytes = (options && typeof options.length === 'number') ? options.length : undefined;\r\n\r\n        let buffer = BinaryBuffer.alloc(Math.min(options.bufferSize, typeof allowedRemainingBytes === 'number' ? allowedRemainingBytes : options.bufferSize));\r\n\r\n        let posInFile = options && typeof options.position === 'number' ? options.position : 0;\r\n        let posInBuffer = 0;\r\n        do {\r\n            // read from source (handle) at current position (pos) into buffer (buffer) at\r\n            // buffer position (posInBuffer) up to the size of the buffer (buffer.byteLength).\r\n            bytesRead = await provider.read(handle, posInFile, buffer.buffer, posInBuffer, buffer.byteLength - posInBuffer);\r\n\r\n            posInFile += bytesRead;\r\n            posInBuffer += bytesRead;\r\n            totalBytesRead += bytesRead;\r\n\r\n            if (typeof allowedRemainingBytes === 'number') {\r\n                allowedRemainingBytes -= bytesRead;\r\n            }\r\n\r\n            // when buffer full, create a new one and emit it through stream\r\n            if (posInBuffer === buffer.byteLength) {\r\n                await target.write(transformer(buffer));\r\n\r\n                buffer = BinaryBuffer.alloc(Math.min(options.bufferSize, typeof allowedRemainingBytes === 'number' ? allowedRemainingBytes : options.bufferSize));\r\n\r\n                posInBuffer = 0;\r\n            }\r\n        } while (bytesRead > 0 && (typeof allowedRemainingBytes !== 'number' || allowedRemainingBytes > 0) && throwIfCancelled(token) && throwIfTooLarge(totalBytesRead, options));\r\n\r\n        // wrap up with last buffer (also respect maxBytes if provided)\r\n        if (posInBuffer > 0) {\r\n            let lastChunkLength = posInBuffer;\r\n            if (typeof allowedRemainingBytes === 'number') {\r\n                lastChunkLength = Math.min(posInBuffer, allowedRemainingBytes);\r\n            }\r\n\r\n            target.write(transformer(buffer.slice(0, lastChunkLength)));\r\n        }\r\n    } catch (error) {\r\n        throw ensureFileSystemProviderError(error);\r\n    } finally {\r\n        await provider.close(handle);\r\n    }\r\n}\r\n\r\nfunction throwIfCancelled(token: CancellationToken): boolean {\r\n    if (token.isCancellationRequested) {\r\n        throw canceled();\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction throwIfTooLarge(totalBytesRead: number, options: CreateReadStreamOptions): boolean {\r\n\r\n    // Return early if file is too large to load and we have configured limits\r\n    if (options?.limits) {\r\n        if (typeof options.limits.memory === 'number' && totalBytesRead > options.limits.memory) {\r\n            throw createFileSystemProviderError('To open a file of this size, you need to restart and allow it to use more memory', FileSystemProviderErrorCode.FileExceedsMemoryLimit);\r\n        }\r\n\r\n        if (typeof options.limits.size === 'number' && totalBytesRead > options.limits.size) {\r\n            throw createFileSystemProviderError('File is too large to open', FileSystemProviderErrorCode.FileTooLarge);\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n"]}