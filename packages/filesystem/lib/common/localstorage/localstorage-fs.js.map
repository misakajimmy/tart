{"version":3,"sources":["common/localstorage/localstorage-fs.ts"],"names":[],"mappings":"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","file":"../../../src/common/localstorage/localstorage-fs.js","sourcesContent":["// key used to access the localStorage\r\n\r\nconst fs_key = \"local-fs\";\r\n\r\n// check if localStorage entry exists\r\n// and correctly initialized with root directory\r\nconst check_fs = (): boolean => {\r\n    if (localStorage.getItem(fs_key) === null) return false;\r\n    let root = read_directory(0);\r\n    if (root === undefined) {\r\n        return false;\r\n    }\r\n    if (!(root.type == LocalStorage.Type.directory && (root as LocalStorage.Directory).name == \"/\")) return false;\r\n\r\n    return true;\r\n};\r\n\r\n// initialize the fs\r\n// if fs does not exist, add localStorage entry and add root directory.\r\nexport const init_fs = () => {\r\n    if (!check_fs()) {\r\n        let rootDir = new_directory(\"/\", 0, {\r\n            // parent of root = root\r\n            type: LocalStorage.Type.directory,\r\n            name: \"/\",\r\n            createAt: new Date(),\r\n        });\r\n        write_directory(0, rootDir);\r\n    }\r\n};\r\n\r\n// clear out the fs\r\nconst clear_fs = () => {\r\n    localStorage.removeItem(fs_key);\r\n    init_fs();\r\n};\r\n\r\n// load the file array from localStorage\r\nexport const load_fs = (): any => {\r\n    return JSON.parse(localStorage.getItem(fs_key)) || [];\r\n};\r\n\r\n// store the given file arrya to localStorage\r\nconst store_fs = (fsList: LocalStorage.FsList) => {\r\n    return localStorage.setItem(fs_key, JSON.stringify(fsList));\r\n};\r\n\r\n// get_new_id: finding new array index for allocation\r\n// tries to find first empty cell,\r\n// if such cell does not exist, the array is extended\r\nexport const get_new_id = (): LocalStorage.Id => {\r\n    const fsList = load_fs();\r\n    for (let i = 0; i < fsList.length; i++) {\r\n        if (fsList[i] == undefined) {\r\n            // empty element is undefined\r\n            return i;\r\n        }\r\n    }\r\n    return fsList.length; // else, return the length\r\n};\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// Default object constructors of file / directory\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n// default constructor for file object\r\n// name: string, parent: id of parent dir, data: object\r\nexport const new_file = (\r\n    name: string,\r\n    parent: LocalStorage.Parent,\r\n    data: LocalStorage.Data,\r\n): LocalStorage.File => {\r\n    return {\r\n        type: LocalStorage.Type.file,\r\n        name: name,\r\n        parent: parent,\r\n        data: data,\r\n    };\r\n};\r\n\r\n// default constructor for directory\r\n// name: string, parent: id of parent dir,\r\n// children: array of id of children file / directory\r\nexport const new_directory = (\r\n    name: string,\r\n    parent: LocalStorage.Parent,\r\n    data: LocalStorage.Data,\r\n): LocalStorage.Directory => {\r\n    return {\r\n        type: LocalStorage.Type.directory,\r\n        name: name,\r\n        parent: parent,\r\n        children: [],\r\n        data: data,\r\n    };\r\n};\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// atomic fs access functions\r\n////////////////////////////////////////////////////////////////////////////////\r\nconst NotFileError = new Error(\"Not a file\");\r\nconst NotDirectoryError = new Error(\"Not a directory\");\r\nconst NotExistError = new Error(\"Not exist\");\r\nconst AlreadyExistError = new Error(\"Already exist\");\r\n\r\n// Implementation Detail\r\n// each funciton start with load_fs, end with store_fs, each exactly once\r\n// (except read functions)\r\n// think fsList as \"cache\" of the actual fs inside the localStorage\r\n\r\n// return file type at id\r\nexport const get_fs_type = (\r\n    id: LocalStorage.Id\r\n): LocalStorage.Type | LocalStorage.Error => {\r\n    let fsList = load_fs();\r\n    let loaded = fsList[id] || {type: LocalStorage.Type.error};\r\n    return loaded.type;\r\n};\r\n\r\n// return file at id\r\nexport const read_file = (\r\n    id: LocalStorage.Id\r\n): LocalStorage.File | undefined => {\r\n    let fsList = load_fs();\r\n    let loaded = fsList[id] || {type: LocalStorage.Type.error};\r\n    if (loaded.type != LocalStorage.Type.file) {\r\n        return undefined;\r\n    }\r\n    return loaded;\r\n};\r\n\r\n// return directory at id\r\nexport const read_directory = (\r\n    id: LocalStorage.Id\r\n): LocalStorage.Directory | undefined => {\r\n    let fsList = load_fs();\r\n    let loaded = fsList[id] || {type: LocalStorage.Type.error};\r\n    if (loaded.type != LocalStorage.Type.directory) {\r\n        return undefined;\r\n    }\r\n    return loaded as LocalStorage.Directory;\r\n};\r\n\r\n// write a file at id\r\nexport const write_file = (\r\n    id: LocalStorage.Id,\r\n    file: LocalStorage.File\r\n) => {\r\n    if (file.type != LocalStorage.Type.file) {\r\n        throw NotFileError;\r\n    }\r\n    let fsList = load_fs();\r\n    fsList[id] = file;\r\n    store_fs(fsList);\r\n};\r\n\r\n// write file, but only changing data\r\nexport const write_file_data = (\r\n    id: LocalStorage.Id,\r\n    data: LocalStorage.Data,\r\n) => {\r\n    let fsList = load_fs();\r\n    let file = fsList[id] || {type: LocalStorage.Type.error};\r\n    if (file.type != LocalStorage.Type.file) {\r\n        throw NotFileError;\r\n    }\r\n    file.data = data;\r\n    store_fs(fsList);\r\n};\r\n\r\n// write directory at id\r\nexport const write_directory = (\r\n    id: LocalStorage.Id,\r\n    directory: LocalStorage.Directory\r\n) => {\r\n    if (directory.type != LocalStorage.Type.directory) {\r\n        throw NotDirectoryError;\r\n    }\r\n    let fsList = load_fs();\r\n    fsList[id] = directory;\r\n    store_fs(fsList);\r\n};\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// adding new files / directories under directory\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n// add file to directory at id\r\n// also assigns new id to file\r\n// return id of new file\r\nexport const add_file_to_dir = (\r\n    id: LocalStorage.Id,\r\n    new_file: LocalStorage.File\r\n): LocalStorage.Id => {\r\n    let fsList = load_fs();\r\n    // check directory\r\n    let dir = fsList[id] || {type: LocalStorage.Type.error};\r\n    if (dir.type != LocalStorage.Type.directory) {\r\n        throw NotDirectoryError;\r\n    }\r\n    let new_id = get_new_id();\r\n    fsList[new_id] = new_file;\r\n    (dir as LocalStorage.Directory).children.push(new_id);\r\n    store_fs(fsList);\r\n    return new_id;\r\n};\r\n\r\n// add directory to directory at id\r\n// also assigns new id to file\r\n// return id of new dir\r\nexport const add_dir_to_dir = (\r\n    id: LocalStorage.Id,\r\n    new_dir: LocalStorage.Directory\r\n): LocalStorage.Id => {\r\n    let fsList = load_fs();\r\n    let dir = fsList[id] || {type: LocalStorage.Type.error};\r\n    if (dir.type != LocalStorage.Type.directory) {\r\n        throw NotDirectoryError;\r\n    }\r\n    let new_id = get_new_id();\r\n    fsList[new_id] = new_dir;\r\n    (dir as LocalStorage.Directory).children.push(new_id);\r\n    store_fs(fsList);\r\n    return new_id;\r\n};\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// remove file at id\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const remove_file = (\r\n    id: LocalStorage.Id,\r\n    temp_ls: LocalStorage.FsList\r\n): LocalStorage.FsList => {\r\n\r\n    let deleted_temp_ls = temp_ls\r\n\r\n    let file = temp_ls[id] || {type: LocalStorage.Type.error};\r\n    if (file.type != LocalStorage.Type.file) {\r\n        throw NotFileError;\r\n    }\r\n    // 1) delete link to this child from parent\r\n    let parent = temp_ls[file.parent] || {type: LocalStorage.Type.error};\r\n    if (parent.type != LocalStorage.Type.directory) {\r\n        throw NotDirectoryError;\r\n    }\r\n    parent.children = parent.children.filter((child) => child != id);\r\n    // 2) actually delete\r\n    delete deleted_temp_ls[id];\r\n    store_fs(deleted_temp_ls);\r\n    return deleted_temp_ls\r\n};\r\n\r\nexport const rename_dir = (\r\n    id: LocalStorage.Id,\r\n    newName: string\r\n): LocalStorage.Id => {\r\n    let fsList = load_fs();\r\n    fsList[id].name = newName;\r\n    store_fs(fsList);\r\n    return id;\r\n};\r\n\r\nexport const move_dir = (\r\n    id: LocalStorage.Id,\r\n    parent: LocalStorage.Id,\r\n): LocalStorage.Id => {\r\n    let fsList = load_fs();\r\n    if (fsList[fsList[id].parent].children !== undefined) {\r\n        fsList[fsList[id].parent].children = fsList[fsList[id].parent].children.filter(child => child !== id);\r\n    }\r\n    fsList[id].parent = parent;\r\n    if (fsList[parent].children !== undefined) {\r\n        fsList[parent].children.push(id);\r\n    }\r\n    store_fs(fsList);\r\n    return id;\r\n}\r\n\r\n// remove directory at id\r\nexport const remove_directory = (\r\n    id: LocalStorage.Id,\r\n    temp_ls: LocalStorage.FsList\r\n): LocalStorage.FsList => {\r\n\r\n    let deleted_temp_ls = temp_ls\r\n    let directory = temp_ls[id] || {type: LocalStorage.Type.error};\r\n    if (directory.type != LocalStorage.Type.directory) {\r\n        throw NotDirectoryError;\r\n    }\r\n    let parent = temp_ls[directory.parent] || {type: LocalStorage.Type.error};\r\n    if (parent.type != LocalStorage.Type.directory) {\r\n        throw NotDirectoryError;\r\n    }\r\n    parent.children = parent.children.filter((child) => child != id);\r\n    // recursively delete all children\r\n\r\n    (directory as LocalStorage.Directory).children.forEach((child) => {\r\n        if (temp_ls[child].type == LocalStorage.Type.file) {\r\n            deleted_temp_ls = remove_file(child, temp_ls);\r\n        } else if (temp_ls[child].type == LocalStorage.Type.directory) {\r\n            deleted_temp_ls = remove_directory(child, temp_ls);\r\n        }\r\n    });\r\n    // finally delete the directory\r\n\r\n    delete deleted_temp_ls[id];\r\n\r\n    store_fs(deleted_temp_ls);\r\n    return deleted_temp_ls\r\n};\r\n\r\nexport namespace LocalStorage {\r\n    export type Id = number;\r\n\r\n    export enum Type {\r\n        file,\r\n        directory,\r\n        error,\r\n    }\r\n\r\n    export type Parent = number;\r\n    export type Children = Directory | File;\r\n    export type Data = string | object;\r\n\r\n    export type FsList = Children[];\r\n\r\n    export type File = {\r\n        type: Type.file,\r\n        name: string,\r\n        parent: Parent,\r\n        data: Data,\r\n    }\r\n\r\n    export type Directory = {\r\n        type: Type.directory,\r\n        name: string,\r\n        parent: Parent,\r\n        children: Id[]\r\n        data: Data,\r\n    }\r\n\r\n    export interface Error {\r\n        type: Type.error,\r\n    }\r\n}\r\n"]}