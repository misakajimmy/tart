{"version":3,"sources":["common/localstorage/fs-pointer.ts"],"names":[],"mappings":"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","file":"../../../src/common/localstorage/fs-pointer.js","sourcesContent":["import * as lfs from \"./localstorage-fs\";\r\nimport {LocalStorage, move_dir, rename_dir} from \"./localstorage-fs\";\r\nimport {FileChangeType} from '../files';\r\n\r\nlet notifyDidChangeFile: ({changes: any}) => any;\r\n\r\n/*\r\n *  fsPointer\r\n *  provides safe wrapper of fs access functions\r\n *  instead of directly working with id, use fsPointer and helper functions.\r\n */\r\nexport const fsPointer = (\r\n    id: LocalStorage.Id,\r\n): FS.FsPointer => {\r\n    try {\r\n        const ty = lfs.get_fs_type(id); // get file type\r\n        // 1) file case\r\n        if (ty == LocalStorage.Type.file) {\r\n            const file = lfs.read_file(id);\r\n            return {\r\n                type: LocalStorage.Type.file,\r\n                name: file.name,\r\n                id: id,\r\n                parent: () => fsPointer(file.parent),\r\n                children: () => {\r\n                    return {type: LocalStorage.Type.error, msg: \"file has no children\"};\r\n                },\r\n                files: () => {\r\n                    return {type: LocalStorage.Type.error, msg: \"file has no subfiles\"};\r\n                },\r\n                dirs: () => {\r\n                    return {type: LocalStorage.Type.error, msg: \"file has no subdirs\"};\r\n                },\r\n                data: () => file.data,\r\n                // TODO : safer access to this file\r\n                raw: file,\r\n            };\r\n        }\r\n        // 2) directory case\r\n        else if (ty == LocalStorage.Type.directory) {\r\n            const dir = lfs.read_directory(id);\r\n            return {\r\n                type: LocalStorage.Type.directory,\r\n                name: dir.name,\r\n                id: id,\r\n                parent: () => fsPointer(dir.parent),\r\n                children: () => {\r\n                    return dir.children.map((child) => fsPointer(child));\r\n                },\r\n                files: () => {\r\n                    return dir.children\r\n                        .filter((child) => lfs.get_fs_type(child) == LocalStorage.Type.file)\r\n                        .map((child) => fsPointer(child)) as FS.File[];\r\n                },\r\n                dirs: () => {\r\n                    return dir.children\r\n                        .filter((child) => lfs.get_fs_type(child) == LocalStorage.Type.directory)\r\n                        .map((child) => fsPointer(child)) as FS.Directory[];\r\n                },\r\n                // TODO : safer access to this dir\r\n                raw: dir,\r\n                data: () => dir.data,\r\n            };\r\n        }\r\n    } catch (e) {\r\n        // 3) error case\r\n        return {\r\n            type: LocalStorage.Type.error,\r\n            msg: e.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const movePointer = (\r\n    from: FS.FsPointer,\r\n    to: FS.FsPointer,\r\n    name: string,\r\n    resource: any,\r\n) => {\r\n    if (from.type !== FS.Type.error && to.type !== FS.Type.error) {\r\n        move_dir(from.id, to.id);\r\n        rename_dir(from.id, name);\r\n        notifyDidChangeFile({changes: [{event: FileChangeType.UPDATED, resource: resource}]})\r\n    }\r\n}\r\n\r\nexport const setNotifyDidChangeFile = (change: ({changes: any}) => any) => {\r\n    notifyDidChangeFile = change;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// fsPointer methods\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n// get the root pointer\r\nexport const get_root_pointer = (): FS.Directory => {\r\n    lfs.init_fs();\r\n    return fsPointer(0) as FS.Directory; // root directory always reside in index 0\r\n};\r\n\r\n// error pointer\r\nconst error_pointer = (\r\n    msg: string\r\n): FS.Error => {\r\n    return {\r\n        type: FS.Type.error,\r\n        msg: msg,\r\n    };\r\n};\r\n\r\nconst check_error = (fp: FS.FsPointer): boolean => {\r\n    return (fp.type !== FS.Type.error);\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// getters\r\n////////////////////////////////////////////////////////////////////////////////\r\nexport const get_file_list = (\r\n    fp: FS.FsPointer\r\n): FS.File[] => {\r\n    if (fp.type === FS.Type.directory) {\r\n        return fp.files();\r\n    } else {\r\n        return [];\r\n    }\r\n};\r\n\r\n// getters for dir list\r\nexport const get_dir_list = (\r\n    fp: FS.FsPointer\r\n): FS.Directory[] => {\r\n    if (fp.type === FS.Type.directory) {\r\n        return fp.dirs();\r\n    } else {\r\n        return [];\r\n    }\r\n};\r\n\r\n// given a pointer, get the file pointer given name\r\nexport const child_file_pointer = (fp, name) => {\r\n    if (fp.type != LocalStorage.Type.directory) return error_pointer(\"not a dir pointer\");\r\n    if (fp.dirs().filter((p) => p.name == name).length > 0)\r\n        return error_pointer(\"given name is dir\");\r\n    return fp.files().filter((p) => p.name == name)[0];\r\n};\r\n\r\n// given a pointer, get the dir pointer given name\r\nexport const child_dir_pointer = (fp, name) => {\r\n    if (fp.type != LocalStorage.Type.directory) return error_pointer(\"not a dir pointer\");\r\n    if (fp.files().filter((p) => p.name == name).length > 0)\r\n        return error_pointer(\"given name is file\");\r\n    return fp.dirs().filter((p) => p.name == name)[0];\r\n};\r\n\r\n// given a pointer, get the parent dir pointer\r\nexport const parent_dir_pointer = (fp) => {\r\n    return fp.parent();\r\n};\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// modifier fns\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n// add file to given dir pointer\r\nexport const add_file_to_pointer = (fp, filename, filedata, resource) => {\r\n    if (fp.type != LocalStorage.Type.directory) return error_pointer(\"not a dir pointer\");\r\n    if (fp.files().filter((p) => p.name == filename).length > 0) {\r\n        return error_pointer(`file ${filename} already exist`);\r\n    }\r\n    let new_file = lfs.new_file(filename, fp.id, filedata);\r\n    notifyDidChangeFile({changes: [{event: FileChangeType.ADDED, resource: resource}]})\r\n    return fsPointer(lfs.add_file_to_dir(fp.id, new_file));\r\n};\r\n\r\n// add dir to given dir pointer\r\nexport const add_dir_to_pointer = (fp, dirname, dirdata, resource) => {\r\n    if (fp.type != LocalStorage.Type.directory) return error_pointer(\"not a dir pointer\");\r\n    if (fp.dirs().filter((p) => p.name == dirname).length > 0) {\r\n        return error_pointer(`dir ${dirname} already exist`);\r\n    }\r\n    let new_dir = lfs.new_directory(dirname, fp.id, dirdata);\r\n    notifyDidChangeFile({changes: [{event: FileChangeType.ADDED, resource: resource}]})\r\n    return fsPointer(lfs.add_dir_to_dir(fp.id, new_dir));\r\n};\r\n\r\n// remove file or directory of given pointer\r\nexport const remove_pointer = (fp, resource) => {\r\n\r\n    let temp_ls = lfs.load_fs()\r\n    if (fp.type == LocalStorage.Type.file) {\r\n        lfs.remove_file(fp.id, temp_ls);\r\n        notifyDidChangeFile({changes: [{event: FileChangeType.DELETED, resource: resource}]})\r\n        return true;\r\n    } else if (fp.type == LocalStorage.Type.directory) {\r\n        lfs.remove_directory(fp.id, temp_ls);\r\n        notifyDidChangeFile({changes: [{event: FileChangeType.DELETED, resource: resource}]})\r\n        return true;\r\n    } else return false; // TODO should return some id\r\n};\r\n\r\n// update file data of given pointer\r\nexport const update_data_file_pointer = (fp, filedata) => {\r\n    if (fp.type != LocalStorage.Type.file) return false;\r\n    let file = fp.raw;\r\n    file.data = filedata;\r\n    lfs.write_file(fp.id, file);\r\n    return true; // TODO more error catching and returning written file id\r\n};\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// parse the path\r\n// assume: name of file or directory does not contain \"/\" character (except root)\r\n// ex. \"/a/b/c/d\" : absolute path, root -> dir a -> dir b -> dir c -> (dir or file) d\r\n// ex. \"a/b/c/d\" : relative path, fp -> dir a -> dir b -> dir c -> (dir or file) d\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const get_path_pointer = (\r\n    fp: FS.FsPointer,\r\n    path: string\r\n): FS.FsPointer | undefined => {\r\n    if (fp.type != LocalStorage.Type.directory) return error_pointer(\"not a dir pointer\");\r\n    let splitted = path.split(\"/\");\r\n    // 1) absolute path case\r\n    if (path.startsWith(\"/\")) {\r\n        let root = get_root_pointer();\r\n        let relative_path = splitted.slice(1).join(\"/\");\r\n        return get_path_pointer(root, relative_path);\r\n    }\r\n    // 2) relative path case\r\n    else {\r\n        if (splitted.length == 1) {\r\n            let file_result = child_file_pointer(fp, splitted[0]);\r\n            if (file_result !== undefined && file_result.type == LocalStorage.Type.file) return file_result;\r\n            else {\r\n                let dir_result = child_dir_pointer(fp, splitted[0]);\r\n                if (dir_result !== undefined && dir_result.type == LocalStorage.Type.directory) return dir_result;\r\n                else return error_pointer(\"no such file or directory\");\r\n            }\r\n        } else {\r\n            let dir_result = child_dir_pointer(fp, splitted[0]);\r\n            if (dir_result !== undefined && dir_result.type == LocalStorage.Type.directory) {\r\n                return get_path_pointer(dir_result, splitted.slice(1).join(\"/\"));\r\n            } else {\r\n                return error_pointer(\"no such directory\");\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const get_pointer = (\r\n    fp: FS.FsPointer,\r\n    path: string\r\n): FS.FsPointer | undefined => {\r\n    if (path === '/' || path === '') {\r\n        return fp;\r\n    } else {\r\n        return get_path_pointer(fp, path);\r\n    }\r\n}\r\n\r\n// get the path of a pointer\r\nexport const get_pointer_path = (fp) => {\r\n    if (fp.type == LocalStorage.Type.directory && fp.name == \"/\") return \"ROOT\";\r\n    else if (fp.type == LocalStorage.Type.directory || fp.type == LocalStorage.Type.file) {\r\n        let parent_path = get_pointer_path(fp.parent());\r\n        if (parent_path == \"\") return \"\";\r\n        return parent_path + \"/\" + fp.name;\r\n    } else return \"\";\r\n};\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////Main fns for memo-localstorage //////////////////\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const get_file_data_list_by_data_predicate = (fp, predicate) => {\r\n    let targetFileDatas = fp\r\n        .files()\r\n        .filter((fp) => predicate(fp.data()))\r\n        .map((fp) => fp.data());\r\n    return targetFileDatas;\r\n};\r\n\r\nexport const get_file_data_list = (fp) => {\r\n    return get_file_data_list_by_data_predicate(fp, (m) => true);\r\n};\r\n\r\n// modifiers for file pointers\r\nexport const delete_file_by_data_predicate = (fp, predicate, resource) => {\r\n    let targetFiles = fp.files().filter((fp) => predicate(fp.data()));\r\n    if (targetFiles.length == 0) return false;\r\n    targetFiles.forEach((fp) => {\r\n        remove_pointer(fp, resource);\r\n    });\r\n    return true;\r\n};\r\nexport const delete_dir_by_data_predicate = (fp, predicate, resource) => {\r\n    let targetDirs = fp.dirs().filter((fp) => predicate(fp.data()));\r\n    if (targetDirs.length == 0) return false;\r\n    targetDirs.forEach((fp) => {\r\n        remove_pointer(fp, resource);\r\n    });\r\n    return true;\r\n};\r\n\r\n\r\nexport const modify_file_data_by_data_predicate = (fp, predicate, newData) => {\r\n    let targetFiles = fp.files().filter((fp) => predicate(fp.data()));\r\n    if (targetFiles.length != 1) return false;\r\n    update_data_file_pointer(targetFiles[0], newData);\r\n    return true;\r\n};\r\n\r\nexport const store_file_in_dir = (fp, name, data, uri) => {\r\n    add_file_to_pointer(fp, name, data, uri);\r\n};\r\n\r\nexport const reload_pointer = (fp) => {\r\n    let id = fp.id;\r\n    return fsPointer(id);\r\n};\r\n\r\n// directory related\r\nexport const get_dir_name_list = (fp) => {\r\n    return get_dir_list(fp).map((p) => p.name);\r\n};\r\n\r\nexport const get_dir_data_list = (fp) => {\r\n    return get_dir_list(fp).map((p) => p.data());\r\n};\r\n\r\nexport const store_dir_in_dir = (fp, name, data, resource) => {\r\n    add_dir_to_pointer(fp, name, data, resource);\r\n};\r\n\r\nexport const get_dir_by_name = (fp, name: string): FS.Directory | undefined => {\r\n    let resPointer = child_dir_pointer(fp, name);\r\n    if (resPointer === undefined) {\r\n        return undefined;\r\n    }\r\n    if (resPointer.type !== undefined && resPointer.type != LocalStorage.Type.directory) return fp;\r\n    else return resPointer;\r\n};\r\n\r\nexport const get_parent_dir = (fp) => {\r\n    let resPointer = parent_dir_pointer(fp);\r\n    if (resPointer.type != LocalStorage.Type.directory) return fp;\r\n    else return resPointer;\r\n};\r\n\r\nexport const get_child_list = (fp: FS.FsPointer): FS.Combine[] => {\r\n    const dirs = get_dir_list(fp);\r\n    const files = get_file_list(fp);\r\n    return [...dirs, ...files];\r\n}\r\n\r\n// export const get_file_with_path = (\r\n//     uri: URI\r\n// ): FS.Combine | undefined => {\r\n//     let root = get_root_pointer();\r\n//     console.log(root);\r\n//     if (root.type === FS.Type.error) {\r\n//         return;\r\n//     }\r\n//     let p = uri.path;\r\n//     while (p.name !== '') {\r\n//         root = get_dir_by_name(root, p.name);\r\n//         if (root === undefined) {\r\n//             return undefined;\r\n//         }\r\n//         p = p.dir;\r\n//     }\r\n//     return root;\r\n// }\r\n\r\nexport namespace FS {\r\n    export enum Type {\r\n        file,\r\n        directory,\r\n        error,\r\n    }\r\n\r\n    export type Name = string;\r\n    export type Id = LocalStorage.Id;\r\n\r\n    export type Parent = (id: Id) => {};\r\n\r\n    export type FsPointer = File | Directory | Error;\r\n    export type Combine = File | Directory;\r\n\r\n    export type File = {\r\n        type: Type.file;\r\n        name: Name;\r\n        id: Id;\r\n        parent: Parent;\r\n        children: () => Error;\r\n        files: () => Error;\r\n        dirs: () => Error;\r\n        data: () => LocalStorage.Data;\r\n        raw: LocalStorage.File;\r\n    }\r\n\r\n    export type Directory = {\r\n        type: Type.directory;\r\n        name: Name;\r\n        id: Id;\r\n        parent: Parent;\r\n        children: () => FsPointer[];\r\n        files: () => File[];\r\n        dirs: () => Directory[];\r\n        data: () => LocalStorage.Data;\r\n        raw: LocalStorage.Directory;\r\n    }\r\n\r\n    export type Error = {\r\n        type: Type.error,\r\n        msg: string,\r\n    }\r\n}\r\n"]}