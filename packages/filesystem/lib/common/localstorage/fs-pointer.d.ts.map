{"version":3,"sources":["common/localstorage/fs-pointer.ts"],"names":[],"mappings":"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","file":"../../../src/common/localstorage/fs-pointer.d.ts","sourcesContent":["import * as lfs from \"./localstorage-fs\";\r\nimport {LocalStorage, move_dir, rename_dir} from \"./localstorage-fs\";\r\nimport {FileChangeType} from '../files';\r\n\r\nlet notifyDidChangeFile: ({changes: any}) => any;\r\n\r\n/*\r\n *  fsPointer\r\n *  provides safe wrapper of fs access functions\r\n *  instead of directly working with id, use fsPointer and helper functions.\r\n */\r\nexport const fsPointer = (\r\n    id: LocalStorage.Id,\r\n): FS.FsPointer => {\r\n    try {\r\n        const ty = lfs.get_fs_type(id); // get file type\r\n        // 1) file case\r\n        if (ty == LocalStorage.Type.file) {\r\n            const file = lfs.read_file(id);\r\n            return {\r\n                type: LocalStorage.Type.file,\r\n                name: file.name,\r\n                id: id,\r\n                parent: () => fsPointer(file.parent),\r\n                children: () => {\r\n                    return {type: LocalStorage.Type.error, msg: \"file has no children\"};\r\n                },\r\n                files: () => {\r\n                    return {type: LocalStorage.Type.error, msg: \"file has no subfiles\"};\r\n                },\r\n                dirs: () => {\r\n                    return {type: LocalStorage.Type.error, msg: \"file has no subdirs\"};\r\n                },\r\n                data: () => file.data,\r\n                // TODO : safer access to this file\r\n                raw: file,\r\n            };\r\n        }\r\n        // 2) directory case\r\n        else if (ty == LocalStorage.Type.directory) {\r\n            const dir = lfs.read_directory(id);\r\n            return {\r\n                type: LocalStorage.Type.directory,\r\n                name: dir.name,\r\n                id: id,\r\n                parent: () => fsPointer(dir.parent),\r\n                children: () => {\r\n                    return dir.children.map((child) => fsPointer(child));\r\n                },\r\n                files: () => {\r\n                    return dir.children\r\n                        .filter((child) => lfs.get_fs_type(child) == LocalStorage.Type.file)\r\n                        .map((child) => fsPointer(child)) as FS.File[];\r\n                },\r\n                dirs: () => {\r\n                    return dir.children\r\n                        .filter((child) => lfs.get_fs_type(child) == LocalStorage.Type.directory)\r\n                        .map((child) => fsPointer(child)) as FS.Directory[];\r\n                },\r\n                // TODO : safer access to this dir\r\n                raw: dir,\r\n                data: () => dir.data,\r\n            };\r\n        }\r\n    } catch (e) {\r\n        // 3) error case\r\n        return {\r\n            type: LocalStorage.Type.error,\r\n            msg: e.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const movePointer = (\r\n    from: FS.FsPointer,\r\n    to: FS.FsPointer,\r\n    name: string,\r\n    resource: any,\r\n) => {\r\n    if (from.type !== FS.Type.error && to.type !== FS.Type.error) {\r\n        move_dir(from.id, to.id);\r\n        rename_dir(from.id, name);\r\n        notifyDidChangeFile({changes: [{event: FileChangeType.UPDATED, resource: resource}]})\r\n    }\r\n}\r\n\r\nexport const setNotifyDidChangeFile = (change: ({changes: any}) => any) => {\r\n    notifyDidChangeFile = change;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// fsPointer methods\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n// get the root pointer\r\nexport const get_root_pointer = (): FS.Directory => {\r\n    lfs.init_fs();\r\n    return fsPointer(0) as FS.Directory; // root directory always reside in index 0\r\n};\r\n\r\n// error pointer\r\nconst error_pointer = (\r\n    msg: string\r\n): FS.Error => {\r\n    return {\r\n        type: FS.Type.error,\r\n        msg: msg,\r\n    };\r\n};\r\n\r\nconst check_error = (fp: FS.FsPointer): boolean => {\r\n    return (fp.type !== FS.Type.error);\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// getters\r\n////////////////////////////////////////////////////////////////////////////////\r\nexport const get_file_list = (\r\n    fp: FS.FsPointer\r\n): FS.File[] => {\r\n    if (fp.type === FS.Type.directory) {\r\n        return fp.files();\r\n    } else {\r\n        return [];\r\n    }\r\n};\r\n\r\n// getters for dir list\r\nexport const get_dir_list = (\r\n    fp: FS.FsPointer\r\n): FS.Directory[] => {\r\n    if (fp.type === FS.Type.directory) {\r\n        return fp.dirs();\r\n    } else {\r\n        return [];\r\n    }\r\n};\r\n\r\n// given a pointer, get the file pointer given name\r\nexport const child_file_pointer = (fp, name) => {\r\n    if (fp.type != LocalStorage.Type.directory) return error_pointer(\"not a dir pointer\");\r\n    if (fp.dirs().filter((p) => p.name == name).length > 0)\r\n        return error_pointer(\"given name is dir\");\r\n    return fp.files().filter((p) => p.name == name)[0];\r\n};\r\n\r\n// given a pointer, get the dir pointer given name\r\nexport const child_dir_pointer = (fp, name) => {\r\n    if (fp.type != LocalStorage.Type.directory) return error_pointer(\"not a dir pointer\");\r\n    if (fp.files().filter((p) => p.name == name).length > 0)\r\n        return error_pointer(\"given name is file\");\r\n    return fp.dirs().filter((p) => p.name == name)[0];\r\n};\r\n\r\n// given a pointer, get the parent dir pointer\r\nexport const parent_dir_pointer = (fp) => {\r\n    return fp.parent();\r\n};\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// modifier fns\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n// add file to given dir pointer\r\nexport const add_file_to_pointer = (fp, filename, filedata, resource) => {\r\n    if (fp.type != LocalStorage.Type.directory) return error_pointer(\"not a dir pointer\");\r\n    if (fp.files().filter((p) => p.name == filename).length > 0) {\r\n        return error_pointer(`file ${filename} already exist`);\r\n    }\r\n    let new_file = lfs.new_file(filename, fp.id, filedata);\r\n    notifyDidChangeFile({changes: [{event: FileChangeType.ADDED, resource: resource}]})\r\n    return fsPointer(lfs.add_file_to_dir(fp.id, new_file));\r\n};\r\n\r\n// add dir to given dir pointer\r\nexport const add_dir_to_pointer = (fp, dirname, dirdata, resource) => {\r\n    if (fp.type != LocalStorage.Type.directory) return error_pointer(\"not a dir pointer\");\r\n    if (fp.dirs().filter((p) => p.name == dirname).length > 0) {\r\n        return error_pointer(`dir ${dirname} already exist`);\r\n    }\r\n    let new_dir = lfs.new_directory(dirname, fp.id, dirdata);\r\n    notifyDidChangeFile({changes: [{event: FileChangeType.ADDED, resource: resource}]})\r\n    return fsPointer(lfs.add_dir_to_dir(fp.id, new_dir));\r\n};\r\n\r\n// remove file or directory of given pointer\r\nexport const remove_pointer = (fp, resource) => {\r\n\r\n    let temp_ls = lfs.load_fs()\r\n    if (fp.type == LocalStorage.Type.file) {\r\n        lfs.remove_file(fp.id, temp_ls);\r\n        notifyDidChangeFile({changes: [{event: FileChangeType.DELETED, resource: resource}]})\r\n        return true;\r\n    } else if (fp.type == LocalStorage.Type.directory) {\r\n        lfs.remove_directory(fp.id, temp_ls);\r\n        notifyDidChangeFile({changes: [{event: FileChangeType.DELETED, resource: resource}]})\r\n        return true;\r\n    } else return false; // TODO should return some id\r\n};\r\n\r\n// update file data of given pointer\r\nexport const update_data_file_pointer = (fp, filedata) => {\r\n    if (fp.type != LocalStorage.Type.file) return false;\r\n    let file = fp.raw;\r\n    file.data = filedata;\r\n    lfs.write_file(fp.id, file);\r\n    return true; // TODO more error catching and returning written file id\r\n};\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// parse the path\r\n// assume: name of file or directory does not contain \"/\" character (except root)\r\n// ex. \"/a/b/c/d\" : absolute path, root -> dir a -> dir b -> dir c -> (dir or file) d\r\n// ex. \"a/b/c/d\" : relative path, fp -> dir a -> dir b -> dir c -> (dir or file) d\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const get_path_pointer = (\r\n    fp: FS.FsPointer,\r\n    path: string\r\n): FS.FsPointer | undefined => {\r\n    if (fp.type != LocalStorage.Type.directory) return error_pointer(\"not a dir pointer\");\r\n    let splitted = path.split(\"/\");\r\n    // 1) absolute path case\r\n    if (path.startsWith(\"/\")) {\r\n        let root = get_root_pointer();\r\n        let relative_path = splitted.slice(1).join(\"/\");\r\n        return get_path_pointer(root, relative_path);\r\n    }\r\n    // 2) relative path case\r\n    else {\r\n        if (splitted.length == 1) {\r\n            let file_result = child_file_pointer(fp, splitted[0]);\r\n            if (file_result !== undefined && file_result.type == LocalStorage.Type.file) return file_result;\r\n            else {\r\n                let dir_result = child_dir_pointer(fp, splitted[0]);\r\n                if (dir_result !== undefined && dir_result.type == LocalStorage.Type.directory) return dir_result;\r\n                else return error_pointer(\"no such file or directory\");\r\n            }\r\n        } else {\r\n            let dir_result = child_dir_pointer(fp, splitted[0]);\r\n            if (dir_result !== undefined && dir_result.type == LocalStorage.Type.directory) {\r\n                return get_path_pointer(dir_result, splitted.slice(1).join(\"/\"));\r\n            } else {\r\n                return error_pointer(\"no such directory\");\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const get_pointer = (\r\n    fp: FS.FsPointer,\r\n    path: string\r\n): FS.FsPointer | undefined => {\r\n    if (path === '/' || path === '') {\r\n        return fp;\r\n    } else {\r\n        return get_path_pointer(fp, path);\r\n    }\r\n}\r\n\r\n// get the path of a pointer\r\nexport const get_pointer_path = (fp) => {\r\n    if (fp.type == LocalStorage.Type.directory && fp.name == \"/\") return \"ROOT\";\r\n    else if (fp.type == LocalStorage.Type.directory || fp.type == LocalStorage.Type.file) {\r\n        let parent_path = get_pointer_path(fp.parent());\r\n        if (parent_path == \"\") return \"\";\r\n        return parent_path + \"/\" + fp.name;\r\n    } else return \"\";\r\n};\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////Main fns for memo-localstorage //////////////////\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const get_file_data_list_by_data_predicate = (fp, predicate) => {\r\n    let targetFileDatas = fp\r\n        .files()\r\n        .filter((fp) => predicate(fp.data()))\r\n        .map((fp) => fp.data());\r\n    return targetFileDatas;\r\n};\r\n\r\nexport const get_file_data_list = (fp) => {\r\n    return get_file_data_list_by_data_predicate(fp, (m) => true);\r\n};\r\n\r\n// modifiers for file pointers\r\nexport const delete_file_by_data_predicate = (fp, predicate, resource) => {\r\n    let targetFiles = fp.files().filter((fp) => predicate(fp.data()));\r\n    if (targetFiles.length == 0) return false;\r\n    targetFiles.forEach((fp) => {\r\n        remove_pointer(fp, resource);\r\n    });\r\n    return true;\r\n};\r\nexport const delete_dir_by_data_predicate = (fp, predicate, resource) => {\r\n    let targetDirs = fp.dirs().filter((fp) => predicate(fp.data()));\r\n    if (targetDirs.length == 0) return false;\r\n    targetDirs.forEach((fp) => {\r\n        remove_pointer(fp, resource);\r\n    });\r\n    return true;\r\n};\r\n\r\n\r\nexport const modify_file_data_by_data_predicate = (fp, predicate, newData) => {\r\n    let targetFiles = fp.files().filter((fp) => predicate(fp.data()));\r\n    if (targetFiles.length != 1) return false;\r\n    update_data_file_pointer(targetFiles[0], newData);\r\n    return true;\r\n};\r\n\r\nexport const store_file_in_dir = (fp, name, data, uri) => {\r\n    add_file_to_pointer(fp, name, data, uri);\r\n};\r\n\r\nexport const reload_pointer = (fp) => {\r\n    let id = fp.id;\r\n    return fsPointer(id);\r\n};\r\n\r\n// directory related\r\nexport const get_dir_name_list = (fp) => {\r\n    return get_dir_list(fp).map((p) => p.name);\r\n};\r\n\r\nexport const get_dir_data_list = (fp) => {\r\n    return get_dir_list(fp).map((p) => p.data());\r\n};\r\n\r\nexport const store_dir_in_dir = (fp, name, data, resource) => {\r\n    add_dir_to_pointer(fp, name, data, resource);\r\n};\r\n\r\nexport const get_dir_by_name = (fp, name: string): FS.Directory | undefined => {\r\n    let resPointer = child_dir_pointer(fp, name);\r\n    if (resPointer === undefined) {\r\n        return undefined;\r\n    }\r\n    if (resPointer.type !== undefined && resPointer.type != LocalStorage.Type.directory) return fp;\r\n    else return resPointer;\r\n};\r\n\r\nexport const get_parent_dir = (fp) => {\r\n    let resPointer = parent_dir_pointer(fp);\r\n    if (resPointer.type != LocalStorage.Type.directory) return fp;\r\n    else return resPointer;\r\n};\r\n\r\nexport const get_child_list = (fp: FS.FsPointer): FS.Combine[] => {\r\n    const dirs = get_dir_list(fp);\r\n    const files = get_file_list(fp);\r\n    return [...dirs, ...files];\r\n}\r\n\r\n// export const get_file_with_path = (\r\n//     uri: URI\r\n// ): FS.Combine | undefined => {\r\n//     let root = get_root_pointer();\r\n//     console.log(root);\r\n//     if (root.type === FS.Type.error) {\r\n//         return;\r\n//     }\r\n//     let p = uri.path;\r\n//     while (p.name !== '') {\r\n//         root = get_dir_by_name(root, p.name);\r\n//         if (root === undefined) {\r\n//             return undefined;\r\n//         }\r\n//         p = p.dir;\r\n//     }\r\n//     return root;\r\n// }\r\n\r\nexport namespace FS {\r\n    export enum Type {\r\n        file,\r\n        directory,\r\n        error,\r\n    }\r\n\r\n    export type Name = string;\r\n    export type Id = LocalStorage.Id;\r\n\r\n    export type Parent = (id: Id) => {};\r\n\r\n    export type FsPointer = File | Directory | Error;\r\n    export type Combine = File | Directory;\r\n\r\n    export type File = {\r\n        type: Type.file;\r\n        name: Name;\r\n        id: Id;\r\n        parent: Parent;\r\n        children: () => Error;\r\n        files: () => Error;\r\n        dirs: () => Error;\r\n        data: () => LocalStorage.Data;\r\n        raw: LocalStorage.File;\r\n    }\r\n\r\n    export type Directory = {\r\n        type: Type.directory;\r\n        name: Name;\r\n        id: Id;\r\n        parent: Parent;\r\n        children: () => FsPointer[];\r\n        files: () => File[];\r\n        dirs: () => Directory[];\r\n        data: () => LocalStorage.Data;\r\n        raw: LocalStorage.Directory;\r\n    }\r\n\r\n    export type Error = {\r\n        type: Type.error,\r\n        msg: string,\r\n    }\r\n}\r\n"]}