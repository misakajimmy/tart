{"version":3,"sources":["browser/filesystem-frontend-contribution.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,GAAE,MAAM,WAAW,CAAC;AAC9C,OAAO,EAAC,OAAO,GAAwC,MAAM,uBAAuB,CAAC;AACrF,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAC,cAAc,EAAkC,MAAM,YAAY,CAAC;AAE3E,MAAM,KAAW,kBAAkB,CAQlC;AARD,WAAiB,kBAAkB;IAElB,yBAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC;QAC7C,EAAE,EAAE,aAAa;QACjB,QAAQ,EAAE,cAAc,CAAC,aAAa;QACtC,KAAK,EAAE,iBAAiB;KAC3B,EAAE,6BAA6B,EAAE,cAAc,CAAC,iBAAiB,CAAC,CAAC;AAExE,CAAC,EARgB,kBAAkB,KAAlB,kBAAkB,QAQlC;AAGD,IAAa,8BAA8B,GAA3C,MAAa,8BAA8B;IAKvC,UAAU;QACN,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE;QAC1C,CAAC,CAAC,CAAC;QACH,qDAAqD;QACrD,sCAAsC;QACtC,yFAAyF;QACzF,MAAM;QACN,kFAAkF;QAClF,gFAAgF;QAChF,wCAAwC;QACxC,UAAU;QACV,iFAAiF;QACjF,+EAA+E;QAC/E,wCAAwC;QACxC,UAAU;IACd,CAAC;IAED,gBAAgB,CAAC,QAAyB;QACtC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,yBAAyB,CAAC;YACvD,EAAE,EAAE,kBAAkB;YACtB,KAAK,EAAE,UAAU;SACpB,CAAC,EAAE;YACA,OAAO,EAAE,IAAI,CAAC,EAAE;gBACZ,aAAa;gBACb,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;YAC1C,CAAC;SACJ,CAAC,CAAA;IACN,CAAC;CACJ,CAAA;AA9BG;IADC,MAAM,CAAC,WAAW,CAAC;mEACwB;AAHnC,8BAA8B;IAD1C,UAAU,EAAE;GACA,8BAA8B,CAiC1C;SAjCY,8BAA8B","file":"../../src/browser/filesystem-frontend-contribution.js","sourcesContent":["import {inject, injectable,} from 'inversify';\r\nimport {Command, CommandContribution, CommandRegistry,} from '@tart/core/lib/common';\r\nimport {FileService} from './file-service';\r\nimport {CommonCommands, FrontendApplicationContribution} from '@tart/core';\r\n\r\nexport namespace FileSystemCommands {\r\n\r\n    export const UPLOAD = Command.toLocalizedCommand({\r\n        id: 'file.upload',\r\n        category: CommonCommands.FILE_CATEGORY,\r\n        label: 'Upload Files...'\r\n    }, 'tart/filesystem/uploadFiles', CommonCommands.FILE_CATEGORY_KEY);\r\n\r\n}\r\n\r\n@injectable()\r\nexport class FileSystemFrontendContribution implements FrontendApplicationContribution, CommandContribution {\r\n\r\n    @inject(FileService)\r\n    protected readonly fileService: FileService;\r\n\r\n    initialize(): void {\r\n        this.fileService.onDidFilesChange(event => {\r\n        });\r\n        // this.fileService.onWillRunUserOperation(event => {\r\n        //     this.queueUserOperation(event);\r\n        //     event.waitUntil(this.runEach((uri, widget) => this.pushMove(uri, widget, event)));\r\n        // });\r\n        // this.fileService.onDidFailUserOperation(event => event.waitUntil((async () => {\r\n        //     await this.runEach((uri, widget) => this.revertMove(uri, widget, event));\r\n        //     this.resolveUserOperation(event);\r\n        // })()));\r\n        // this.fileService.onDidRunUserOperation(event => event.waitUntil((async () => {\r\n        //     await this.runEach((uri, widget) => this.applyMove(uri, widget, event));\r\n        //     this.resolveUserOperation(event);\r\n        // })()));\r\n    }\r\n\r\n    registerCommands(commands: CommandRegistry) {\r\n        commands.registerCommand(Command.toDefaultLocalizedCommand({\r\n            id: 'local-filesystem',\r\n            label: '使用本地文件系统',\r\n        }), {\r\n            execute: data => {\r\n                // @ts-ignore\r\n                this.fileService.useLocalFileSystem();\r\n            }\r\n        })\r\n    }\r\n}\r\n"]}