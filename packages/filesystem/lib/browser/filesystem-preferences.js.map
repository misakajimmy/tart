{"version":3,"sources":["browser/filesystem-preferences.ts"],"names":[],"mappings":"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","file":"../../src/browser/filesystem-preferences.js","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2017 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {interfaces} from 'inversify';\r\nimport {\r\n    createPreferenceProxy,\r\n    PreferenceContribution,\r\n    PreferenceProxy,\r\n    PreferenceSchema,\r\n    PreferenceService\r\n} from '@tart/core/lib/browser/preferences';\r\nimport {SUPPORTED_ENCODINGS} from '@tart/core/lib/browser/supported-encodings';\r\nimport {nls} from '@tart/core/lib/common/nls';\r\n\r\n// See https://github.com/Microsoft/vscode/issues/30180\r\nexport const WIN32_MAX_FILE_SIZE_MB = 300; // 300 MB\r\nexport const GENERAL_MAX_FILE_SIZE_MB = 16 * 1024; // 16 GB\r\n\r\n// export const MAX_FILE_SIZE_MB = typeof process === 'object'\r\n//     ? process.arch === 'ia32'\r\n//         ? WIN32_MAX_FILE_SIZE_MB\r\n//         : GENERAL_MAX_FILE_SIZE_MB\r\n//     : 32;\r\n\r\nexport const MAX_FILE_SIZE_MB = WIN32_MAX_FILE_SIZE_MB;\r\n\r\nexport const filesystemPreferenceSchema: PreferenceSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        'files.watcherExclude': {\r\n            // eslint-disable-next-line max-len\r\n            description: nls.localizeByDefault('Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of CPU time on startup, you can exclude large folders to reduce the initial load.'),\r\n            additionalProperties: {\r\n                type: 'boolean'\r\n            },\r\n            default: {\r\n                '**/.git/objects/**': true,\r\n                '**/.git/subtree-cache/**': true,\r\n                '**/node_modules/**': true\r\n            },\r\n            scope: 'resource'\r\n        },\r\n        'files.exclude': {\r\n            type: 'object',\r\n            default: {'**/.git': true, '**/.svn': true, '**/.hg': true, '**/CVS': true, '**/.DS_Store': true},\r\n            // eslint-disable-next-line max-len\r\n            description: nls.localize('tart/filesystem/filesExclude', 'Configure glob patterns for excluding files and folders. For example, the file Explorer decides which files and folders to show or hide based on this setting. Refer to the `#search.exclude#` setting to define search specific excludes.'),\r\n            scope: 'resource'\r\n        },\r\n        'files.enableTrash': {\r\n            type: 'boolean',\r\n            default: true,\r\n            description: nls.localizeByDefault('Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.')\r\n        },\r\n        'files.associations': {\r\n            type: 'object',\r\n            description: nls.localizeByDefault(\r\n                'Configure file associations to languages.json (e.g. `\\\"*.extension\\\": \\\"html\\\"`). These have precedence over the default associations of the languages.json installed.'\r\n            )\r\n        },\r\n        'files.autoGuessEncoding': {\r\n            type: 'boolean',\r\n            default: false,\r\n            description: nls.localizeByDefault(\r\n                'When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language.'\r\n            ),\r\n            scope: 'language-overridable',\r\n            included: Object.keys(SUPPORTED_ENCODINGS).length > 1\r\n        },\r\n        'files.participants.timeout': {\r\n            type: 'number',\r\n            default: 5000,\r\n            markdownDescription: nls.localizeByDefault(\r\n                'Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.'\r\n            )\r\n        },\r\n        'files.maxFileSizeMB': {\r\n            type: 'number',\r\n            default: MAX_FILE_SIZE_MB,\r\n            markdownDescription: nls.localize('tart/filesystem/maxFileSizeMB', 'Controls the max file size in MB which is possible to open.')\r\n        },\r\n        'files.trimTrailingWhitespace': {\r\n            type: 'boolean',\r\n            default: false,\r\n            description: nls.localizeByDefault('When enabled, will trim trailing whitespace when saving a file.'),\r\n            scope: 'language-overridable'\r\n        },\r\n        'files.maxConcurrentUploads': {\r\n            type: 'integer',\r\n            default: 1,\r\n            description: nls.localize(\r\n                'tart/filesystem/maxConcurrentUploads',\r\n                'Maximum number of concurrent files to upload when uploading multiple files. 0 means all files will be uploaded concurrently.'\r\n            ),\r\n        }\r\n    }\r\n};\r\n\r\nexport interface FileSystemConfiguration {\r\n    'files.watcherExclude': { [globPattern: string]: boolean }\r\n    'files.exclude': { [key: string]: boolean }\r\n    'files.enableTrash': boolean\r\n    'files.associations': { [filepattern: string]: string }\r\n    'files.encoding': string\r\n    'files.autoGuessEncoding': boolean\r\n    'files.participants.timeout': number\r\n    'files.maxFileSizeMB': number\r\n    'files.trimTrailingWhitespace': boolean\r\n    'files.maxConcurrentUploads': number\r\n}\r\n\r\nexport const FileSystemPreferenceContribution = Symbol('FilesystemPreferenceContribution');\r\nexport const FileSystemPreferences = Symbol('FileSystemPreferences');\r\nexport type FileSystemPreferences = PreferenceProxy<FileSystemConfiguration>;\r\n\r\nexport function createFileSystemPreferences(preferences: PreferenceService, schema: PreferenceSchema = filesystemPreferenceSchema): FileSystemPreferences {\r\n    return createPreferenceProxy(preferences, schema);\r\n}\r\n\r\nexport function bindFileSystemPreferences(bind: interfaces.Bind): void {\r\n    bind(FileSystemPreferences).toDynamicValue(ctx => {\r\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\r\n        const contribution = ctx.container.get<PreferenceContribution>(FileSystemPreferenceContribution);\r\n        return createFileSystemPreferences(preferences, contribution.schema);\r\n    }).inSingletonScope();\r\n    bind(FileSystemPreferenceContribution).toConstantValue({schema: filesystemPreferenceSchema});\r\n    bind(PreferenceContribution).toService(FileSystemPreferenceContribution);\r\n}\r\n"]}