{"version":3,"sources":["browser/file-resource.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EACH,oBAAoB,EACpB,OAAO,EAGP,aAAa,EAIhB,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,WAAW,CAAC;AAE7C,OAAO,EAAC,WAAW,EAAE,sBAAsB,EAA0B,MAAM,gBAAgB,CAAC;AAC5F,OAAO,EACH,UAAU,EACV,aAAa,EAEb,kBAAkB,EAIrB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAC,aAAa,EAAE,aAAa,EAAC,MAAM,YAAY,CAAC;AACxD,OAAO,EAAC,wBAAwB,EAAC,MAAM,0BAA0B,CAAC;AASlE,MAAM,KAAW,mBAAmB,CAInC;AAJD,WAAiB,mBAAmB;IAChC,SAAgB,EAAE,CAAC,OAAoC;QACnD,OAAO,CAAC,CAAC,OAAO,IAAI,UAAU,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI,MAAM,IAAI,OAAO,CAAC;IACzF,CAAC;IAFe,sBAAE,KAEjB,CAAA;AACL,CAAC,EAJgB,mBAAmB,KAAnB,mBAAmB,QAInC;AAOD,MAAM,OAAO,YAAY;IASrB,YACa,GAAQ,EACE,WAAwB,EACxB,OAA4B;QAFtC,QAAG,GAAH,GAAG,CAAK;QACE,gBAAW,GAAX,WAAW,CAAa;QACxB,YAAO,GAAP,OAAO,CAAqB;QATzC,mBAAc,GAAG,IAAI,CAAC;QAEb,cAAS,GAAG,IAAI,oBAAoB,EAAE,CAAC;QACvC,+BAA0B,GAAG,IAAI,OAAO,EAAQ,CAAC;QAC3D,wBAAmB,GAAgB,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC;QAiLxE,yBAAoB,GAAmC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE;YACxF,MAAM,OAAO,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,KAAI,IAAI,CAAC,QAAQ,CAAC;YAClD,MAAM,OAAO,GAAG,mBAAmB,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;YACtE,IAAI,CAAC,OAAO,EAAE;gBACV,MAAM,aAAa,CAAC,QAAQ,CAAC,EAAC,OAAO,EAAE,uBAAuB,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,EAAC,CAAC,CAAC;aAC3F;YACD,MAAM,IAAI,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAC;YAC3B,IAAI;gBACA,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE;oBAC1D,YAAY,EAAE,OAAO,CAAC,QAAQ;oBAC9B,QAAQ,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ;oBAC3B,iBAAiB,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,iBAAiB;oBAC7C,IAAI;oBACJ,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK;iBACxB,CAAC,CAAC;gBACH,IAAI,CAAC,QAAQ,GAAG;oBACZ,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;iBAC1B,CAAC;aACL;YAAC,OAAO,CAAC,EAAE;gBACR,IAAI,CAAC,YAAY,kBAAkB,IAAI,CAAC,CAAC,mBAAmB,+CAAuC,EAAE;oBACjG,MAAM,EAAC,OAAO,EAAE,KAAK,EAAC,GAAG,CAAC,CAAC;oBAC3B,MAAM,aAAa,CAAC,QAAQ,CAAC,EAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,EAAC,CAAC,CAAC;iBACzE;gBACD,IAAI,CAAC,YAAY,kBAAkB,IAAI,CAAC,CAAC,mBAAmB,oDAA4C,EAAE;oBACtG,MAAM,EAAC,OAAO,EAAE,KAAK,EAAC,GAAG,CAAC,CAAC;oBAC3B,MAAM,aAAa,CAAC,SAAS,CAAC,EAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,EAAC,CAAC,CAAC;iBAC1E;gBACD,MAAM,CAAC,CAAC;aACX;QACL,CAAC,CAAC;QAzME,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE;YAC1D,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBAC1B,IAAI,CAAC,IAAI,EAAE,CAAC;aACf;QACL,CAAC,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE;YACvD,IAAI,CAAC,CAAC,CAAC,WAAW,8BAAsB,IAAI,CAAC,CAAC,WAAW,4BAAoB,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBACpH,IAAI,CAAC,IAAI,EAAE,CAAC;aACf;QACL,CAAC,CAAC,CAAC,CAAC;QACJ,IAAI;YACA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACzD;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACpB;QACD,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,yCAAyC,CAAC,CAAC,CAAC,EAAE;YAC/E,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;gBAC9B,IAAI,CAAC,0BAA0B,EAAE,CAAC;aACrC;QACL,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAID,IAAI,OAAO;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,IAAI,QAAQ;;QACR,OAAO,MAAA,IAAI,CAAC,QAAQ,0CAAE,QAAQ,CAAC;IACnC,CAAC;IAED,OAAO;QACH,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,OAA+B;;QAC9C,IAAI;YACA,MAAM,QAAQ,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,MAAI,MAAA,IAAI,CAAC,OAAO,0CAAE,QAAQ,CAAA,CAAC;YAC7D,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;gBAC/C,QAAQ;gBACR,IAAI,EAAE,aAAa;gBACnB,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,GAAG;gBACZ,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;aACpB,CAAC;YACF,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,sBAAsB,IAAI,CAAC,CAAC,uBAAuB,mDAA2C,EAAE;gBAC7G,IAAI,MAAM,IAAI,CAAC,gBAAgB,CAAC,iEAAiE,CAAC,EAAE;oBAChG,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;oBAC5B,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;iBACrC;aACJ;iBAAM,IAAI,CAAC,YAAY,kBAAkB,IAAI,CAAC,CAAC,mBAAmB,+CAAuC,EAAE;gBACxG,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAC,eAAe,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC/E,MAAM,WAAW,GAAG,wBAAwB,GAAG,IAAI,GAAG,IAAI,CAAC;gBAC3D,IAAI,CAAA,MAAA,IAAI,CAAC,MAAM,0CAAE,IAAI,MAAK,WAAW,IAAI,MAAM,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBAClI,IAAI,CAAC,MAAM,GAAG;wBACV,IAAI,EAAE,WAAW;qBACpB,CAAC;oBACF,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;iBACrC;aACJ;iBAAM,IAAI,CAAC,YAAY,kBAAkB,IAAI,CAAC,CAAC,mBAAmB,+CAAuC,EAAE;gBACxG,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,MAAM,EAAC,OAAO,EAAE,KAAK,EAAC,GAAG,CAAC,CAAC;gBAC3B,MAAM,aAAa,CAAC,QAAQ,CAAC;oBACzB,OAAO,EAAE,KAAK;oBACd,IAAI,EAAE;wBACF,GAAG,EAAE,IAAI,CAAC,GAAG;qBAChB;iBACJ,CAAC,CAAC;aACN;YACD,MAAM,CAAC,CAAC;SACX;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,OAA+B;;QAC5C,IAAI;YACA,MAAM,QAAQ,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,MAAI,MAAA,IAAI,CAAC,OAAO,0CAAE,QAAQ,CAAA,CAAC;YAC7D,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE;gBACrD,QAAQ;gBACR,IAAI,EAAE,aAAa;gBACnB,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,GAAG;gBACZ,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;aACpB,CAAC;YACF,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,sBAAsB,IAAI,CAAC,CAAC,uBAAuB,mDAA2C,EAAE;gBAC7G,IAAI,MAAM,IAAI,CAAC,gBAAgB,CAAC,iEAAiE,CAAC,EAAE;oBAChG,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;oBAC5B,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;iBACnC;aACJ;iBAAM,IAAI,CAAC,YAAY,kBAAkB,IAAI,CAAC,CAAC,mBAAmB,+CAAuC,EAAE;gBACxG,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAC,eAAe,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC/E,MAAM,WAAW,GAAG,wBAAwB,GAAG,IAAI,GAAG,IAAI,CAAC;gBAC3D,IAAI,CAAA,MAAA,IAAI,CAAC,MAAM,0CAAE,IAAI,MAAK,WAAW,IAAI,MAAM,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBAClI,IAAI,CAAC,MAAM,GAAG;wBACV,IAAI,EAAE,WAAW;qBACpB,CAAC;oBACF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;iBACnC;aACJ;iBAAM,IAAI,CAAC,YAAY,kBAAkB,IAAI,CAAC,CAAC,mBAAmB,+CAAuC,EAAE;gBACxG,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,MAAM,EAAC,OAAO,EAAE,KAAK,EAAC,GAAG,CAAC,CAAC;gBAC3B,MAAM,aAAa,CAAC,QAAQ,CAAC;oBACzB,OAAO,EAAE,KAAK;oBACd,IAAI,EAAE;wBACF,GAAG,EAAE,IAAI,CAAC,GAAG;qBAChB;iBACJ,CAAC,CAAC;aACN;YACD,MAAM,CAAC,CAAC;SACX;IACL,CAAC;IAED,YAAY,CAAC,OAAe,EAAE,OAA6B;QACvD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,UAAU,CAAC,OAAyB,EAAE,OAA6B;QAC/D,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAES,KAAK,CAAC,OAAO,CAAC,OAAkC,EAAE,OAA6B;QACrF,MAAM,OAAO,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,KAAI,IAAI,CAAC,QAAQ,CAAC;QAClD,MAAM,OAAO,GAAG,mBAAmB,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;QACtE,MAAM,IAAI,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAC;QAC3B,IAAI;YACA,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE;gBACzD,QAAQ,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ;gBAC3B,iBAAiB,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,iBAAiB;gBAC7C,IAAI;gBACJ,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK;aACxB,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,GAAG;gBACZ,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;aAC1B,CAAC;SACL;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,kBAAkB,IAAI,CAAC,CAAC,mBAAmB,oDAA4C,EAAE;gBACtG,IAAI,IAAI,KAAK,aAAa,IAAI,MAAM,IAAI,CAAC,eAAe,EAAE,EAAE;oBACxD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,kCAAM,OAAO,KAAE,OAAO,EAAE,EAAC,IAAI,kCAAM,OAAO,KAAE,IAAI,EAAE,aAAa,GAAC,EAAC,IAAE,CAAC;iBAClG;gBACD,MAAM,EAAC,OAAO,EAAE,KAAK,EAAC,GAAG,CAAC,CAAC;gBAC3B,MAAM,aAAa,CAAC,SAAS,CAAC,EAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,EAAC,CAAC,CAAC;aAC1E;YACD,MAAM,CAAC,CAAC;SACX;IACL,CAAC;IAES,0BAA0B;QAChC,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,uDAAwC,EAAE;YACjF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAC;SACvD;aAAM;YACH,OAAO,IAAI,CAAC,kBAAkB,CAAC;SAClC;IACL,CAAC;IAmCS,KAAK,CAAC,IAAI;QAChB,IAAI,MAAM,IAAI,CAAC,QAAQ,EAAE,EAAE;YACvB,OAAO;SACV;QACD,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC;IAES,KAAK,CAAC,QAAQ;QACpB,IAAI;YACA,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAC,eAAe,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/E,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;SAC7D;QAAC,WAAM;YACJ,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;SACxB;IACL,CAAC;IAES,KAAK,CAAC,eAAe;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;IAC1C,CAAC;IAES,KAAK,CAAC,gBAAgB,CAAC,KAAa;QAC1C,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;CACJ;AAGD,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAQ7B,KAAK,CAAC,OAAO,CAAC,GAAQ;QAClB,IAAI,IAAI,CAAC;QACT,IAAI;YACA,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SAC9C;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,CAAC,CAAC,YAAY,kBAAkB,IAAI,CAAC,CAAC,mBAAmB,+CAAuC,CAAC,EAAE;gBACpG,MAAM,CAAC,CAAC;aACX;SACJ;QACD,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE;YAC1B,MAAM,IAAI,KAAK,CAAC,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;SAC3F;QACD,OAAO,IAAI,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,EAAE;YAC3C,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC;YAChD,gBAAgB,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,KAAK,CAAC;SAC/D,CAAC,CAAC;IACP,CAAC;IAES,KAAK,CAAC,eAAe,CAAC,GAAQ;QACpC,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC;YAC7B,KAAK,EAAE,aAAa,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,wCAAwC;YAC3F,GAAG,EAAE,iDAAiD,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,uBAAuB;YAChH,EAAE,EAAE,KAAK;YACT,MAAM,EAAE,IAAI;SACf,CAAC,CAAC;QACH,OAAO,CAAC,CAAC,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;IACjC,CAAC;IAES,KAAK,CAAC,gBAAgB,CAAC,GAAQ,EAAE,KAAa;QACpD,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC;YAC7B,KAAK,EAAE,KAAK;YACZ,GAAG,EAAE,6FAA6F,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW;YAChJ,EAAE,EAAE,KAAK;YACT,MAAM,EAAE,IAAI;SACf,CAAC,CAAC;QACH,OAAO,CAAC,CAAC,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;IACjC,CAAC;CACJ,CAAA;AA1CG;IADC,MAAM,CAAC,WAAW,CAAC;yDACwB;AAG5C;IADC,MAAM,CAAC,aAAa,CAAC;2DAC0B;AANvC,oBAAoB;IADhC,UAAU,EAAE;GACA,oBAAoB,CA6ChC;SA7CY,oBAAoB","file":"../../src/browser/file-resource.js","sourcesContent":["import {\r\n    DisposableCollection,\r\n    Emitter,\r\n    Event,\r\n    Resource,\r\n    ResourceError,\r\n    ResourceResolver,\r\n    ResourceSaveOptions,\r\n    ResourceVersion\r\n} from '@tart/core/lib/common';\r\nimport {inject, injectable} from 'inversify';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {FileService, TextFileOperationError, TextFileOperationResult} from './file-service';\r\nimport {\r\n    BinarySize,\r\n    ETAG_DISABLED,\r\n    FileOperation,\r\n    FileOperationError,\r\n    FileOperationResult,\r\n    FileReadStreamOptions,\r\n    FileSystemProviderCapabilities\r\n} from '../common/files';\r\nimport {ConfirmDialog, LabelProvider} from '@tart/core';\r\nimport {GENERAL_MAX_FILE_SIZE_MB} from './filesystem-preferences';\r\nimport {Readable, ReadableStream} from '@tart/core/lib/common/stream';\r\n\r\nexport interface FileResourceVersion extends ResourceVersion {\r\n    readonly encoding: string;\r\n    readonly mtime: number;\r\n    readonly etag: string;\r\n}\r\n\r\nexport namespace FileResourceVersion {\r\n    export function is(version: ResourceVersion | undefined): version is FileResourceVersion {\r\n        return !!version && 'encoding' in version && 'mtime' in version && 'etag' in version;\r\n    }\r\n}\r\n\r\nexport interface FileResourceOptions {\r\n    shouldOverwrite: () => Promise<boolean>\r\n    shouldOpenAsText: (error: string) => Promise<boolean>\r\n}\r\n\r\nexport class FileResource implements Resource {\r\n\r\n    saveContentChanges?: Resource['saveContentChanges'];\r\n    protected acceptTextOnly = true;\r\n    protected limits: FileReadStreamOptions['limits'];\r\n    protected readonly toDispose = new DisposableCollection();\r\n    protected readonly onDidChangeContentsEmitter = new Emitter<void>();\r\n    readonly onDidChangeContents: Event<void> = this.onDidChangeContentsEmitter.event;\r\n\r\n    constructor(\r\n        readonly uri: URI,\r\n        protected readonly fileService: FileService,\r\n        protected readonly options: FileResourceOptions\r\n    ) {\r\n        this.toDispose.push(this.onDidChangeContentsEmitter);\r\n        this.toDispose.push(this.fileService.onDidFilesChange(event => {\r\n            if (event.contains(this.uri)) {\r\n                this.sync();\r\n            }\r\n        }));\r\n        this.toDispose.push(this.fileService.onDidRunOperation(e => {\r\n            if ((e.isOperation(FileOperation.DELETE) || e.isOperation(FileOperation.MOVE)) && e.resource.isEqualOrParent(this.uri)) {\r\n                this.sync();\r\n            }\r\n        }));\r\n        try {\r\n            this.toDispose.push(this.fileService.watch(this.uri));\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n        this.updateSavingContentChanges();\r\n        this.toDispose.push(this.fileService.onDidChangeFileSystemProviderCapabilities(e => {\r\n            if (e.scheme === this.uri.scheme) {\r\n                this.updateSavingContentChanges();\r\n            }\r\n        }));\r\n    }\r\n\r\n    protected _version: FileResourceVersion | undefined;\r\n\r\n    get version(): FileResourceVersion | undefined {\r\n        return this._version;\r\n    }\r\n\r\n    get encoding(): string | undefined {\r\n        return this._version?.encoding;\r\n    }\r\n\r\n    dispose(): void {\r\n        this.toDispose.dispose();\r\n    }\r\n\r\n    async readContents(options?: { encoding?: string }): Promise<string> {\r\n        try {\r\n            const encoding = options?.encoding || this.version?.encoding;\r\n            const stat = await this.fileService.read(this.uri, {\r\n                encoding,\r\n                etag: ETAG_DISABLED,\r\n                acceptTextOnly: this.acceptTextOnly,\r\n                limits: this.limits\r\n            });\r\n            this._version = {\r\n                encoding: stat.encoding,\r\n                etag: stat.etag,\r\n                mtime: stat.mtime\r\n            };\r\n            return stat.value;\r\n        } catch (e) {\r\n            if (e instanceof TextFileOperationError && e.textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY) {\r\n                if (await this.shouldOpenAsText('The file is either binary or uses an unsupported text encoding.')) {\r\n                    this.acceptTextOnly = false;\r\n                    return this.readContents(options);\r\n                }\r\n            } else if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_TOO_LARGE) {\r\n                const stat = await this.fileService.resolve(this.uri, {resolveMetadata: true});\r\n                const maxFileSize = GENERAL_MAX_FILE_SIZE_MB * 1024 * 1024;\r\n                if (this.limits?.size !== maxFileSize && await this.shouldOpenAsText(`The file is too large (${BinarySize.formatSize(stat.size)}).`)) {\r\n                    this.limits = {\r\n                        size: maxFileSize\r\n                    };\r\n                    return this.readContents(options);\r\n                }\r\n            } else if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\r\n                this._version = undefined;\r\n                const {message, stack} = e;\r\n                throw ResourceError.NotFound({\r\n                    message, stack,\r\n                    data: {\r\n                        uri: this.uri\r\n                    }\r\n                });\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    async readStream(options?: { encoding?: string }): Promise<ReadableStream<string>> {\r\n        try {\r\n            const encoding = options?.encoding || this.version?.encoding;\r\n            const stat = await this.fileService.readStream(this.uri, {\r\n                encoding,\r\n                etag: ETAG_DISABLED,\r\n                acceptTextOnly: this.acceptTextOnly,\r\n                limits: this.limits\r\n            });\r\n            this._version = {\r\n                encoding: stat.encoding,\r\n                etag: stat.etag,\r\n                mtime: stat.mtime\r\n            };\r\n            return stat.value;\r\n        } catch (e) {\r\n            if (e instanceof TextFileOperationError && e.textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY) {\r\n                if (await this.shouldOpenAsText('The file is either binary or uses an unsupported text encoding.')) {\r\n                    this.acceptTextOnly = false;\r\n                    return this.readStream(options);\r\n                }\r\n            } else if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_TOO_LARGE) {\r\n                const stat = await this.fileService.resolve(this.uri, {resolveMetadata: true});\r\n                const maxFileSize = GENERAL_MAX_FILE_SIZE_MB * 1024 * 1024;\r\n                if (this.limits?.size !== maxFileSize && await this.shouldOpenAsText(`The file is too large (${BinarySize.formatSize(stat.size)}).`)) {\r\n                    this.limits = {\r\n                        size: maxFileSize\r\n                    };\r\n                    return this.readStream(options);\r\n                }\r\n            } else if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\r\n                this._version = undefined;\r\n                const {message, stack} = e;\r\n                throw ResourceError.NotFound({\r\n                    message, stack,\r\n                    data: {\r\n                        uri: this.uri\r\n                    }\r\n                });\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    saveContents(content: string, options?: ResourceSaveOptions): Promise<void> {\r\n        return this.doWrite(content, options);\r\n    }\r\n\r\n    saveStream(content: Readable<string>, options?: ResourceSaveOptions): Promise<void> {\r\n        return this.doWrite(content, options);\r\n    }\r\n\r\n    protected async doWrite(content: string | Readable<string>, options?: ResourceSaveOptions): Promise<void> {\r\n        const version = options?.version || this._version;\r\n        const current = FileResourceVersion.is(version) ? version : undefined;\r\n        const etag = current?.etag;\r\n        try {\r\n            const stat = await this.fileService.write(this.uri, content, {\r\n                encoding: options?.encoding,\r\n                overwriteEncoding: options?.overwriteEncoding,\r\n                etag,\r\n                mtime: current?.mtime\r\n            });\r\n            this._version = {\r\n                etag: stat.etag,\r\n                mtime: stat.mtime,\r\n                encoding: stat.encoding\r\n            };\r\n        } catch (e) {\r\n            if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\r\n                if (etag !== ETAG_DISABLED && await this.shouldOverwrite()) {\r\n                    return this.doWrite(content, {...options, version: {stat: {...current, etag: ETAG_DISABLED}}});\r\n                }\r\n                const {message, stack} = e;\r\n                throw ResourceError.OutOfSync({message, stack, data: {uri: this.uri}});\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    protected updateSavingContentChanges(): void {\r\n        if (this.fileService.hasCapability(this.uri, FileSystemProviderCapabilities.Update)) {\r\n            this.saveContentChanges = this.doSaveContentChanges;\r\n        } else {\r\n            delete this.saveContentChanges;\r\n        }\r\n    }\r\n\r\n    protected doSaveContentChanges: Resource['saveContentChanges'] = async (changes, options) => {\r\n        const version = options?.version || this._version;\r\n        const current = FileResourceVersion.is(version) ? version : undefined;\r\n        if (!current) {\r\n            throw ResourceError.NotFound({message: 'has not been read yet', data: {uri: this.uri}});\r\n        }\r\n        const etag = current?.etag;\r\n        try {\r\n            const stat = await this.fileService.update(this.uri, changes, {\r\n                readEncoding: current.encoding,\r\n                encoding: options?.encoding,\r\n                overwriteEncoding: options?.overwriteEncoding,\r\n                etag,\r\n                mtime: current?.mtime\r\n            });\r\n            this._version = {\r\n                etag: stat.etag,\r\n                mtime: stat.mtime,\r\n                encoding: stat.encoding\r\n            };\r\n        } catch (e) {\r\n            if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\r\n                const {message, stack} = e;\r\n                throw ResourceError.NotFound({message, stack, data: {uri: this.uri}});\r\n            }\r\n            if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\r\n                const {message, stack} = e;\r\n                throw ResourceError.OutOfSync({message, stack, data: {uri: this.uri}});\r\n            }\r\n            throw e;\r\n        }\r\n    };\r\n\r\n    protected async sync(): Promise<void> {\r\n        if (await this.isInSync()) {\r\n            return;\r\n        }\r\n        this.onDidChangeContentsEmitter.fire(undefined);\r\n    }\r\n\r\n    protected async isInSync(): Promise<boolean> {\r\n        try {\r\n            const stat = await this.fileService.resolve(this.uri, {resolveMetadata: true});\r\n            return !!this.version && this.version.mtime >= stat.mtime;\r\n        } catch {\r\n            return !this.version;\r\n        }\r\n    }\r\n\r\n    protected async shouldOverwrite(): Promise<boolean> {\r\n        return this.options.shouldOverwrite();\r\n    }\r\n\r\n    protected async shouldOpenAsText(error: string): Promise<boolean> {\r\n        return this.options.shouldOpenAsText(error);\r\n    }\r\n}\r\n\r\n@injectable()\r\nexport class FileResourceResolver implements ResourceResolver {\r\n\r\n    @inject(FileService)\r\n    protected readonly fileService: FileService;\r\n\r\n    @inject(LabelProvider)\r\n    protected readonly labelProvider: LabelProvider;\r\n\r\n    async resolve(uri: URI): Promise<FileResource> {\r\n        let stat;\r\n        try {\r\n            stat = await this.fileService.resolve(uri);\r\n        } catch (e) {\r\n            if (!(e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND)) {\r\n                throw e;\r\n            }\r\n        }\r\n        if (stat && stat.isDirectory) {\r\n            throw new Error('The given uri is a directory: ' + this.labelProvider.getLongName(uri));\r\n        }\r\n        return new FileResource(uri, this.fileService, {\r\n            shouldOverwrite: () => this.shouldOverwrite(uri),\r\n            shouldOpenAsText: error => this.shouldOpenAsText(uri, error)\r\n        });\r\n    }\r\n\r\n    protected async shouldOverwrite(uri: URI): Promise<boolean> {\r\n        const dialog = new ConfirmDialog({\r\n            title: `The file '${this.labelProvider.getName(uri)}' has been changed on the file system.`,\r\n            msg: `Do you want to overwrite the changes made to '${this.labelProvider.getLongName(uri)}' on the file system?`,\r\n            ok: 'Yes',\r\n            cancel: 'No'\r\n        });\r\n        return !!await dialog.open();\r\n    }\r\n\r\n    protected async shouldOpenAsText(uri: URI, error: string): Promise<boolean> {\r\n        const dialog = new ConfirmDialog({\r\n            title: error,\r\n            msg: `Opening it might take some time and might make the IDE unresponsive. Do you want to open '${this.labelProvider.getLongName(uri)}' anyway?`,\r\n            ok: 'Yes',\r\n            cancel: 'No'\r\n        });\r\n        return !!await dialog.open();\r\n    }\r\n}\r\n"]}