{"version":3,"sources":["browser/breadcrumbs/filepath-breadcrumbs-contribution.ts"],"names":[],"mappings":"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","file":"../../../src/browser/breadcrumbs/filepath-breadcrumbs-contribution.js","sourcesContent":["import {Disposable, Emitter, Event} from '@tart/core/lib/common';\r\nimport {inject, injectable} from 'inversify';\r\nimport {\r\n    Breadcrumb,\r\n    BreadcrumbsContribution,\r\n    CompositeTreeNode,\r\n    LabelProvider,\r\n    SelectableTreeNode,\r\n    Widget\r\n} from '@tart/core/lib/browser';\r\nimport {FilepathBreadcrumb} from './filepath-breadcrumb';\r\nimport {BreadcrumbsFileTreeWidget} from './filepath-breadcrumbs-container';\r\nimport {DirNode} from '../file-tree';\r\nimport {FileService} from '../file-service';\r\nimport {FileStat} from '../../common/files';\r\nimport URI from '@tart/core/lib/common/uri';\r\n\r\nexport const FilepathBreadcrumbType = Symbol('FilepathBreadcrumb');\r\n\r\nexport interface FilepathBreadcrumbClassNameFactory {\r\n    (location: URI, index: number): string;\r\n}\r\n\r\n@injectable()\r\nexport class FilepathBreadcrumbsContribution implements BreadcrumbsContribution {\r\n\r\n    readonly type = FilepathBreadcrumbType;\r\n    readonly priority: number = 100;\r\n    @inject(LabelProvider)\r\n    protected readonly labelProvider: LabelProvider;\r\n    @inject(FileService)\r\n    protected readonly fileSystem: FileService;\r\n    @inject(BreadcrumbsFileTreeWidget)\r\n    protected readonly breadcrumbsFileTreeWidget: BreadcrumbsFileTreeWidget;\r\n    protected readonly onDidChangeBreadcrumbsEmitter = new Emitter<URI>();\r\n\r\n    get onDidChangeBreadcrumbs(): Event<URI> {\r\n        return this.onDidChangeBreadcrumbsEmitter.event;\r\n    }\r\n\r\n    async computeBreadcrumbs(uri: URI): Promise<Breadcrumb[]> {\r\n        if (uri.scheme !== 'file') {\r\n            return [];\r\n        }\r\n        const getContainerClass = this.getContainerClassCreator(uri);\r\n        const getIconClass = this.getIconClassCreator(uri);\r\n        return uri.allLocations\r\n            .map((location, index) => {\r\n                const icon = getIconClass(location, index);\r\n                const containerClass = getContainerClass(location, index);\r\n                return new FilepathBreadcrumb(\r\n                    location,\r\n                    this.labelProvider.getName(location),\r\n                    this.labelProvider.getLongName(location),\r\n                    icon,\r\n                    containerClass,\r\n                );\r\n            })\r\n            .filter(b => this.filterBreadcrumbs(uri, b))\r\n            .reverse();\r\n    }\r\n\r\n    async attachPopupContent(breadcrumb: Breadcrumb, parent: HTMLElement): Promise<Disposable | undefined> {\r\n        if (!FilepathBreadcrumb.is(breadcrumb)) {\r\n            return undefined;\r\n        }\r\n        const folderFileStat = await this.fileSystem.resolve(breadcrumb.uri.parent);\r\n        if (folderFileStat) {\r\n            const rootNode = await this.createRootNode(folderFileStat);\r\n            if (rootNode) {\r\n                const {model} = this.breadcrumbsFileTreeWidget;\r\n                await model.navigateTo({...rootNode, visible: false});\r\n                Widget.attach(this.breadcrumbsFileTreeWidget, parent);\r\n                const toDisposeOnTreePopulated = model.onChanged(() => {\r\n                    if (CompositeTreeNode.is(model.root) && model.root.children.length > 0) {\r\n                        toDisposeOnTreePopulated.dispose();\r\n                        const targetNode = model.getNode(breadcrumb.uri.path.toString());\r\n                        if (targetNode && SelectableTreeNode.is(targetNode)) {\r\n                            model.selectNode(targetNode);\r\n                        }\r\n                        this.breadcrumbsFileTreeWidget.activate();\r\n                    }\r\n                });\r\n                return {\r\n                    dispose: () => {\r\n                        // Clear model otherwise the next time a popup is opened the old model is rendered first\r\n                        // and is shown for a short time period.\r\n                        toDisposeOnTreePopulated.dispose();\r\n                        this.breadcrumbsFileTreeWidget.model.root = undefined;\r\n                        Widget.detach(this.breadcrumbsFileTreeWidget);\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getContainerClassCreator(fileURI: URI): FilepathBreadcrumbClassNameFactory {\r\n        return (location, index) => location.isEqual(fileURI) ? 'file' : 'folder';\r\n    }\r\n\r\n    protected getIconClassCreator(fileURI: URI): FilepathBreadcrumbClassNameFactory {\r\n        return (location, index) => location.isEqual(fileURI) ? this.labelProvider.getIcon(location) + ' file-icon' : '';\r\n    }\r\n\r\n    protected filterBreadcrumbs(_: URI, breadcrumb: FilepathBreadcrumb): boolean {\r\n        return !breadcrumb.uri.path.isRoot;\r\n    }\r\n\r\n    protected async createRootNode(folderToOpen: FileStat): Promise<DirNode | undefined> {\r\n        const folderUri = folderToOpen.resource;\r\n        const rootUri = folderToOpen.isDirectory ? folderUri : folderUri.parent;\r\n        const rootStat = await this.fileSystem.resolve(rootUri);\r\n        if (rootStat) {\r\n            return DirNode.createRoot(rootStat);\r\n        }\r\n    }\r\n}\r\n"]}