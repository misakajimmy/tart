{"version":3,"sources":["browser/file-upload-service.ts"],"names":[],"mappings":"AACA,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAC,eAAe,EAAC,MAAM,wCAAwC,CAAC;AAIvE,MAAM,WAAW,gBAAgB;IAC7B,MAAM,CAAC,EAAE,YAAY,CAAA;IACrB,QAAQ,CAAC,EAAE,wBAAwB,CAAA;IACnC,WAAW,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,KAAK,IAAI,CAAC;CACvC;AAED,MAAM,WAAW,wBAAwB;IACrC,IAAI,EAAE,MAAM,CAAA;CACf;AAED,qBACa,iBAAiB;IAC1B,MAAM,CAAC,MAAM,SAAY;IACzB,MAAM,CAAC,MAAM,SAAY;IAGzB,SAAS,CAAC,WAAW,EAAE,WAAW,CAAC;IAGnC,SAAS,CAAC,QAAQ,CAAC,eAAe,EAAE,eAAe,CAAC;IAE9C,MAAM,CAAC,SAAS,EAAE,MAAM,GAAG,GAAG,EAAE,MAAM,GAAE,gBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC;CAetF","file":"../../src/browser/file-upload-service.d.ts","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {FileService} from './file-service';\r\nimport {EncodingService} from '@tart/core/lib/common/encoding-service';\r\nimport {BinaryBuffer} from \"@tart/core/lib/common//buffer\";\r\n\r\n\r\nexport interface FileUploadParams {\r\n    source?: DataTransfer\r\n    progress?: FileUploadProgressParams\r\n    onDidUpload?: (uri: string) => void;\r\n}\r\n\r\nexport interface FileUploadProgressParams {\r\n    text: string\r\n}\r\n\r\n@injectable()\r\nexport class FileUploadService {\r\n    static TARGET = 'target';\r\n    static UPLOAD = 'upload';\r\n\r\n    @inject(FileService)\r\n    protected fileService: FileService;\r\n\r\n    @inject(EncodingService)\r\n    protected readonly encodingService: EncodingService;\r\n\r\n    async upload(targetUri: string | URI, parmas: FileUploadParams = {}): Promise<void> {\r\n        let uri = targetUri.toString();\r\n        if (!uri.endsWith('/')) {\r\n            uri += '/';\r\n        }\r\n        for (let i = 0; i < parmas.source.files.length; i++) {\r\n            const reader = new FileReader();\r\n            const name = parmas.source.files[i].name;\r\n            reader.readAsArrayBuffer(parmas.source.files[i]);\r\n            reader.onload = () => {\r\n                const data = reader.result;\r\n                this.fileService.writeFile(new URI(uri + name), BinaryBuffer.wrap(new Uint8Array(data as ArrayBuffer)));\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}