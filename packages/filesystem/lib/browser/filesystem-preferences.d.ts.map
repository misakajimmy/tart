{"version":3,"sources":["browser/filesystem-preferences.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;kFAckF;AAElF,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAGH,eAAe,EACf,gBAAgB,EAChB,iBAAiB,EACpB,MAAM,oCAAoC,CAAC;AAK5C,eAAO,MAAM,sBAAsB,MAAM,CAAC;AAC1C,eAAO,MAAM,wBAAwB,QAAY,CAAC;AAQlD,eAAO,MAAM,gBAAgB,MAAyB,CAAC;AAEvD,eAAO,MAAM,0BAA0B,EAAE,gBAsExC,CAAC;AAEF,MAAM,WAAW,uBAAuB;IACpC,sBAAsB,EAAE;QAAE,CAAC,WAAW,EAAE,MAAM,GAAG,OAAO,CAAA;KAAE,CAAA;IAC1D,eAAe,EAAE;QAAE,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAA;KAAE,CAAA;IAC3C,mBAAmB,EAAE,OAAO,CAAA;IAC5B,oBAAoB,EAAE;QAAE,CAAC,WAAW,EAAE,MAAM,GAAG,MAAM,CAAA;KAAE,CAAA;IACvD,gBAAgB,EAAE,MAAM,CAAA;IACxB,yBAAyB,EAAE,OAAO,CAAA;IAClC,4BAA4B,EAAE,MAAM,CAAA;IACpC,qBAAqB,EAAE,MAAM,CAAA;IAC7B,8BAA8B,EAAE,OAAO,CAAA;IACvC,4BAA4B,EAAE,MAAM,CAAA;CACvC;AAED,eAAO,MAAM,gCAAgC,eAA6C,CAAC;AAC3F,eAAO,MAAM,qBAAqB,eAAkC,CAAC;AACrE,oBAAY,qBAAqB,GAAG,eAAe,CAAC,uBAAuB,CAAC,CAAC;AAE7E,wBAAgB,2BAA2B,CAAC,WAAW,EAAE,iBAAiB,EAAE,MAAM,GAAE,gBAA6C,GAAG,qBAAqB,CAExJ;AAED,wBAAgB,yBAAyB,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,GAAG,IAAI,CAQrE","file":"../../src/browser/filesystem-preferences.d.ts","sourcesContent":["/********************************************************************************\r\n * Copyright (C) 2017 TypeFox and others.\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms of the Eclipse Public License v. 2.0 which is available at\r\n * http://www.eclipse.org/legal/epl-2.0.\r\n *\r\n * This Source Code may also be made available under the following Secondary\r\n * Licenses when the conditions for such availability set forth in the Eclipse\r\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\r\n * with the GNU Classpath Exception which is available at\r\n * https://www.gnu.org/software/classpath/license.html.\r\n *\r\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\r\n ********************************************************************************/\r\n\r\nimport {interfaces} from 'inversify';\r\nimport {\r\n    createPreferenceProxy,\r\n    PreferenceContribution,\r\n    PreferenceProxy,\r\n    PreferenceSchema,\r\n    PreferenceService\r\n} from '@tart/core/lib/browser/preferences';\r\nimport {SUPPORTED_ENCODINGS} from '@tart/core/lib/browser/supported-encodings';\r\nimport {nls} from '@tart/core/lib/common/nls';\r\n\r\n// See https://github.com/Microsoft/vscode/issues/30180\r\nexport const WIN32_MAX_FILE_SIZE_MB = 300; // 300 MB\r\nexport const GENERAL_MAX_FILE_SIZE_MB = 16 * 1024; // 16 GB\r\n\r\n// export const MAX_FILE_SIZE_MB = typeof process === 'object'\r\n//     ? process.arch === 'ia32'\r\n//         ? WIN32_MAX_FILE_SIZE_MB\r\n//         : GENERAL_MAX_FILE_SIZE_MB\r\n//     : 32;\r\n\r\nexport const MAX_FILE_SIZE_MB = WIN32_MAX_FILE_SIZE_MB;\r\n\r\nexport const filesystemPreferenceSchema: PreferenceSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        'files.watcherExclude': {\r\n            // eslint-disable-next-line max-len\r\n            description: nls.localizeByDefault('Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of CPU time on startup, you can exclude large folders to reduce the initial load.'),\r\n            additionalProperties: {\r\n                type: 'boolean'\r\n            },\r\n            default: {\r\n                '**/.git/objects/**': true,\r\n                '**/.git/subtree-cache/**': true,\r\n                '**/node_modules/**': true\r\n            },\r\n            scope: 'resource'\r\n        },\r\n        'files.exclude': {\r\n            type: 'object',\r\n            default: {'**/.git': true, '**/.svn': true, '**/.hg': true, '**/CVS': true, '**/.DS_Store': true},\r\n            // eslint-disable-next-line max-len\r\n            description: nls.localize('tart/filesystem/filesExclude', 'Configure glob patterns for excluding files and folders. For example, the file Explorer decides which files and folders to show or hide based on this setting. Refer to the `#search.exclude#` setting to define search specific excludes.'),\r\n            scope: 'resource'\r\n        },\r\n        'files.enableTrash': {\r\n            type: 'boolean',\r\n            default: true,\r\n            description: nls.localizeByDefault('Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.')\r\n        },\r\n        'files.associations': {\r\n            type: 'object',\r\n            description: nls.localizeByDefault(\r\n                'Configure file associations to languages.json (e.g. `\\\"*.extension\\\": \\\"html\\\"`). These have precedence over the default associations of the languages.json installed.'\r\n            )\r\n        },\r\n        'files.autoGuessEncoding': {\r\n            type: 'boolean',\r\n            default: false,\r\n            description: nls.localizeByDefault(\r\n                'When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language.'\r\n            ),\r\n            scope: 'language-overridable',\r\n            included: Object.keys(SUPPORTED_ENCODINGS).length > 1\r\n        },\r\n        'files.participants.timeout': {\r\n            type: 'number',\r\n            default: 5000,\r\n            markdownDescription: nls.localizeByDefault(\r\n                'Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.'\r\n            )\r\n        },\r\n        'files.maxFileSizeMB': {\r\n            type: 'number',\r\n            default: MAX_FILE_SIZE_MB,\r\n            markdownDescription: nls.localize('tart/filesystem/maxFileSizeMB', 'Controls the max file size in MB which is possible to open.')\r\n        },\r\n        'files.trimTrailingWhitespace': {\r\n            type: 'boolean',\r\n            default: false,\r\n            description: nls.localizeByDefault('When enabled, will trim trailing whitespace when saving a file.'),\r\n            scope: 'language-overridable'\r\n        },\r\n        'files.maxConcurrentUploads': {\r\n            type: 'integer',\r\n            default: 1,\r\n            description: nls.localize(\r\n                'tart/filesystem/maxConcurrentUploads',\r\n                'Maximum number of concurrent files to upload when uploading multiple files. 0 means all files will be uploaded concurrently.'\r\n            ),\r\n        }\r\n    }\r\n};\r\n\r\nexport interface FileSystemConfiguration {\r\n    'files.watcherExclude': { [globPattern: string]: boolean }\r\n    'files.exclude': { [key: string]: boolean }\r\n    'files.enableTrash': boolean\r\n    'files.associations': { [filepattern: string]: string }\r\n    'files.encoding': string\r\n    'files.autoGuessEncoding': boolean\r\n    'files.participants.timeout': number\r\n    'files.maxFileSizeMB': number\r\n    'files.trimTrailingWhitespace': boolean\r\n    'files.maxConcurrentUploads': number\r\n}\r\n\r\nexport const FileSystemPreferenceContribution = Symbol('FilesystemPreferenceContribution');\r\nexport const FileSystemPreferences = Symbol('FileSystemPreferences');\r\nexport type FileSystemPreferences = PreferenceProxy<FileSystemConfiguration>;\r\n\r\nexport function createFileSystemPreferences(preferences: PreferenceService, schema: PreferenceSchema = filesystemPreferenceSchema): FileSystemPreferences {\r\n    return createPreferenceProxy(preferences, schema);\r\n}\r\n\r\nexport function bindFileSystemPreferences(bind: interfaces.Bind): void {\r\n    bind(FileSystemPreferences).toDynamicValue(ctx => {\r\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\r\n        const contribution = ctx.container.get<PreferenceContribution>(FileSystemPreferenceContribution);\r\n        return createFileSystemPreferences(preferences, contribution.schema);\r\n    }).inSingletonScope();\r\n    bind(FileSystemPreferenceContribution).toConstantValue({schema: filesystemPreferenceSchema});\r\n    bind(PreferenceContribution).toService(FileSystemPreferenceContribution);\r\n}\r\n"]}