{"version":3,"sources":["browser/file-dialog/file-dialog-model.ts"],"names":[],"mappings":"AACA,OAAO,EAAkC,aAAa,EAAC,MAAM,cAAc,CAAC;AAC5E,OAAO,EAAC,OAAO,EAAE,KAAK,EAAC,MAAM,uBAAuB,CAAC;AACrD,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,EAAC,QAAQ,EAAC,MAAM,wBAAwB,CAAC;AAChD,OAAO,EAAC,kBAAkB,EAAC,MAAM,YAAY,CAAC;AAC9C,OAAO,EAAC,cAAc,EAAC,MAAM,oBAAoB,CAAC;AAElD,qBACa,eAAgB,SAAQ,aAAa;IAE9C,SAAyC,IAAI,EAAE,cAAc,CAAC;IAC9D,SAAS,CAAC,QAAQ,CAAC,oBAAoB,gBAAuB;IAC9D,SAAS,CAAC,gBAAgB,EAAE,GAAG,GAAG,SAAS,CAAC;IAE5C;;;OAGG;IACH,IAAI,eAAe,IAAI,GAAG,GAAG,SAAS,CAErC;IAED,OAAO,CAAC,qBAAqB,CAAkB;IAE/C,IAAI,oBAAoB,CAAC,YAAY,EAAE,OAAO,EAE7C;IAED,IAAI,aAAa,IAAI,KAAK,CAAC,IAAI,CAAC,CAE/B;IAEK,UAAU,CAAC,QAAQ,EAAE,QAAQ,GAAG,MAAM,GAAG,SAAS,GAAG,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;IAQxF,qBAAqB,CAAC,IAAI,GAAE,kBAA0C,GAAG,kBAAkB,GAAG,SAAS;IAQvG,qBAAqB,CAAC,IAAI,GAAE,kBAA0C,GAAG,kBAAkB,GAAG,SAAS;IAQvG,iBAAiB,IAAI,OAAO;IAM5B,SAAS,CAAC,IAAI,IAAI,IAAI;IAKtB,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,GAAG,IAAI;IAU1C,OAAO,CAAC,wBAAwB;CAGnC","file":"../../../src/browser/file-dialog/file-dialog-model.d.ts","sourcesContent":["import {inject, injectable, postConstruct} from 'inversify';\r\nimport {DirNode, FileNode, FileStatNode, FileTreeModel} from '../file-tree';\r\nimport {Emitter, Event} from '@tart/core/lib/common';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {TreeNode} from '@tart/core/lib/browser';\r\nimport {SelectableTreeNode} from '@tart/core';\r\nimport {FileDialogTree} from './file-dialog-tree';\r\n\r\n@injectable()\r\nexport class FileDialogModel extends FileTreeModel {\r\n\r\n    @inject(FileDialogTree) declare readonly tree: FileDialogTree;\r\n    protected readonly onDidOpenFileEmitter = new Emitter<void>();\r\n    protected _initialLocation: URI | undefined;\r\n\r\n    /**\r\n     * Returns the first valid location that was set by calling the `navigateTo` method. Once the initial location has a defined value, it will not change.\r\n     * Can be `undefined`.\r\n     */\r\n    get initialLocation(): URI | undefined {\r\n        return this._initialLocation;\r\n    }\r\n\r\n    private _disableFileSelection: boolean = false;\r\n\r\n    set disableFileSelection(isSelectable: boolean) {\r\n        this._disableFileSelection = isSelectable;\r\n    }\r\n\r\n    get onDidOpenFile(): Event<void> {\r\n        return this.onDidOpenFileEmitter.event;\r\n    }\r\n\r\n    async navigateTo(nodeOrId: TreeNode | string | undefined): Promise<TreeNode | undefined> {\r\n        const result = await super.navigateTo(nodeOrId);\r\n        if (!this._initialLocation && FileStatNode.is(result)) {\r\n            this._initialLocation = result.uri;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getNextSelectableNode(node: SelectableTreeNode = this.selectedNodes[0]): SelectableTreeNode | undefined {\r\n        let nextNode: SelectableTreeNode | undefined = node;\r\n        do {\r\n            nextNode = super.getNextSelectableNode(nextNode);\r\n        } while (FileStatNode.is(nextNode) && !this.isFileStatNodeSelectable(nextNode));\r\n        return nextNode;\r\n    }\r\n\r\n    getPrevSelectableNode(node: SelectableTreeNode = this.selectedNodes[0]): SelectableTreeNode | undefined {\r\n        let prevNode: SelectableTreeNode | undefined = node;\r\n        do {\r\n            prevNode = super.getPrevSelectableNode(prevNode);\r\n        } while (FileStatNode.is(prevNode) && !this.isFileStatNodeSelectable(prevNode));\r\n        return prevNode;\r\n    }\r\n\r\n    canNavigateUpward(): boolean {\r\n        const treeRoot = this.tree.root;\r\n        return FileStatNode.is(treeRoot) && !treeRoot.uri.path.isRoot;\r\n    }\r\n\r\n    @postConstruct()\r\n    protected init(): void {\r\n        super.init();\r\n        this.toDispose.push(this.onDidOpenFileEmitter);\r\n    }\r\n\r\n    protected doOpenNode(node: TreeNode): void {\r\n        if (FileNode.is(node)) {\r\n            this.onDidOpenFileEmitter.fire(undefined);\r\n        } else if (DirNode.is(node)) {\r\n            this.navigateTo(node);\r\n        } else {\r\n            super.doOpenNode(node);\r\n        }\r\n    }\r\n\r\n    private isFileStatNodeSelectable(node: FileStatNode): boolean {\r\n        return !(!node.fileStat.isDirectory && this._disableFileSelection);\r\n    }\r\n}\r\n"]}