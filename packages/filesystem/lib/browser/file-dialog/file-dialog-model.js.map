{"version":3,"sources":["browser/file-dialog/file-dialog-model.ts"],"names":[],"mappings":"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","file":"../../../src/browser/file-dialog/file-dialog-model.js","sourcesContent":["import {inject, injectable, postConstruct} from 'inversify';\r\nimport {DirNode, FileNode, FileStatNode, FileTreeModel} from '../file-tree';\r\nimport {Emitter, Event} from '@tart/core/lib/common';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {TreeNode} from '@tart/core/lib/browser';\r\nimport {SelectableTreeNode} from '@tart/core';\r\nimport {FileDialogTree} from './file-dialog-tree';\r\n\r\n@injectable()\r\nexport class FileDialogModel extends FileTreeModel {\r\n\r\n    @inject(FileDialogTree) declare readonly tree: FileDialogTree;\r\n    protected readonly onDidOpenFileEmitter = new Emitter<void>();\r\n    protected _initialLocation: URI | undefined;\r\n\r\n    /**\r\n     * Returns the first valid location that was set by calling the `navigateTo` method. Once the initial location has a defined value, it will not change.\r\n     * Can be `undefined`.\r\n     */\r\n    get initialLocation(): URI | undefined {\r\n        return this._initialLocation;\r\n    }\r\n\r\n    private _disableFileSelection: boolean = false;\r\n\r\n    set disableFileSelection(isSelectable: boolean) {\r\n        this._disableFileSelection = isSelectable;\r\n    }\r\n\r\n    get onDidOpenFile(): Event<void> {\r\n        return this.onDidOpenFileEmitter.event;\r\n    }\r\n\r\n    async navigateTo(nodeOrId: TreeNode | string | undefined): Promise<TreeNode | undefined> {\r\n        const result = await super.navigateTo(nodeOrId);\r\n        if (!this._initialLocation && FileStatNode.is(result)) {\r\n            this._initialLocation = result.uri;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getNextSelectableNode(node: SelectableTreeNode = this.selectedNodes[0]): SelectableTreeNode | undefined {\r\n        let nextNode: SelectableTreeNode | undefined = node;\r\n        do {\r\n            nextNode = super.getNextSelectableNode(nextNode);\r\n        } while (FileStatNode.is(nextNode) && !this.isFileStatNodeSelectable(nextNode));\r\n        return nextNode;\r\n    }\r\n\r\n    getPrevSelectableNode(node: SelectableTreeNode = this.selectedNodes[0]): SelectableTreeNode | undefined {\r\n        let prevNode: SelectableTreeNode | undefined = node;\r\n        do {\r\n            prevNode = super.getPrevSelectableNode(prevNode);\r\n        } while (FileStatNode.is(prevNode) && !this.isFileStatNodeSelectable(prevNode));\r\n        return prevNode;\r\n    }\r\n\r\n    canNavigateUpward(): boolean {\r\n        const treeRoot = this.tree.root;\r\n        return FileStatNode.is(treeRoot) && !treeRoot.uri.path.isRoot;\r\n    }\r\n\r\n    @postConstruct()\r\n    protected init(): void {\r\n        super.init();\r\n        this.toDispose.push(this.onDidOpenFileEmitter);\r\n    }\r\n\r\n    protected doOpenNode(node: TreeNode): void {\r\n        if (FileNode.is(node)) {\r\n            this.onDidOpenFileEmitter.fire(undefined);\r\n        } else if (DirNode.is(node)) {\r\n            this.navigateTo(node);\r\n        } else {\r\n            super.doOpenNode(node);\r\n        }\r\n    }\r\n\r\n    private isFileStatNodeSelectable(node: FileStatNode): boolean {\r\n        return !(!node.fileStat.isDirectory && this._disableFileSelection);\r\n    }\r\n}\r\n"]}