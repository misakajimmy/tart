{"version":3,"sources":["browser/file-dialog/file-dialog-tree.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAAC,OAAO,EAAE,QAAQ,EAAC,MAAM,cAAc,CAAC;AAM/C,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,QAAQ;IAA5C;;QAEI;;WAEG;QACO,mBAAc,GAAa,EAAE,CAAC;IA2C5C,CAAC;IAzCG;;;;OAIG;IACH,SAAS,CAAC,cAAwB;QAC9B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,KAAK,EAAE,CAAC;QAC7C,IAAI,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAES,KAAK,CAAC,OAAO,CAAC,QAAkB,EAAE,MAAyB;QACjE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACpB,OAAO,EAAE,CAAC;SACb;QAED,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAC5B,QAAQ,CAAC,QAAQ;aACZ,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACtC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAChD,CAAC;QAEF,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACO,SAAS,CAAC,QAAkB;QAClC,IAAI,QAAQ,CAAC,WAAW,EAAE;YACtB,OAAO,IAAI,CAAC;SACf;QAED,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC;SACf;QAED,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,GAAG,KAAK,CAAC,CAAC;IAC3F,CAAC;CAEJ,CAAA;AAhDY,cAAc;IAD1B,UAAU,EAAE;GACA,cAAc,CAgD1B;SAhDY,cAAc","file":"../../../src/browser/file-dialog/file-dialog-tree.js","sourcesContent":["import {injectable} from 'inversify';\r\nimport {DirNode, FileTree} from '../file-tree';\r\nimport {FileStat} from '../../common/files';\r\nimport {CompositeTreeNode} from '@tart/core/lib/browser';\r\nimport {TreeNode} from '@tart/core';\r\n\r\n@injectable()\r\nexport class FileDialogTree extends FileTree {\r\n\r\n    /**\r\n     * Extensions for files to be shown\r\n     */\r\n    protected fileExtensions: string[] = [];\r\n\r\n    /**\r\n     * Sets extensions for filtering files\r\n     *\r\n     * @param fileExtensions array of extensions\r\n     */\r\n    setFilter(fileExtensions: string[]): void {\r\n        this.fileExtensions = fileExtensions.slice();\r\n        this.refresh();\r\n    }\r\n\r\n    protected async toNodes(fileStat: FileStat, parent: CompositeTreeNode): Promise<TreeNode[]> {\r\n        if (!fileStat.children) {\r\n            return [];\r\n        }\r\n\r\n        const result = await Promise.all(\r\n            fileStat.children\r\n                .filter(child => this.isVisible(child))\r\n                .map(child => this.toNode(child, parent))\r\n        );\r\n\r\n        return result.sort(DirNode.compare);\r\n    }\r\n\r\n    /**\r\n     * Determines whether file or folder can be shown\r\n     *\r\n     * @param fileStat resource to check\r\n     */\r\n    protected isVisible(fileStat: FileStat): boolean {\r\n        if (fileStat.isDirectory) {\r\n            return true;\r\n        }\r\n\r\n        if (this.fileExtensions.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        return !this.fileExtensions.every(value => fileStat.resource.path.ext !== '.' + value);\r\n    }\r\n\r\n}\r\n"]}