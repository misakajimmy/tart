{"version":3,"sources":["browser/file-dialog/file-dialog-tree-filters-renderer.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAC,cAAc,EAAC,MAAM,oBAAoB,CAAC;AAElD,OAAO,EAAC,aAAa,EAAC,MAAM,YAAY,CAAC;AAEzC,eAAO,MAAM,4BAA4B,6BAA6B,CAAC;AAEvE;;;;;;;;;GASG;AACH,qBAAa,qBAAqB;IAC9B,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;CAC5B;AAED,eAAO,MAAM,oCAAoC,eAAiD,CAAC;AAEnG,MAAM,WAAW,oCAAoC;IACjD,CAAC,OAAO,EAAE,oCAAoC,GAAG,6BAA6B,CAAC;CAClF;AAED,eAAO,MAAM,oCAAoC,eAAiD,CAAC;AAEnG,MAAM,WAAW,oCAAoC;IACjD,eAAe,EAAE,qBAAqB,CAAC;IACvC,cAAc,EAAE,cAAc,CAAC;CAClC;AAED,qBACa,6BAA8B,SAAQ,aAAa;IAOV,QAAQ,CAAC,OAAO,EAAE,oCAAoC;IALxG,QAAQ,CAAC,cAAc,EAAE,qBAAqB,CAAC;IAC/C,QAAQ,CAAC,eAAe,EAAE,qBAAqB,CAAC;IAChD,QAAQ,CAAC,cAAc,EAAE,cAAc,CAAC;gBAGmB,OAAO,EAAE,oCAAoC;IAQxG,IAAI,YAAY,IAAI,iBAAiB,GAAG,SAAS,CAMhD;IAED,SAAS,CAAC,QAAQ,CAAC,mBAAmB,MAAO,MAAM,WAAW,CAAC,iBAAiB,CAAC,UAA6B;IAE9G,SAAS,CAAC,QAAQ,IAAI,KAAK,CAAC,SAAS;IAUrC,SAAS,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,GAAG,KAAK,CAAC,SAAS;IAIxD,SAAS,CAAC,eAAe,CAAC,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,iBAAiB,CAAC,GAAG,IAAI;CAY3E","file":"../../../src/browser/file-dialog/file-dialog-tree-filters-renderer.d.ts","sourcesContent":["import React from 'react';\r\nimport {FileDialogTree} from './file-dialog-tree';\r\nimport {inject, injectable} from 'inversify';\r\nimport {ReactRenderer} from '@tart/core';\r\n\r\nexport const FILE_TREE_FILTERS_LIST_CLASS = 'tart-FileTreeFiltersList';\r\n\r\n/**\r\n * A set of file filters that are used by the dialog. Each entry is a human readable label,\r\n * like \"TypeScript\", and an array of extensions, e.g.\r\n * ```ts\r\n * {\r\n *  'Images': ['png', 'jpg']\r\n *  'TypeScript': ['ts', 'tsx']\r\n * }\r\n * ```\r\n */\r\nexport class FileDialogTreeFilters {\r\n    [name: string]: string[];\r\n}\r\n\r\nexport const FileDialogTreeFiltersRendererFactory = Symbol('FileDialogTreeFiltersRendererFactory');\r\n\r\nexport interface FileDialogTreeFiltersRendererFactory {\r\n    (options: FileDialogTreeFiltersRendererOptions): FileDialogTreeFiltersRenderer;\r\n}\r\n\r\nexport const FileDialogTreeFiltersRendererOptions = Symbol('FileDialogTreeFiltersRendererOptions');\r\n\r\nexport interface FileDialogTreeFiltersRendererOptions {\r\n    suppliedFilters: FileDialogTreeFilters;\r\n    fileDialogTree: FileDialogTree;\r\n}\r\n\r\n@injectable()\r\nexport class FileDialogTreeFiltersRenderer extends ReactRenderer {\r\n\r\n    readonly appliedFilters: FileDialogTreeFilters;\r\n    readonly suppliedFilters: FileDialogTreeFilters;\r\n    readonly fileDialogTree: FileDialogTree;\r\n\r\n    constructor(\r\n        @inject(FileDialogTreeFiltersRendererOptions) readonly options: FileDialogTreeFiltersRendererOptions\r\n    ) {\r\n        super();\r\n        this.suppliedFilters = options.suppliedFilters;\r\n        this.fileDialogTree = options.fileDialogTree;\r\n        this.appliedFilters = {...this.suppliedFilters, 'All Files': [],};\r\n    }\r\n\r\n    get locationList(): HTMLSelectElement | undefined {\r\n        const locationList = this.host.getElementsByClassName(FILE_TREE_FILTERS_LIST_CLASS)[0];\r\n        if (locationList instanceof HTMLSelectElement) {\r\n            return locationList;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected readonly handleFilterChanged = (e: React.ChangeEvent<HTMLSelectElement>) => this.onFilterChanged(e);\r\n\r\n    protected doRender(): React.ReactNode {\r\n        if (!this.appliedFilters) {\r\n            return undefined;\r\n        }\r\n\r\n        const options = Object.keys(this.appliedFilters).map(value => this.renderLocation(value));\r\n        return <select className={'tart-select ' + FILE_TREE_FILTERS_LIST_CLASS}\r\n                       onChange={this.handleFilterChanged}>{...options}</select>;\r\n    }\r\n\r\n    protected renderLocation(value: string): React.ReactNode {\r\n        return <option value={value} key={value}>{value}</option>;\r\n    }\r\n\r\n    protected onFilterChanged(e: React.ChangeEvent<HTMLSelectElement>): void {\r\n        const locationList = this.locationList;\r\n        if (locationList) {\r\n            const value = locationList.value;\r\n            const filters = this.appliedFilters[value];\r\n            this.fileDialogTree.setFilter(filters);\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n}\r\n"]}