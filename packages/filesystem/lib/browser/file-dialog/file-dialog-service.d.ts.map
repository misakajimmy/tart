{"version":3,"sources":["browser/file-dialog/file-dialog-service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,qBAAqB,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,mBAAmB,EAAC,MAAM,eAAe,CAAC;AACrH,OAAO,EAAC,QAAQ,EAAC,MAAM,oBAAoB,CAAC;AAC5C,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,EAAC,UAAU,EAAC,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAC,WAAW,EAAC,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAC,aAAa,EAAC,MAAM,wBAAwB,CAAC;AACrD,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AAErC,eAAO,MAAM,iBAAiB,eAA8B,CAAC;AAE7D,MAAM,WAAW,iBAAiB;IAE9B,cAAc,CAAC,KAAK,EAAE,mBAAmB,GAAG;QAAE,aAAa,EAAE,IAAI,CAAA;KAAE,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC;IAE9H,cAAc,CAAC,KAAK,EAAE,mBAAmB,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAG,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;IAExF,cAAc,CAAC,KAAK,EAAE,mBAAmB,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC;IAEpG,cAAc,CAAC,KAAK,EAAE,mBAAmB,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAG,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC,CAAA;CAE1F;AAED,qBACa,wBAAyB,YAAW,iBAAiB;IAG9D,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC;IAEb,SAAS,CAAC,QAAQ,CAAC,qBAAqB,EAAE,qBAAqB,CAAC;IACxE,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC;IACxC,SAAS,CAAC,QAAQ,CAAC,qBAAqB,EAAE,qBAAqB,CAAC;IAEzF,cAAc,CAAC,KAAK,EAAE,mBAAmB,GAAG;QAAE,aAAa,EAAE,IAAI,CAAA;KAAE,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;IAC7H,cAAc,CAAC,KAAK,EAAE,mBAAmB,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAG,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC;IAkBvF,cAAc,CAAC,KAAK,EAAE,mBAAmB,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAG,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC;cAW7E,WAAW,CAAC,YAAY,CAAC,EAAE,QAAQ,GAAG,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC;CAgBrF","file":"../../../src/browser/file-dialog/file-dialog-service.d.ts","sourcesContent":["import {OpenFileDialogFactory, OpenFileDialogProps, SaveFileDialogFactory, SaveFileDialogProps} from './file-dialog';\r\nimport {FileStat} from '../../common/files';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {MaybeArray} from '@tart/core/lib/common';\r\nimport {inject, injectable} from 'inversify';\r\nimport {FileService} from '../file-service';\r\nimport {LabelProvider} from '@tart/core/lib/browser';\r\nimport {DirNode} from '../file-tree';\r\n\r\nexport const FileDialogService = Symbol('FileDialogService');\r\n\r\nexport interface FileDialogService {\r\n\r\n    showOpenDialog(props: OpenFileDialogProps & { canSelectMany: true }, folder?: FileStat): Promise<MaybeArray<URI> | undefined>;\r\n\r\n    showOpenDialog(props: OpenFileDialogProps, folder?: FileStat): Promise<URI | undefined>;\r\n\r\n    showOpenDialog(props: OpenFileDialogProps, folder?: FileStat): Promise<MaybeArray<URI> | undefined>;\r\n\r\n    showSaveDialog(props: SaveFileDialogProps, folder?: FileStat): Promise<URI | undefined>\r\n\r\n}\r\n\r\n@injectable()\r\nexport class DefaultFileDialogService implements FileDialogService {\r\n\r\n    @inject(FileService)\r\n    protected readonly fileService: FileService;\r\n\r\n    @inject(OpenFileDialogFactory) protected readonly openFileDialogFactory: OpenFileDialogFactory;\r\n    @inject(LabelProvider) protected readonly labelProvider: LabelProvider;\r\n    @inject(SaveFileDialogFactory) protected readonly saveFileDialogFactory: SaveFileDialogFactory;\r\n\r\n    async showOpenDialog(props: OpenFileDialogProps & { canSelectMany: true }, folder?: FileStat): Promise<MaybeArray<URI> | undefined>;\r\n    async showOpenDialog(props: OpenFileDialogProps, folder?: FileStat): Promise<URI | undefined>;\r\n    async showOpenDialog(props: OpenFileDialogProps, folder?: FileStat): Promise<MaybeArray<URI> | undefined> {\r\n        const title = props.title || 'Open';\r\n        const rootNode = await this.getRootNode(folder);\r\n        if (rootNode) {\r\n            const dialog = this.openFileDialogFactory(Object.assign(props, {title}));\r\n            await dialog.model.navigateTo(rootNode);\r\n            const value = await dialog.open();\r\n            if (value) {\r\n                if (!Array.isArray(value)) {\r\n                    return value.uri;\r\n                }\r\n                return value.map(node => node.uri);\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    async showSaveDialog(props: SaveFileDialogProps, folder?: FileStat): Promise<URI | undefined> {\r\n        const title = props.title || 'Save';\r\n        const rootNode = await this.getRootNode(folder);\r\n        if (rootNode) {\r\n            const dialog = this.saveFileDialogFactory(Object.assign(props, {title}));\r\n            await dialog.model.navigateTo(rootNode);\r\n            return dialog.open();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected async getRootNode(folderToOpen?: FileStat): Promise<DirNode | undefined> {\r\n        const folderExists = folderToOpen && await this.fileService.exists(folderToOpen.resource);\r\n        const folder = folderToOpen && folderExists ? folderToOpen : {\r\n            // resource: new URI(await this.environments.getHomeDirUri()),\r\n            resource: new URI(),\r\n            isDirectory: true\r\n        };\r\n        const folderUri = folder.resource;\r\n        const rootUri = folder.isDirectory ? folderUri : folderUri.parent;\r\n        try {\r\n            const rootStat = await this.fileService.resolve(rootUri);\r\n            return DirNode.createRoot(rootStat);\r\n        } catch {\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n"]}