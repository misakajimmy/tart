{"version":3,"sources":["browser/file-dialog/file-dialog-tree-filters-renderer.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,WAAW,CAAC;AAC7C,OAAO,EAAC,aAAa,EAAC,MAAM,YAAY,CAAC;AAEzC,MAAM,CAAC,MAAM,4BAA4B,GAAG,0BAA0B,CAAC;AAEvE;;;;;;;;;GASG;AACH,MAAM,OAAO,qBAAqB;CAEjC;AAED,MAAM,CAAC,MAAM,oCAAoC,GAAG,MAAM,CAAC,sCAAsC,CAAC,CAAC;AAMnG,MAAM,CAAC,MAAM,oCAAoC,GAAG,MAAM,CAAC,sCAAsC,CAAC,CAAC;AAQnG,IAAa,6BAA6B,GAA1C,MAAa,6BAA8B,SAAQ,aAAa;IAM5D,YAC2D,OAA6C;QAEpG,KAAK,EAAE,CAAC;QAF+C,YAAO,GAAP,OAAO,CAAsC;QAgBrF,wBAAmB,GAAG,CAAC,CAAuC,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAb1G,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;QAC/C,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,cAAc,mCAAO,IAAI,CAAC,eAAe,KAAE,WAAW,EAAE,EAAE,GAAE,CAAC;IACtE,CAAC;IAED,IAAI,YAAY;QACZ,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,4BAA4B,CAAC,CAAC,CAAC,CAAC,CAAC;QACvF,IAAI,YAAY,YAAY,iBAAiB,EAAE;YAC3C,OAAO,YAAY,CAAC;SACvB;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAIS,QAAQ;QACd,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACtB,OAAO,SAAS,CAAC;SACpB;QAED,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1F,OAAO,gCAAQ,SAAS,EAAE,cAAc,GAAG,4BAA4B,EACxD,QAAQ,EAAE,IAAI,CAAC,mBAAmB,OAAM,OAAO,CAAU,CAAC;IAC7E,CAAC;IAES,cAAc,CAAC,KAAa;QAClC,OAAO,gCAAQ,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,IAAG,KAAK,CAAU,CAAC;IAC9D,CAAC;IAES,eAAe,CAAC,CAAuC;QAC7D,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,IAAI,YAAY,EAAE;YACd,MAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;YACjC,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SAC1C;QAED,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,CAAC,CAAC,eAAe,EAAE,CAAC;IACxB,CAAC;CAEJ,CAAA;AAnDY,6BAA6B;IADzC,UAAU,EAAE;IAQJ,WAAA,MAAM,CAAC,oCAAoC,CAAC,CAAA;GAPxC,6BAA6B,CAmDzC;SAnDY,6BAA6B","file":"../../../src/browser/file-dialog/file-dialog-tree-filters-renderer.js","sourcesContent":["import React from 'react';\r\nimport {FileDialogTree} from './file-dialog-tree';\r\nimport {inject, injectable} from 'inversify';\r\nimport {ReactRenderer} from '@tart/core';\r\n\r\nexport const FILE_TREE_FILTERS_LIST_CLASS = 'tart-FileTreeFiltersList';\r\n\r\n/**\r\n * A set of file filters that are used by the dialog. Each entry is a human readable label,\r\n * like \"TypeScript\", and an array of extensions, e.g.\r\n * ```ts\r\n * {\r\n *  'Images': ['png', 'jpg']\r\n *  'TypeScript': ['ts', 'tsx']\r\n * }\r\n * ```\r\n */\r\nexport class FileDialogTreeFilters {\r\n    [name: string]: string[];\r\n}\r\n\r\nexport const FileDialogTreeFiltersRendererFactory = Symbol('FileDialogTreeFiltersRendererFactory');\r\n\r\nexport interface FileDialogTreeFiltersRendererFactory {\r\n    (options: FileDialogTreeFiltersRendererOptions): FileDialogTreeFiltersRenderer;\r\n}\r\n\r\nexport const FileDialogTreeFiltersRendererOptions = Symbol('FileDialogTreeFiltersRendererOptions');\r\n\r\nexport interface FileDialogTreeFiltersRendererOptions {\r\n    suppliedFilters: FileDialogTreeFilters;\r\n    fileDialogTree: FileDialogTree;\r\n}\r\n\r\n@injectable()\r\nexport class FileDialogTreeFiltersRenderer extends ReactRenderer {\r\n\r\n    readonly appliedFilters: FileDialogTreeFilters;\r\n    readonly suppliedFilters: FileDialogTreeFilters;\r\n    readonly fileDialogTree: FileDialogTree;\r\n\r\n    constructor(\r\n        @inject(FileDialogTreeFiltersRendererOptions) readonly options: FileDialogTreeFiltersRendererOptions\r\n    ) {\r\n        super();\r\n        this.suppliedFilters = options.suppliedFilters;\r\n        this.fileDialogTree = options.fileDialogTree;\r\n        this.appliedFilters = {...this.suppliedFilters, 'All Files': [],};\r\n    }\r\n\r\n    get locationList(): HTMLSelectElement | undefined {\r\n        const locationList = this.host.getElementsByClassName(FILE_TREE_FILTERS_LIST_CLASS)[0];\r\n        if (locationList instanceof HTMLSelectElement) {\r\n            return locationList;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected readonly handleFilterChanged = (e: React.ChangeEvent<HTMLSelectElement>) => this.onFilterChanged(e);\r\n\r\n    protected doRender(): React.ReactNode {\r\n        if (!this.appliedFilters) {\r\n            return undefined;\r\n        }\r\n\r\n        const options = Object.keys(this.appliedFilters).map(value => this.renderLocation(value));\r\n        return <select className={'tart-select ' + FILE_TREE_FILTERS_LIST_CLASS}\r\n                       onChange={this.handleFilterChanged}>{...options}</select>;\r\n    }\r\n\r\n    protected renderLocation(value: string): React.ReactNode {\r\n        return <option value={value} key={value}>{value}</option>;\r\n    }\r\n\r\n    protected onFilterChanged(e: React.ChangeEvent<HTMLSelectElement>): void {\r\n        const locationList = this.locationList;\r\n        if (locationList) {\r\n            const value = locationList.value;\r\n            const filters = this.appliedFilters[value];\r\n            this.fileDialogTree.setFilter(filters);\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n}\r\n"]}