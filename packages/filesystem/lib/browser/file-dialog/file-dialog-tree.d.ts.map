{"version":3,"sources":["browser/file-dialog/file-dialog-tree.ts"],"names":[],"mappings":"AACA,OAAO,EAAU,QAAQ,EAAC,MAAM,cAAc,CAAC;AAC/C,OAAO,EAAC,QAAQ,EAAC,MAAM,oBAAoB,CAAC;AAC5C,OAAO,EAAC,iBAAiB,EAAC,MAAM,wBAAwB,CAAC;AACzD,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;AAEpC,qBACa,cAAe,SAAQ,QAAQ;IAExC;;OAEG;IACH,SAAS,CAAC,cAAc,EAAE,MAAM,EAAE,CAAM;IAExC;;;;OAIG;IACH,SAAS,CAAC,cAAc,EAAE,MAAM,EAAE,GAAG,IAAI;cAKzB,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,iBAAiB,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;IAc3F;;;;OAIG;IACH,SAAS,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,GAAG,OAAO;CAYnD","file":"../../../src/browser/file-dialog/file-dialog-tree.d.ts","sourcesContent":["import {injectable} from 'inversify';\r\nimport {DirNode, FileTree} from '../file-tree';\r\nimport {FileStat} from '../../common/files';\r\nimport {CompositeTreeNode} from '@tart/core/lib/browser';\r\nimport {TreeNode} from '@tart/core';\r\n\r\n@injectable()\r\nexport class FileDialogTree extends FileTree {\r\n\r\n    /**\r\n     * Extensions for files to be shown\r\n     */\r\n    protected fileExtensions: string[] = [];\r\n\r\n    /**\r\n     * Sets extensions for filtering files\r\n     *\r\n     * @param fileExtensions array of extensions\r\n     */\r\n    setFilter(fileExtensions: string[]): void {\r\n        this.fileExtensions = fileExtensions.slice();\r\n        this.refresh();\r\n    }\r\n\r\n    protected async toNodes(fileStat: FileStat, parent: CompositeTreeNode): Promise<TreeNode[]> {\r\n        if (!fileStat.children) {\r\n            return [];\r\n        }\r\n\r\n        const result = await Promise.all(\r\n            fileStat.children\r\n                .filter(child => this.isVisible(child))\r\n                .map(child => this.toNode(child, parent))\r\n        );\r\n\r\n        return result.sort(DirNode.compare);\r\n    }\r\n\r\n    /**\r\n     * Determines whether file or folder can be shown\r\n     *\r\n     * @param fileStat resource to check\r\n     */\r\n    protected isVisible(fileStat: FileStat): boolean {\r\n        if (fileStat.isDirectory) {\r\n            return true;\r\n        }\r\n\r\n        if (this.fileExtensions.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        return !this.fileExtensions.every(value => fileStat.resource.path.ext !== '.' + value);\r\n    }\r\n\r\n}\r\n"]}