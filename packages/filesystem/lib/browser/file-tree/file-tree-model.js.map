{"version":3,"sources":["browser/file-tree/file-tree-model.ts"],"names":[],"mappings":"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","file":"../../../src/browser/file-tree/file-tree-model.js","sourcesContent":["import {ConfirmDialog, LabelProvider, TreeModelImpl, TreeNode} from '@tart/core';\r\nimport {inject, injectable, postConstruct} from 'inversify';\r\nimport {FileService} from '../file-service';\r\nimport {DirNode, FileNode, FileStatNode} from './file-tree';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {MessageService} from '@tart/core/lib/common';\r\nimport {FileSystemUtils} from './filesystem-utils';\r\nimport {\r\n    FileChange,\r\n    FileChangesEvent,\r\n    FileChangeType,\r\n    FileOperation,\r\n    FileOperationError,\r\n    FileOperationEvent,\r\n    FileOperationResult\r\n} from '../../common/files';\r\nimport {LocationService} from '../location';\r\nimport {CompositeTreeNode} from '@tart/core/lib/browser';\r\n\r\n@injectable()\r\nexport class FileTreeModel extends TreeModelImpl implements LocationService {\r\n\r\n    @inject(LabelProvider) protected readonly labelProvider: LabelProvider;\r\n\r\n    @inject(FileService)\r\n    protected readonly fileService: FileService;\r\n\r\n    @inject(MessageService)\r\n    protected readonly messageService: MessageService;\r\n\r\n    get location(): URI | undefined {\r\n        const root = this.root;\r\n        if (FileStatNode.is(root)) {\r\n            return root.uri;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    set location(uri: URI | undefined) {\r\n        if (uri) {\r\n            this.fileService.resolve(uri).then(fileStat => {\r\n                if (fileStat) {\r\n                    const node = DirNode.createRoot(fileStat);\r\n                    this.navigateTo(node);\r\n                }\r\n            }).catch(() => {\r\n                // no-op, allow failures for file dialog text input\r\n            });\r\n        } else {\r\n            this.navigateTo(undefined);\r\n        }\r\n    }\r\n\r\n    get selectedFileStatNodes(): Readonly<FileStatNode>[] {\r\n        return this.selectedNodes.filter(FileStatNode.is);\r\n    }\r\n\r\n    async drives(): Promise<URI[]> {\r\n        try {\r\n            // const drives = await this.environments.getDrives();\r\n            // return drives.map(uri => new URI(uri));\r\n            return [];\r\n        } catch (e) {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    * getNodesByUri(uri: URI): IterableIterator<TreeNode> {\r\n        const node = this.getNode(uri.toString());\r\n        if (node) {\r\n            yield node;\r\n        }\r\n    }\r\n\r\n    async copy(source: URI, target: Readonly<FileStatNode>): Promise<URI> {\r\n        let targetUri = target.uri.resolve(source.path.base);\r\n        try {\r\n            if (source.path.toString() === target.uri.path.toString()) {\r\n                const parent = await this.fileService.resolve(source.parent);\r\n                const name = source.path.name + '_copy';\r\n                targetUri = FileSystemUtils.generateUniqueResourceURI(source.parent, parent, name, source.path.ext);\r\n            }\r\n            await this.fileService.copy(source, targetUri);\r\n        } catch (e) {\r\n            this.messageService.error(e.message);\r\n        }\r\n        return targetUri;\r\n    }\r\n\r\n    /**\r\n     * Move the given source file or directory to the given target directory.\r\n     */\r\n    async move(source: TreeNode, target: TreeNode): Promise<URI | undefined> {\r\n        if (DirNode.is(target) && FileStatNode.is(source)) {\r\n            const name = source.fileStat.name;\r\n            const targetUri = target.uri.resolve(name);\r\n            try {\r\n                await this.fileService.move(source.uri, targetUri);\r\n                return targetUri;\r\n            } catch (e) {\r\n                console.log(e);\r\n                if (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_MOVE_CONFLICT) {\r\n                    const fileName = this.labelProvider.getName(source);\r\n                    if (await this.shouldReplace(fileName)) {\r\n                        try {\r\n                            await this.fileService.move(source.uri, targetUri, {overwrite: true});\r\n                            return targetUri;\r\n                        } catch (e2) {\r\n                            this.messageService.error(e2.message);\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.messageService.error(e.message);\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    @postConstruct()\r\n    protected init(): void {\r\n        super.init();\r\n        this.toDispose.push(this.fileService.onDidFilesChange(changes => this.onFilesChanged(changes)));\r\n        this.toDispose.push(this.fileService.onDidRunOperation(event => this.onDidMove(event)));\r\n    }\r\n\r\n    /**\r\n     * to workaround https://github.com/Axosoft/nsfw/issues/42\r\n     */\r\n    protected onDidMove(event: FileOperationEvent): void {\r\n        if (!event.isOperation(FileOperation.MOVE)) {\r\n            return;\r\n        }\r\n        if (event.resource.parent.toString() === event.target.resource.parent.toString()) {\r\n            // file rename\r\n            return;\r\n        }\r\n        this.refreshAffectedNodes([\r\n            event.resource,\r\n            event.target.resource\r\n        ]);\r\n    }\r\n\r\n    protected onFilesChanged(changes: FileChangesEvent): void {\r\n        if (!this.refreshAffectedNodes(this.getAffectedUris(changes))) {\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    protected isRootAffected(changes: FileChangesEvent): boolean {\r\n        const root = this.root;\r\n        if (FileStatNode.is(root)) {\r\n            return changes.contains(root.uri, FileChangeType.ADDED) || changes.contains(root.uri, FileChangeType.UPDATED);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected getAffectedUris(changes: FileChangesEvent): URI[] {\r\n        return changes.changes.filter(change => !this.isFileContentChanged(change)).map(change => change.resource);\r\n    }\r\n\r\n    protected isFileContentChanged(change: FileChange): boolean {\r\n        return change.type === FileChangeType.UPDATED && FileNode.is(this.getNodesByUri(change.resource).next().value);\r\n    }\r\n\r\n    protected refreshAffectedNodes(uris: URI[]): boolean {\r\n        const nodes = this.getAffectedNodes(uris);\r\n        for (const node of nodes.values()) {\r\n            this.refresh(node);\r\n        }\r\n        return nodes.size !== 0;\r\n    }\r\n\r\n    protected getAffectedNodes(uris: URI[]): Map<string, CompositeTreeNode> {\r\n        const nodes = new Map<string, CompositeTreeNode>();\r\n        for (const uri of uris) {\r\n            for (const node of this.getNodesByUri(uri.parent)) {\r\n                if (DirNode.is(node) && node.expanded) {\r\n                    nodes.set(node.id, node);\r\n                }\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    protected async shouldReplace(fileName: string): Promise<boolean> {\r\n        const dialog = new ConfirmDialog({\r\n            title: 'Replace file',\r\n            msg: `File '${fileName}' already exists in the destination folder. Do you want to replace it?`,\r\n            ok: 'Yes',\r\n            cancel: 'No'\r\n        });\r\n        return !!await dialog.open();\r\n    }\r\n\r\n}\r\n"]}