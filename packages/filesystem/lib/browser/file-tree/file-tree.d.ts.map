{"version":3,"sources":["browser/file-tree/file-tree.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,QAAQ,EAAE,QAAQ,EAAC,MAAM,YAAY,CAAC;AACzG,OAAO,EAAC,cAAc,EAAE,OAAO,EAAE,YAAY,EAAC,MAAM,uBAAuB,CAAC;AAC5E,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAC,QAAQ,IAAI,kBAAkB,EAAC,MAAM,yBAAyB,CAAC;AACvE,OAAO,EAA0C,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAC,MAAM,oBAAoB,CAAC;AAErG,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,EAAC,WAAW,EAAC,MAAM,iBAAiB,CAAC;AAE5C,qBACa,QAAS,SAAQ,QAAQ;IAGlC,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC;IAG5C,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,cAAc,CAAC;IAE9C,eAAe,CAAC,MAAM,EAAE,iBAAiB,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;cAWrD,eAAe,CAAC,IAAI,EAAE,YAAY,GAAG,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;cAalE,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,iBAAiB,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;IAU3F,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,iBAAiB,GAAG,QAAQ,GAAG,OAAO;IA0BnF,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,iBAAiB,GAAG,MAAM;CAGlE;AAED,MAAM,WAAW,YAAa,SAAQ,kBAAkB,EAAE,OAAO,CAAC,YAAY,CAAC,EAAE,aAAa;CAC7F;AAED,yBAAiB,YAAY,CAAC;IAC1B,SAAgB,EAAE,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,GAAG,IAAI,IAAI,YAAY,CAEjE;IAED,SAAgB,MAAM,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,MAAM,GAAG,SAAS,CAKrE;CACJ;AAED,oBAAY,gBAAgB,GAAG,IAAI,CAAC,YAAY,EAAE,KAAK,GAAG,UAAU,CAAC,GAAG;IACpE,GAAG,EAAE,MAAM,CAAA;IACX,IAAI,CAAC,EAAE,IAAI,GAAG;QAAE,IAAI,EAAE,QAAQ,CAAA;KAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;IAChD,QAAQ,CAAC,EAAE,kBAAkB,CAAA;CAChC,CAAC;AACF,yBAAiB,gBAAgB,CAAC;IAC9B,SAAgB,EAAE,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,GAAG,IAAI,IAAI,gBAAgB,CAErE;CACJ;AAED,oBAAY,QAAQ,GAAG,YAAY,CAAC;AACpC,yBAAiB,QAAQ,CAAC;IACtB,SAAgB,EAAE,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,GAAG,IAAI,IAAI,QAAQ,CAE7D;CACJ;AAED,oBAAY,OAAO,GAAG,YAAY,GAAG,kBAAkB,CAAC;AACxD,yBAAiB,OAAO,CAAC;IACrB,SAAgB,EAAE,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,GAAG,IAAI,IAAI,OAAO,CAE5D;IAED,SAAgB,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,GAAG,MAAM,CAE/D;IAED,SAAgB,UAAU,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,GAAG,MAAM,CAWlE;IAED,SAAgB,UAAU,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,GAAG,MAAM,CAIlE;IAED,SAAgB,UAAU,CAAC,QAAQ,EAAE,QAAQ,GAAG,OAAO,CAWtD;IAED,SAAgB,gBAAgB,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,OAAO,GAAG,SAAS,CAMhF;CACJ","file":"../../../src/browser/file-tree/file-tree.d.ts","sourcesContent":["import {CompositeTreeNode, ExpandableTreeNode, SelectableTreeNode, TreeImpl, TreeNode} from '@tart/core';\r\nimport {MessageService, Mutable, UriSelection} from '@tart/core/lib/common';\r\nimport {FileSelection} from '../file-selection';\r\nimport {FileStat as DeprecatedFileStat} from '../../common/filesystem';\r\nimport {FileOperationError, FileOperationResult, FileStat, FileType, Stat} from '../../common/files';\r\nimport {inject, injectable} from 'inversify';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {FileService} from '../file-service';\r\n\r\n@injectable()\r\nexport class FileTree extends TreeImpl {\r\n\r\n    @inject(FileService)\r\n    protected readonly fileService: FileService;\r\n\r\n    @inject(MessageService)\r\n    protected readonly messagingService: MessageService;\r\n\r\n    async resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]> {\r\n        if (FileStatNode.is(parent)) {\r\n            const fileStat = await this.resolveFileStat(parent);\r\n            if (fileStat) {\r\n                return this.toNodes(fileStat, parent);\r\n            }\r\n            return [];\r\n        }\r\n        return super.resolveChildren(parent);\r\n    }\r\n\r\n    protected async resolveFileStat(node: FileStatNode): Promise<FileStat | undefined> {\r\n        try {\r\n            const fileStat = await this.fileService.resolve(node.uri);\r\n            node.fileStat = fileStat;\r\n            return fileStat;\r\n        } catch (e) {\r\n            if (!(e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND)) {\r\n                this.messagingService.error(e.message);\r\n            }\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected async toNodes(fileStat: FileStat, parent: CompositeTreeNode): Promise<TreeNode[]> {\r\n        if (!fileStat.children) {\r\n            return [];\r\n        }\r\n        const result = await Promise.all(fileStat.children.map(async child =>\r\n            this.toNode(child, parent)\r\n        ));\r\n        return result.sort(DirNode.compare);\r\n    }\r\n\r\n    protected toNode(fileStat: FileStat, parent: CompositeTreeNode): FileNode | DirNode {\r\n        const uri = fileStat.resource;\r\n        const id = this.toNodeId(uri, parent);\r\n        const node = this.getNode(id);\r\n        if (fileStat.isDirectory) {\r\n            if (DirNode.is(node)) {\r\n                node.fileStat = fileStat;\r\n                return node;\r\n            }\r\n            return <DirNode>{\r\n                id, uri, fileStat, parent,\r\n                expanded: false,\r\n                selected: false,\r\n                children: []\r\n            };\r\n        }\r\n        if (FileNode.is(node)) {\r\n            node.fileStat = fileStat;\r\n            return node;\r\n        }\r\n        return <FileNode>{\r\n            id, uri, fileStat, parent,\r\n            selected: false\r\n        };\r\n    }\r\n\r\n    protected toNodeId(uri: URI, parent: CompositeTreeNode): string {\r\n        return uri.path.toString();\r\n    }\r\n}\r\n\r\nexport interface FileStatNode extends SelectableTreeNode, Mutable<UriSelection>, FileSelection {\r\n}\r\n\r\nexport namespace FileStatNode {\r\n    export function is(node: object | undefined): node is FileStatNode {\r\n        return !!node && 'fileStat' in node;\r\n    }\r\n\r\n    export function getUri(node: TreeNode | undefined): string | undefined {\r\n        if (is(node)) {\r\n            return node.fileStat.resource.toString();\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport type FileStatNodeData = Omit<FileStatNode, 'uri' | 'fileStat'> & {\r\n    uri: string\r\n    stat?: Stat | { type: FileType } & Partial<Stat>\r\n    fileStat?: DeprecatedFileStat\r\n};\r\nexport namespace FileStatNodeData {\r\n    export function is(node: object | undefined): node is FileStatNodeData {\r\n        return !!node && 'uri' in node && ('fileStat' in node || 'stat' in node);\r\n    }\r\n}\r\n\r\nexport type FileNode = FileStatNode;\r\nexport namespace FileNode {\r\n    export function is(node: Object | undefined): node is FileNode {\r\n        return FileStatNode.is(node) && !node.fileStat.isDirectory;\r\n    }\r\n}\r\n\r\nexport type DirNode = FileStatNode & ExpandableTreeNode;\r\nexport namespace DirNode {\r\n    export function is(node: Object | undefined): node is DirNode {\r\n        return FileStatNode.is(node) && node.fileStat.isDirectory;\r\n    }\r\n\r\n    export function compare(node: TreeNode, node2: TreeNode): number {\r\n        return DirNode.dirCompare(node, node2) || uriCompare(node, node2);\r\n    }\r\n\r\n    export function uriCompare(node: TreeNode, node2: TreeNode): number {\r\n        if (FileStatNode.is(node)) {\r\n            if (FileStatNode.is(node2)) {\r\n                return node.uri.displayName.localeCompare(node2.uri.displayName);\r\n            }\r\n            return 1;\r\n        }\r\n        if (FileStatNode.is(node2)) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    export function dirCompare(node: TreeNode, node2: TreeNode): number {\r\n        const a = DirNode.is(node) ? 1 : 0;\r\n        const b = DirNode.is(node2) ? 1 : 0;\r\n        return b - a;\r\n    }\r\n\r\n    export function createRoot(fileStat: FileStat): DirNode {\r\n        const uri = fileStat.resource;\r\n        const id = uri.toString();\r\n        return {\r\n            id, uri, fileStat,\r\n            visible: true,\r\n            parent: undefined,\r\n            children: [],\r\n            expanded: true,\r\n            selected: false\r\n        };\r\n    }\r\n\r\n    export function getContainingDir(node: TreeNode | undefined): DirNode | undefined {\r\n        let containing = node;\r\n        while (!!containing && !is(containing)) {\r\n            containing = containing.parent;\r\n        }\r\n        return containing as DirNode;\r\n    }\r\n}\r\n"]}