{"version":3,"sources":["browser/file-tree/file-tree-widget.tsx"],"names":[],"mappings":"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","file":"../../../src/browser/file-tree/file-tree-widget.d.ts","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport React from 'react';\r\nimport {\r\n    CompositeTreeNode,\r\n    ContextMenuRenderer,\r\n    NodeProps,\r\n    TreeNode,\r\n    TreeProps,\r\n    TreeViewWelcomeWidget\r\n} from '@tart/core';\r\nimport {Disposable, DisposableCollection, isCancelled, UriSelection} from '@tart/core/lib/common';\r\nimport {IconThemeService} from '@tart/core/lib/browser/icon-theme-service';\r\nimport {FileTreeModel} from './file-tree-model';\r\nimport {DirNode, FileStatNode, FileStatNodeData} from './file-tree';\r\nimport {FileStat, FileType} from '../../common/files';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {FileUploadService} from '../file-upload-service';\r\n\r\nexport const FILE_TREE_CLASS = 'tart-FileTree';\r\nexport const FILE_STAT_NODE_CLASS = 'tart-FileStatNode';\r\nexport const DIR_NODE_CLASS = 'tart-DirNode';\r\nexport const FILE_STAT_ICON_CLASS = 'tart-FileStatIcon';\r\n\r\n\r\n@injectable()\r\nexport class FileTreeWidget extends TreeViewWelcomeWidget {\r\n\r\n    protected readonly toCancelNodeExpansion = new DisposableCollection();\r\n\r\n    @inject(IconThemeService)\r\n    protected readonly iconThemeService: IconThemeService;\r\n\r\n    @inject(FileUploadService)\r\n    protected readonly uploadService: FileUploadService;\r\n\r\n    constructor(\r\n        @inject(TreeProps) readonly props: TreeProps,\r\n        @inject(FileTreeModel) readonly model: FileTreeModel,\r\n        @inject(ContextMenuRenderer) contextMenuRenderer: ContextMenuRenderer\r\n    ) {\r\n        super(props, model, contextMenuRenderer);\r\n        this.addClass(FILE_TREE_CLASS);\r\n        this.toDispose.push(this.toCancelNodeExpansion);\r\n    }\r\n\r\n    protected get hidesExplorerArrows(): boolean {\r\n        const theme = this.iconThemeService.getDefinition(this.iconThemeService.current);\r\n        return !!theme && !!theme.hidesExplorerArrows;\r\n    }\r\n\r\n    protected createNodeClassNames(node: TreeNode, props: NodeProps): string[] {\r\n        const classNames = super.createNodeClassNames(node, props);\r\n        if (FileStatNode.is(node)) {\r\n            classNames.push(FILE_STAT_NODE_CLASS);\r\n        }\r\n        if (DirNode.is(node)) {\r\n            classNames.push(DIR_NODE_CLASS);\r\n        }\r\n        return classNames;\r\n    }\r\n\r\n    protected renderIcon(node: TreeNode, props: NodeProps): React.ReactNode {\r\n        const icon = this.toNodeIcon(node);\r\n        if (icon) {\r\n            return <div className={icon + ' file-icon'}></div>;\r\n        }\r\n        // eslint-disable-next-line no-null/no-null\r\n        return null;\r\n    }\r\n\r\n    protected createContainerAttributes(): React.HTMLAttributes<HTMLElement> {\r\n        const attrs = super.createContainerAttributes();\r\n        return {\r\n            ...attrs,\r\n            onDragEnter: event => this.handleDragEnterEvent(this.model.root, event),\r\n            onDragOver: event => this.handleDragOverEvent(this.model.root, event),\r\n            onDragLeave: event => this.handleDragLeaveEvent(this.model.root, event),\r\n            onDrop: event => this.handleDropEvent(this.model.root, event)\r\n        };\r\n    }\r\n\r\n    protected createNodeAttributes(node: TreeNode, props: NodeProps): React.Attributes & React.HTMLAttributes<HTMLElement> {\r\n        const elementAttrs = super.createNodeAttributes(node, props);\r\n        return {\r\n            ...elementAttrs,\r\n            draggable: FileStatNode.is(node),\r\n            onDragStart: event => this.handleDragStartEvent(node, event),\r\n            onDragEnter: event => this.handleDragEnterEvent(node, event),\r\n            onDragOver: event => this.handleDragOverEvent(node, event),\r\n            onDragLeave: event => this.handleDragLeaveEvent(node, event),\r\n            onDrop: event => this.handleDropEvent(node, event),\r\n            title: this.getNodeTooltip(node)\r\n        };\r\n    }\r\n\r\n    protected getNodeTooltip(node: TreeNode): string | undefined {\r\n        const uri = UriSelection.getUri(node);\r\n        return uri ? uri.path.toString() : undefined;\r\n    }\r\n\r\n    protected handleDragStartEvent(node: TreeNode, event: React.DragEvent): void {\r\n        event.stopPropagation();\r\n        let selectedNodes;\r\n        if (this.model.selectedNodes.find(selected => TreeNode.equals(selected, node))) {\r\n            selectedNodes = [...this.model.selectedNodes];\r\n        } else {\r\n            selectedNodes = [node];\r\n        }\r\n        this.setSelectedTreeNodesAsData(event.dataTransfer, node, selectedNodes);\r\n        if (event.dataTransfer) {\r\n            let label: string;\r\n            if (selectedNodes.length === 1) {\r\n                label = this.toNodeName(node);\r\n            } else {\r\n                label = String(selectedNodes.length);\r\n            }\r\n            const dragImage = document.createElement('div');\r\n            dragImage.className = 'tart-file-tree-drag-image';\r\n            dragImage.textContent = label;\r\n            document.body.appendChild(dragImage);\r\n            event.dataTransfer.setDragImage(dragImage, -10, -10);\r\n            setTimeout(() => document.body.removeChild(dragImage), 0);\r\n        }\r\n    }\r\n\r\n    protected handleDragEnterEvent(node: TreeNode | undefined, event: React.DragEvent): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.toCancelNodeExpansion.dispose();\r\n        const containing = DirNode.getContainingDir(node);\r\n        if (!!containing && !containing.selected) {\r\n            this.model.selectNode(containing);\r\n        }\r\n    }\r\n\r\n    protected handleDragOverEvent(node: TreeNode | undefined, event: React.DragEvent): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (!this.toCancelNodeExpansion.disposed) {\r\n            return;\r\n        }\r\n        const timer = setTimeout(() => {\r\n            const containing = DirNode.getContainingDir(node);\r\n            if (!!containing && !containing.expanded) {\r\n                this.model.expandNode(containing);\r\n            }\r\n        }, 500);\r\n        this.toCancelNodeExpansion.push(Disposable.create(() => clearTimeout(timer)));\r\n    }\r\n\r\n    protected handleDragLeaveEvent(node: TreeNode | undefined, event: React.DragEvent): void {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.toCancelNodeExpansion.dispose();\r\n    }\r\n\r\n    protected async handleDropEvent(node: TreeNode | undefined, event: React.DragEvent): Promise<void> {\r\n        try {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            event.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\r\n            const containing = this.getDropTargetDirNode(node);\r\n            if (containing) {\r\n                const resources = this.getSelectedTreeNodesFromData(event.dataTransfer);\r\n                if (resources.length > 0) {\r\n                    for (const treeNode of resources) {\r\n                        await this.model.move(treeNode, containing);\r\n                    }\r\n                } else {\r\n                    await this.uploadService.upload(containing.uri, {source: event.dataTransfer});\r\n                }\r\n            }\r\n        } catch (e) {\r\n            if (!isCancelled(e)) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getDropTargetDirNode(node: TreeNode | undefined): DirNode | undefined {\r\n        if (CompositeTreeNode.is(node) && node.id === 'WorkspaceNodeId') {\r\n            if (node.children.length === 1) {\r\n                return DirNode.getContainingDir(node.children[0]);\r\n            } else if (node.children.length > 1) {\r\n                // move file to the last root folder in multi-root scenario\r\n                return DirNode.getContainingDir(node.children[node.children.length - 1]);\r\n            }\r\n        }\r\n        return DirNode.getContainingDir(node);\r\n    }\r\n\r\n    protected setTreeNodeAsData(data: DataTransfer, node: TreeNode): void {\r\n        data.setData('tree-node', node.id);\r\n    }\r\n\r\n    protected setSelectedTreeNodesAsData(data: DataTransfer, sourceNode: TreeNode, relatedNodes: TreeNode[]): void {\r\n        this.setTreeNodeAsData(data, sourceNode);\r\n        data.setData('selected-tree-nodes', JSON.stringify(relatedNodes.map(node => node.id)));\r\n    }\r\n\r\n    protected getTreeNodeFromData(data: DataTransfer): TreeNode | undefined {\r\n        const id = data.getData('tree-node');\r\n        return this.model.getNode(id);\r\n    }\r\n\r\n    protected getSelectedTreeNodesFromData(data: DataTransfer): TreeNode[] {\r\n        const resources = data.getData('selected-tree-nodes');\r\n        if (!resources) {\r\n            return [];\r\n        }\r\n        const ids: string[] = JSON.parse(resources);\r\n        return ids.map(id => this.model.getNode(id)).filter(node => node !== undefined) as TreeNode[];\r\n    }\r\n\r\n    protected renderExpansionToggle(node: TreeNode, props: NodeProps): React.ReactNode {\r\n        if (this.hidesExplorerArrows) {\r\n            // eslint-disable-next-line no-null/no-null\r\n            return null;\r\n        }\r\n        return super.renderExpansionToggle(node, props);\r\n    }\r\n\r\n    protected getPaddingLeft(node: TreeNode, props: NodeProps): number {\r\n        if (this.hidesExplorerArrows) {\r\n            // additional left padding instead of top-level expansion toggle\r\n            return super.getPaddingLeft(node, props) + this.props.leftPadding;\r\n        }\r\n        return super.getPaddingLeft(node, props);\r\n    }\r\n\r\n    protected needsExpansionTogglePadding(node: TreeNode): boolean {\r\n        const theme = this.iconThemeService.getDefinition(this.iconThemeService.current);\r\n        if (theme && (theme.hidesExplorerArrows || (theme.hasFileIcons && !theme.hasFolderIcons))) {\r\n            return false;\r\n        }\r\n        return super.needsExpansionTogglePadding(node);\r\n    }\r\n\r\n    protected deflateForStorage(node: TreeNode): object {\r\n        const deflated = super.deflateForStorage(node);\r\n        if (FileStatNode.is(node) && FileStatNodeData.is(deflated)) {\r\n            deflated.uri = node.uri.toString();\r\n            delete deflated['fileStat'];\r\n            deflated.stat = FileStat.toStat(node.fileStat);\r\n        }\r\n        return deflated;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    protected inflateFromStorage(node: any, parent?: TreeNode): TreeNode {\r\n        if (FileStatNodeData.is(node)) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const fileStatNode: FileStatNode = node as any;\r\n            const resource = new URI(node.uri);\r\n            fileStatNode.uri = resource;\r\n            let stat: typeof node['stat'];\r\n            // in order to support deprecated FileStat\r\n            if (node.fileStat) {\r\n                stat = {\r\n                    type: node.fileStat.isDirectory ? FileType.Directory : FileType.File,\r\n                    mtime: node.fileStat.lastModification,\r\n                    size: node.fileStat.size\r\n                };\r\n                delete node['fileStat'];\r\n            } else if (node.stat) {\r\n                stat = node.stat;\r\n                delete node['stat'];\r\n            }\r\n            if (stat) {\r\n                fileStatNode.fileStat = FileStat.fromStat(resource, stat);\r\n            }\r\n        }\r\n        const inflated = super.inflateFromStorage(node, parent);\r\n        if (DirNode.is(inflated)) {\r\n            inflated.fileStat.children = [];\r\n            for (const child of inflated.children) {\r\n                if (FileStatNode.is(child)) {\r\n                    inflated.fileStat.children.push(child.fileStat);\r\n                }\r\n            }\r\n        }\r\n        return inflated;\r\n    }\r\n\r\n}\r\n"]}