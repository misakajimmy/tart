{"version":3,"sources":["browser/file-upload-service.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,WAAW,CAAC;AAC7C,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAC,eAAe,EAAC,MAAM,wCAAwC,CAAC;AACvE,OAAO,EAAC,YAAY,EAAC,MAAM,+BAA+B,CAAC;AAc3D,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAU1B,KAAK,CAAC,MAAM,CAAC,SAAuB,EAAE,SAA2B,EAAE;QAC/D,IAAI,GAAG,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACpB,GAAG,IAAI,GAAG,CAAC;SACd;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACjD,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAChC,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACzC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;gBACjB,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;gBAC3B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAmB,CAAC,CAAC,CAAC,CAAC;YAC5G,CAAC,CAAA;SACJ;IACL,CAAC;CACJ,CAAA;AAxBU,wBAAM,GAAG,QAAQ,CAAC;AAClB,wBAAM,GAAG,QAAQ,CAAC;AAGzB;IADC,MAAM,CAAC,WAAW,CAAC;sDACe;AAGnC;IADC,MAAM,CAAC,eAAe,CAAC;0DAC4B;AAR3C,iBAAiB;IAD7B,UAAU,EAAE;GACA,iBAAiB,CAyB7B;SAzBY,iBAAiB","file":"../../src/browser/file-upload-service.js","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {FileService} from './file-service';\r\nimport {EncodingService} from '@tart/core/lib/common/encoding-service';\r\nimport {BinaryBuffer} from \"@tart/core/lib/common//buffer\";\r\n\r\n\r\nexport interface FileUploadParams {\r\n    source?: DataTransfer\r\n    progress?: FileUploadProgressParams\r\n    onDidUpload?: (uri: string) => void;\r\n}\r\n\r\nexport interface FileUploadProgressParams {\r\n    text: string\r\n}\r\n\r\n@injectable()\r\nexport class FileUploadService {\r\n    static TARGET = 'target';\r\n    static UPLOAD = 'upload';\r\n\r\n    @inject(FileService)\r\n    protected fileService: FileService;\r\n\r\n    @inject(EncodingService)\r\n    protected readonly encodingService: EncodingService;\r\n\r\n    async upload(targetUri: string | URI, parmas: FileUploadParams = {}): Promise<void> {\r\n        let uri = targetUri.toString();\r\n        if (!uri.endsWith('/')) {\r\n            uri += '/';\r\n        }\r\n        for (let i = 0; i < parmas.source.files.length; i++) {\r\n            const reader = new FileReader();\r\n            const name = parmas.source.files[i].name;\r\n            reader.readAsArrayBuffer(parmas.source.files[i]);\r\n            reader.onload = () => {\r\n                const data = reader.result;\r\n                this.fileService.writeFile(new URI(uri + name), BinaryBuffer.wrap(new Uint8Array(data as ArrayBuffer)));\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}