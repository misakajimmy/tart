{"version":3,"sources":["browser/download/file-download-command-contribution.ts"],"names":[],"mappings":"AACA,OAAO,EACH,OAAO,EACP,mBAAmB,EACnB,eAAe,EACf,gBAAgB,EAEnB,MAAM,uBAAuB,CAAC;AAE/B,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,EAAC,WAAW,EAAC,MAAM,iBAAiB,CAAC;AAK5C,qBACa,+BAAgC,YAAW,mBAAmB;IAGvE,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC;IAG5C,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;IAEtD,gBAAgB,CAAC,QAAQ,EAAE,eAAe,GAAG,IAAI;cAWjC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,OAAO,CAAC,EAAE;QAAE,QAAQ,CAAC,EAAE,OAAO,CAAA;KAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAwC7F,SAAS,CAAC,iBAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO;IAIjD,SAAS,CAAC,iBAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO;CAGpD;AAED,yBAAiB,oBAAoB,CAAC;IAC3B,MAAM,QAAQ,SAInB,CAAC;IAEI,MAAM,kBAAkB,SAIyC,CAAC;CAE5E","file":"../../../src/browser/download/file-download-command-contribution.d.ts","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport {\r\n    Command,\r\n    CommandContribution,\r\n    CommandRegistry,\r\n    SelectionService,\r\n    UriAwareCommandHandler\r\n} from '@tart/core/lib/common';\r\nimport {CommonCommands} from '@tart/core';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {FileService} from '../file-service';\r\nimport FileSaver from 'file-saver';\r\nimport JSZip from 'jszip';\r\nimport {nls} from \"@tart/core/lib/common/nls\";\r\n\r\n@injectable()\r\nexport class FileDownloadCommandContribution implements CommandContribution {\r\n\r\n    @inject(FileService)\r\n    protected readonly fileService: FileService;\r\n\r\n    @inject(SelectionService)\r\n    protected readonly selectionService: SelectionService;\r\n\r\n    registerCommands(registry: CommandRegistry): void {\r\n        registry.registerCommand(\r\n            FileDownloadCommands.DOWNLOAD,\r\n            UriAwareCommandHandler.MultiSelect(this.selectionService, {\r\n                execute: uris => this.executeDownload(uris),\r\n                isEnabled: uris => this.isDownloadEnabled(uris),\r\n                isVisible: uris => this.isDownloadVisible(uris),\r\n            })\r\n        );\r\n    }\r\n\r\n    protected async executeDownload(uris: URI[], options?: { copyLink?: boolean }): Promise<void> {\r\n        const downloadFile = async (uri: URI) => {\r\n            this.fileService.readFile(uri).then((data) => {\r\n                const blob = new Blob([data.value.buffer.buffer]);\r\n                FileSaver.saveAs(blob, data.name);\r\n            });\r\n        }\r\n        const downloadFolder = async (uri: URI, zip: JSZip) => {\r\n            const res = await this.fileService.resolve(uri);\r\n            if (res.isFile === true) {\r\n                console.log(res);\r\n                const data = await this.fileService.read(uri);\r\n                zip.file(res.name, data.value);\r\n            } else {\r\n                const folder = zip.folder(res.name);\r\n                for (const child of res.children) {\r\n                    await downloadFolder(child.resource, folder);\r\n                }\r\n            }\r\n        }\r\n        const download = async (uri: URI) => {\r\n            const res = await this.fileService.resolve(uri);\r\n            if (res.isFile === true) {\r\n                await downloadFile(uri);\r\n            } else {\r\n                const zip = new JSZip();\r\n                await downloadFolder(uri, zip);\r\n                console.log('download finish');\r\n                zip.generateAsync({type: \"blob\"}).then((content) => {\r\n                    // see FileSaver.js\r\n                    FileSaver.saveAs(content, \"data.zip\");\r\n                });\r\n            }\r\n        }\r\n\r\n        uris.map(uri => {\r\n            download(uri);\r\n        });\r\n    }\r\n\r\n    protected isDownloadEnabled(uris: URI[]): boolean {\r\n        return uris.length > 0 && uris.every(u => u.scheme === 'file');\r\n    }\r\n\r\n    protected isDownloadVisible(uris: URI[]): boolean {\r\n        return this.isDownloadEnabled(uris);\r\n    }\r\n}\r\n\r\nexport namespace FileDownloadCommands {\r\n    export const DOWNLOAD = Command.toDefaultLocalizedCommand({\r\n        id: 'file.download',\r\n        category: CommonCommands.FILE_CATEGORY,\r\n        label: nls.localize('Download','下载')\r\n    });\r\n\r\n    export const COPY_DOWNLOAD_LINK = Command.toLocalizedCommand({\r\n        id: 'file.copyDownloadLink',\r\n        category: CommonCommands.FILE_CATEGORY,\r\n        label: 'Copy Download Link'\r\n    }, 'tart/filesystem/copyDownloadLink', CommonCommands.FILE_CATEGORY_KEY);\r\n\r\n}\r\n"]}