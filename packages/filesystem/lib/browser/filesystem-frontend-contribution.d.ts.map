{"version":3,"sources":["browser/filesystem-frontend-contribution.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,OAAO,EAAE,mBAAmB,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AACrF,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAiB,+BAA+B,EAAC,MAAM,YAAY,CAAC;AAE3E,yBAAiB,kBAAkB,CAAC;IAEzB,MAAM,MAAM,SAIgD,CAAC;CAEvE;AAED,qBACa,8BAA+B,YAAW,+BAA+B,EAAE,mBAAmB;IAGvG,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC;IAE5C,UAAU,IAAI,IAAI;IAiBlB,gBAAgB,CAAC,QAAQ,EAAE,eAAe;CAW7C","file":"../../src/browser/filesystem-frontend-contribution.d.ts","sourcesContent":["import {inject, injectable,} from 'inversify';\r\nimport {Command, CommandContribution, CommandRegistry,} from '@tart/core/lib/common';\r\nimport {FileService} from './file-service';\r\nimport {CommonCommands, FrontendApplicationContribution} from '@tart/core';\r\n\r\nexport namespace FileSystemCommands {\r\n\r\n    export const UPLOAD = Command.toLocalizedCommand({\r\n        id: 'file.upload',\r\n        category: CommonCommands.FILE_CATEGORY,\r\n        label: 'Upload Files...'\r\n    }, 'tart/filesystem/uploadFiles', CommonCommands.FILE_CATEGORY_KEY);\r\n\r\n}\r\n\r\n@injectable()\r\nexport class FileSystemFrontendContribution implements FrontendApplicationContribution, CommandContribution {\r\n\r\n    @inject(FileService)\r\n    protected readonly fileService: FileService;\r\n\r\n    initialize(): void {\r\n        this.fileService.onDidFilesChange(event => {\r\n        });\r\n        // this.fileService.onWillRunUserOperation(event => {\r\n        //     this.queueUserOperation(event);\r\n        //     event.waitUntil(this.runEach((uri, widget) => this.pushMove(uri, widget, event)));\r\n        // });\r\n        // this.fileService.onDidFailUserOperation(event => event.waitUntil((async () => {\r\n        //     await this.runEach((uri, widget) => this.revertMove(uri, widget, event));\r\n        //     this.resolveUserOperation(event);\r\n        // })()));\r\n        // this.fileService.onDidRunUserOperation(event => event.waitUntil((async () => {\r\n        //     await this.runEach((uri, widget) => this.applyMove(uri, widget, event));\r\n        //     this.resolveUserOperation(event);\r\n        // })()));\r\n    }\r\n\r\n    registerCommands(commands: CommandRegistry) {\r\n        commands.registerCommand(Command.toDefaultLocalizedCommand({\r\n            id: 'local-filesystem',\r\n            label: '使用本地文件系统',\r\n        }), {\r\n            execute: data => {\r\n                // @ts-ignore\r\n                this.fileService.useLocalFileSystem();\r\n            }\r\n        })\r\n    }\r\n}\r\n"]}