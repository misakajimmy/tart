{"version":3,"sources":["browser/virtual-file-service-contribution.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,WAAW,EAAE,uBAAuB,EAAC,MAAM,gBAAgB,CAAC;AAEpE,OAAO,EAAC,yBAAyB,EAAC,MAAM,wCAAwC,CAAC;AAEjF,qBACa,8BAA+B,YAAW,uBAAuB;IAG1E,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,yBAAyB,CAAC;IAEvD,2BAA2B,CAAC,OAAO,EAAE,WAAW;CAUnD","file":"../../src/browser/virtual-file-service-contribution.d.ts","sourcesContent":["import {inject, injectable} from 'inversify';\r\nimport {FileService, FileServiceContribution} from './file-service';\r\nimport {VirtualFileSystemProvider} from '../common/virtual-file-system-provider';\r\nimport {StorageFileSystemProvider} from \"../common/storage-file-system-provider\";\r\n\r\n@injectable()\r\nexport class VirtualFileServiceContribution implements FileServiceContribution {\r\n\r\n    @inject(StorageFileSystemProvider)\r\n    protected readonly provider: StorageFileSystemProvider;\r\n\r\n    registerFileSystemProviders(service: FileService) {\r\n        const registering = this.provider.ready.then(() => {\r\n            service.registerProvider('file', this.provider);\r\n        });\r\n        service.onWillActivateFileSystemProvider(event => {\r\n            if (event.scheme === 'file') {\r\n                event.waitUntil(registering);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}