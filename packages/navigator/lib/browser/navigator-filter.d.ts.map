{"version":3,"sources":["browser/navigator-filter.ts"],"names":[],"mappings":"AAMA,OAAO,EAAC,OAAO,EAAE,KAAK,EAAE,YAAY,EAAC,MAAM,uBAAuB,CAAC;AACnE,OAAO,EAAC,uBAAuB,EAAE,qBAAqB,EAAC,MAAM,qDAAqD,CAAC;AACnH,OAAO,EAAC,0BAA0B,EAAE,wBAAwB,EAAC,MAAM,yBAAyB,CAAC;AAC7F,OAAO,EAAC,qBAAqB,EAAC,MAAM,YAAY,CAAC;AAEjD,qBACa,mBAAmB;IAUQ,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,wBAAwB;IAT9F,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,CAAuB;IAEhE,SAAS,CAAC,eAAe,EAAE,mBAAmB,CAAC,SAAS,CAAC;IACzD,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;IAGnC,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,qBAAqB,CAAC;gBAGF,WAAW,EAAE,wBAAwB;IAI9F,IAAI,eAAe,IAAI,KAAK,CAAC,IAAI,CAAC,CAEjC;IAEK,MAAM,CAAC,CAAC,SAAS;QAAE,EAAE,EAAE,MAAM,CAAA;KAAE,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,EAAE,CAAC;IAI9E,iBAAiB,IAAI,IAAI;cAST,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC;IAMrC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE;QAAE,EAAE,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO;IAInD,SAAS,CAAC,iBAAiB,IAAI,IAAI;IAInC,SAAS,CAAC,wBAAwB,CAAC,KAAK,EAAE,qBAAqB,CAAC,uBAAuB,CAAC,GAAG,IAAI;IAQ/F,SAAS,CAAC,mBAAmB,CAAC,KAAK,EAAE,qBAAqB,CAAC,0BAA0B,CAAC,GAAG,IAAI;IAG7F,SAAS,CAAC,qBAAqB,CAAC,UAAU,EAAE,mBAAmB,CAAC,UAAU,GAAG,mBAAmB,CAAC,SAAS;IAI1G,SAAS,CAAC,mBAAmB,CAAC,UAAU,EAAE,mBAAmB,CAAC,UAAU,GAAG,mBAAmB,CAAC,UAAU;CAO1G;AAED,yBAAiB,mBAAmB,CAAC;IAEnC;;OAEG;IACH,UAAiB,SAAS;QAExB;;;;WAIG;QACH,MAAM,CAAC,IAAI,EAAE;YAAE,EAAE,EAAE,MAAM,CAAA;SAAE,GAAG,OAAO,CAAC;KAEvC;IAED,UAAiB,SAAS,CAAC;QAEzB;;;WAGG;QACH,SAAgB,GAAG,CAAC,GAAG,UAAU,EAAE,SAAS,EAAE,GAAG,SAAS,CAIzD;KAEF;IAED;;OAEG;IACH,UAAiB,UAAU;QACzB,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAC;KACxB;CAEF;AAED;;GAEG;AACH,qBAAa,4BAA6B,YAAW,mBAAmB,CAAC,SAAS;IAEhF,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAgC;gBAE7C,UAAU,EAAE,mBAAmB,CAAC,UAAU;IAQtD,MAAM,CAAC,IAAI,EAAE;QAAE,EAAE,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO;IAIrC,SAAS,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,GAAG,mBAAmB,CAAC,SAAS;CAOzE","file":"../../src/browser/navigator-filter.d.ts","sourcesContent":["/**\r\n * Filter for omitting elements from the navigator. For more details on the exclusion patterns,\r\n * one should check either the manual with `man 5 gitignore` or just [here](https://git-scm.com/docs/gitignore).\r\n */\r\nimport {inject, injectable, postConstruct} from 'inversify';\r\nimport {Minimatch} from 'minimatch';\r\nimport {Emitter, Event, MaybePromise} from '@tart/core/lib/common';\r\nimport {FileSystemConfiguration, FileSystemPreferences} from '@tart/filesystem/lib/browser/filesystem-preferences';\r\nimport {FileNavigatorConfiguration, FileNavigatorPreferences} from './navigator-preferences';\r\nimport {PreferenceChangeEvent} from '@tart/core';\r\n\r\n@injectable()\r\nexport class FileNavigatorFilter {\r\n  protected readonly emitter: Emitter<void> = new Emitter<void>();\r\n\r\n  protected filterPredicate: FileNavigatorFilter.Predicate;\r\n  protected showHiddenFiles: boolean;\r\n\r\n  @inject(FileSystemPreferences)\r\n  protected readonly filesPreferences: FileSystemPreferences;\r\n\r\n  constructor(\r\n      @inject(FileNavigatorPreferences) protected readonly preferences: FileNavigatorPreferences\r\n  ) {\r\n  }\r\n\r\n  get onFilterChanged(): Event<void> {\r\n    return this.emitter.event;\r\n  }\r\n\r\n  async filter<T extends { id: string }>(items: MaybePromise<T[]>): Promise<T[]> {\r\n    return (await items).filter(item => this.filterItem(item));\r\n  }\r\n\r\n  toggleHiddenFiles(): void {\r\n    this.showHiddenFiles = !this.showHiddenFiles;\r\n    const filesExcludes = this.filesPreferences['files.exclude'];\r\n\r\n    this.filterPredicate = this.createFilterPredicate(filesExcludes || {});\r\n    this.fireFilterChanged();\r\n  }\r\n\r\n  @postConstruct()\r\n  protected async init(): Promise<void> {\r\n    this.filterPredicate = this.createFilterPredicate(this.filesPreferences['files.exclude']);\r\n    this.filesPreferences.onPreferenceChanged(event => this.onFilesPreferenceChanged(event));\r\n    this.preferences.onPreferenceChanged(event => this.onPreferenceChanged(event));\r\n  }\r\n\r\n  protected filterItem(item: { id: string }): boolean {\r\n    return this.filterPredicate.filter(item);\r\n  }\r\n\r\n  protected fireFilterChanged(): void {\r\n    this.emitter.fire(undefined);\r\n  }\r\n\r\n  protected onFilesPreferenceChanged(event: PreferenceChangeEvent<FileSystemConfiguration>): void {\r\n    const {preferenceName, newValue} = event;\r\n    if (preferenceName === 'files.exclude') {\r\n      this.filterPredicate = this.createFilterPredicate(newValue as FileNavigatorFilter.Exclusions | undefined || {});\r\n      this.fireFilterChanged();\r\n    }\r\n  }\r\n\r\n  protected onPreferenceChanged(event: PreferenceChangeEvent<FileNavigatorConfiguration>): void {\r\n  }\r\n\r\n  protected createFilterPredicate(exclusions: FileNavigatorFilter.Exclusions): FileNavigatorFilter.Predicate {\r\n    return new FileNavigatorFilterPredicate(this.interceptExclusions(exclusions));\r\n  }\r\n\r\n  protected interceptExclusions(exclusions: FileNavigatorFilter.Exclusions): FileNavigatorFilter.Exclusions {\r\n    return {\r\n      ...exclusions,\r\n      '**/.*': this.showHiddenFiles\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport namespace FileNavigatorFilter {\r\n\r\n  /**\r\n   * File navigator filter predicate.\r\n   */\r\n  export interface Predicate {\r\n\r\n    /**\r\n     * Returns `true` if the item should filtered our from the navigator. Otherwise, `true`.\r\n     *\r\n     * @param item the identifier of a tree node.\r\n     */\r\n    filter(item: { id: string }): boolean;\r\n\r\n  }\r\n\r\n  export namespace Predicate {\r\n\r\n    /**\r\n     * Wraps a bunch of predicates and returns with a new one that evaluates to `true` if\r\n     * each of the wrapped predicates evaluates to `true`. Otherwise, `false`.\r\n     */\r\n    export function and(...predicates: Predicate[]): Predicate {\r\n      return {\r\n        filter: id => predicates.every(predicate => predicate.filter(id))\r\n      };\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Type for the exclusion patterns. The property keys are the patterns, values are whether the exclusion is enabled or not.\r\n   */\r\n  export interface Exclusions {\r\n    [key: string]: boolean;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Concrete filter navigator filter predicate that is decoupled from the preferences.\r\n */\r\nexport class FileNavigatorFilterPredicate implements FileNavigatorFilter.Predicate {\r\n\r\n  private readonly delegate: FileNavigatorFilter.Predicate;\r\n\r\n  constructor(exclusions: FileNavigatorFilter.Exclusions) {\r\n    const patterns = Object.keys(exclusions).map(pattern => ({\r\n      pattern,\r\n      enabled: exclusions[pattern]\r\n    })).filter(object => object.enabled).map(object => object.pattern);\r\n    this.delegate = FileNavigatorFilter.Predicate.and(...patterns.map(pattern => this.createDelegate(pattern)));\r\n  }\r\n\r\n  filter(item: { id: string }): boolean {\r\n    return this.delegate.filter(item);\r\n  }\r\n\r\n  protected createDelegate(pattern: string): FileNavigatorFilter.Predicate {\r\n    const delegate = new Minimatch(pattern, {matchBase: true});\r\n    return {\r\n      filter: item => !delegate.match(item.id)\r\n    };\r\n  }\r\n\r\n}\r\n"]}