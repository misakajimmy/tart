{"version":3,"sources":["browser/navigator-preferences.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AACrC,OAAO,EAGL,eAAe,EACf,gBAAgB,EAChB,iBAAiB,EAClB,MAAM,YAAY,CAAC;AAGpB,eAAO,MAAM,yBAAyB,EAAE,gBASvC,CAAC;AAEF,MAAM,WAAW,0BAA0B;IACzC,qBAAqB,EAAE,OAAO,CAAC;CAChC;AAED,eAAO,MAAM,mCAAmC,eAAgD,CAAC;AACjG,eAAO,MAAM,wBAAwB,eAAiC,CAAC;AACvE,oBAAY,wBAAwB,GAAG,eAAe,CAAC,0BAA0B,CAAC,CAAC;AAEnF,wBAAgB,0BAA0B,CAAC,WAAW,EAAE,iBAAiB,EAAE,MAAM,GAAE,gBAA4C,GAAG,wBAAwB,CAEzJ;AAED,wBAAgB,4BAA4B,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,GAAG,IAAI,CAQxE","file":"../../src/browser/navigator-preferences.d.ts","sourcesContent":["import {interfaces} from 'inversify';\r\nimport {\r\n  createPreferenceProxy,\r\n  PreferenceContribution,\r\n  PreferenceProxy,\r\n  PreferenceSchema,\r\n  PreferenceService\r\n} from '@tart/core';\r\nimport {nls} from '@tart/core/lib/common/nls';\r\n\r\nexport const FileNavigatorConfigSchema: PreferenceSchema = {\r\n  'type': 'object',\r\n  properties: {\r\n    'explorer.autoReveal': {\r\n      type: 'boolean',\r\n      description: nls.localizeByDefault('Controls whether the explorer should automatically reveal and select files when opening them.'),\r\n      default: true\r\n    }\r\n  }\r\n};\r\n\r\nexport interface FileNavigatorConfiguration {\r\n  'explorer.autoReveal': boolean;\r\n}\r\n\r\nexport const FileNavigatorPreferenceContribution = Symbol('FileNavigatorPreferenceContribution');\r\nexport const FileNavigatorPreferences = Symbol('NavigatorPreferences');\r\nexport type FileNavigatorPreferences = PreferenceProxy<FileNavigatorConfiguration>;\r\n\r\nexport function createNavigatorPreferences(preferences: PreferenceService, schema: PreferenceSchema = FileNavigatorConfigSchema): FileNavigatorPreferences {\r\n  return createPreferenceProxy(preferences, schema);\r\n}\r\n\r\nexport function bindFileNavigatorPreferences(bind: interfaces.Bind): void {\r\n  bind(FileNavigatorPreferences).toDynamicValue(ctx => {\r\n    const preferences = ctx.container.get<PreferenceService>(PreferenceService);\r\n    const contribution = ctx.container.get<PreferenceContribution>(FileNavigatorPreferenceContribution);\r\n    return createNavigatorPreferences(preferences, contribution.schema);\r\n  }).inSingletonScope();\r\n  bind(FileNavigatorPreferenceContribution).toConstantValue({schema: FileNavigatorConfigSchema});\r\n  bind(PreferenceContribution).toService(FileNavigatorPreferenceContribution);\r\n}\r\n"]}