{"version":3,"sources":["browser/navigator-widget-factory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAU,aAAa,EAAE,yBAAyB,EAAE,aAAa,EAAE,aAAa,EAAC,MAAM,YAAY,CAAC;AAM3G,eAAO,MAAM,0BAA0B,4BAA4B,CAAC;AACpE,eAAO,MAAM,qCAAqC,EAAE,yBAInD,CAAC;AAEF,qBACa,sBAAuB,YAAW,aAAa;IAC1D,MAAM,CAAC,EAAE,SAA8B;IAEvC,QAAQ,CAAC,EAAE,SAA6B;IAExC,SAAS,CAAC,wBAAwB,EAAE,aAAa,CAAC,OAAO,CAAC,aAAa,CAOrE;IAEF,SAAS,CAAC,0BAA0B,EAAE,aAAa,CAAC,OAAO,CAAC,aAAa,CAMvE;IAGF,SAAS,CAAC,QAAQ,CAAC,oBAAoB,EAAE,aAAa,CAAC,OAAO,CAAC;IACxC,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC;IAEjE,YAAY,IAAI,OAAO,CAAC,aAAa,CAAC;CAY7C","file":"../../src/browser/navigator-widget-factory.d.ts","sourcesContent":["import {codicon, ViewContainer, ViewContainerTitleOptions, WidgetFactory, WidgetManager} from '@tart/core';\r\nimport {nls} from '@tart/core/lib/common/nls';\r\nimport {inject, injectable} from 'inversify';\r\nimport {OpenEditorsWidget} from './open-editors-widget/navigator-open-editors-widget';\r\nimport {FILE_NAVIGATOR_ID} from './navigator-widget';\r\n\r\nexport const EXPLORER_VIEW_CONTAINER_ID = 'explorer-view-container';\r\nexport const EXPLORER_VIEW_CONTAINER_TITLE_OPTIONS: ViewContainerTitleOptions = {\r\n  label: nls.localizeByDefault('Explorer'),\r\n  iconClass: codicon('files'),\r\n  closeable: true\r\n};\r\n\r\n@injectable()\r\nexport class NavigatorWidgetFactory implements WidgetFactory {\r\n  static ID = EXPLORER_VIEW_CONTAINER_ID;\r\n\r\n  readonly id = NavigatorWidgetFactory.ID;\r\n\r\n  protected openEditorsWidgetOptions: ViewContainer.Factory.WidgetOptions = {\r\n    order: 0,\r\n    canHide: true,\r\n    initiallyCollapsed: true,\r\n    initiallyHidden: true,\r\n    // this property currently has no effect (https://github.com/eclipse-theia/theia/issues/7755)\r\n    weight: 20\r\n  };\r\n\r\n  protected fileNavigatorWidgetOptions: ViewContainer.Factory.WidgetOptions = {\r\n    order: 1,\r\n    canHide: false,\r\n    initiallyCollapsed: false,\r\n    weight: 80,\r\n    disableDraggingToOtherContainers: true\r\n  };\r\n\r\n  @inject(ViewContainer.Factory)\r\n  protected readonly viewContainerFactory: ViewContainer.Factory;\r\n  @inject(WidgetManager) protected readonly widgetManager: WidgetManager;\r\n\r\n  async createWidget(): Promise<ViewContainer> {\r\n    const viewContainer = this.viewContainerFactory({\r\n      id: EXPLORER_VIEW_CONTAINER_ID,\r\n      progressLocationId: 'explorer'\r\n    });\r\n    viewContainer.setTitleOptions(EXPLORER_VIEW_CONTAINER_TITLE_OPTIONS);\r\n    const openEditorsWidget = await this.widgetManager.getOrCreateWidget(OpenEditorsWidget.ID);\r\n    const navigatorWidget = await this.widgetManager.getOrCreateWidget(FILE_NAVIGATOR_ID);\r\n    viewContainer.addWidget(openEditorsWidget, this.openEditorsWidgetOptions);\r\n    viewContainer.addWidget(navigatorWidget, this.fileNavigatorWidgetOptions);\r\n    return viewContainer;\r\n  }\r\n}\r\n"]}