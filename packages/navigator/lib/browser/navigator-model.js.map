{"version":3,"sources":["browser/navigator-model.ts"],"names":[],"mappings":"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","file":"../../src/browser/navigator-model.js","sourcesContent":["import {inject, injectable, postConstruct} from 'inversify';\r\nimport {FileNode, FileTreeModel} from '@tart/filesystem';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {\r\n  CompositeTreeNode,\r\n  ExpandableTreeNode,\r\n  open,\r\n  OpenerService,\r\n  SelectableTreeNode,\r\n  TreeNode\r\n} from '@tart/core/lib/browser';\r\nimport {FileNavigatorTree, WorkspaceNode, WorkspaceRootNode} from './navigator-tree';\r\nimport {WorkspaceService} from '@tart/workspace';\r\nimport {FrontendApplicationStateService} from '@tart/core/lib/browser/frontend-application-state';\r\n\r\n@injectable()\r\nexport class FileNavigatorModel extends FileTreeModel {\r\n\r\n  @inject(OpenerService) protected readonly openerService: OpenerService;\r\n  @inject(FileNavigatorTree) protected readonly fileNavigatorTree: FileNavigatorTree;\r\n  @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService;\r\n  @inject(FrontendApplicationStateService) protected readonly applicationState: FrontendApplicationStateService;\r\n\r\n  * getNodesByUri(uri: URI): IterableIterator<TreeNode> {\r\n    const workspace = this.root;\r\n    if (WorkspaceNode.is(workspace)) {\r\n      for (const root of workspace.children) {\r\n        // const id = this.tree.createId(root, uri);\r\n        // const node = this.getNode(id);\r\n        // if (node) {\r\n        //     yield node;\r\n        // }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reveals node in the navigator by given file uri.\r\n   *\r\n   * @param uri uri to file which should be revealed in the navigator\r\n   * @returns file tree node if the file with given uri was revealed, undefined otherwise\r\n   */\r\n  async revealFile(uri: URI): Promise<TreeNode | undefined> {\r\n    if (!uri.path.isAbsolute) {\r\n      return undefined;\r\n    }\r\n    let node = this.getNodeClosestToRootByUri(uri);\r\n\r\n    // success stop condition\r\n    // we have to reach workspace root because expanded node could be inside collapsed one\r\n    if (WorkspaceRootNode.is(node)) {\r\n      if (ExpandableTreeNode.is(node)) {\r\n        if (!node.expanded) {\r\n          node = await this.expandNode(node);\r\n        }\r\n        return node;\r\n      }\r\n      // shouldn't happen, root node is always directory, i.e. expandable\r\n      return undefined;\r\n    }\r\n\r\n    // fail stop condition\r\n    if (uri.path.isRoot) {\r\n      // file system root is reached but workspace root wasn't found, it means that\r\n      // given uri is not in workspace root folder or points to not existing file.\r\n      return undefined;\r\n    }\r\n\r\n    if (await this.revealFile(uri.parent)) {\r\n      if (node === undefined) {\r\n        // get node if it wasn't mounted into navigator tree before expansion\r\n        node = this.getNodeClosestToRootByUri(uri);\r\n      }\r\n      if (ExpandableTreeNode.is(node) && !node.expanded) {\r\n        node = await this.expandNode(node);\r\n      }\r\n      return node;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  previewNode(node: TreeNode): void {\r\n    if (FileNode.is(node)) {\r\n      open(this.openerService, node.uri, {mode: 'reveal', preview: true});\r\n    }\r\n  }\r\n\r\n  @postConstruct()\r\n  protected init() {\r\n    super.init();\r\n    this.initializeRoot();\r\n  }\r\n\r\n  protected async initializeRoot(): Promise<void> {\r\n    await Promise.all([\r\n      this.applicationState.reachedState('initialized_layout'),\r\n      this.workspaceService.roots\r\n    ]);\r\n    await this.updateRoot();\r\n    if (this.toDispose.disposed) {\r\n      return;\r\n    }\r\n    this.toDispose.push(this.workspaceService.onWorkspaceChanged(() => this.updateRoot()));\r\n    this.toDispose.push(this.workspaceService.onWorkspaceLocationChanged(() => this.updateRoot()));\r\n    if (this.selectedNodes.length) {\r\n      return;\r\n    }\r\n    const root = this.root;\r\n    if (CompositeTreeNode.is(root) && root.children.length === 1) {\r\n      const child = root.children[0];\r\n      if (SelectableTreeNode.is(child) && !child.selected && ExpandableTreeNode.is(child)) {\r\n        this.selectNode(child);\r\n        this.expandNode(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected async updateRoot(): Promise<void> {\r\n    this.root = await this.createRoot();\r\n  }\r\n\r\n  protected async createRoot(): Promise<TreeNode | undefined> {\r\n    if (this.workspaceService.opened) {\r\n      const stat = this.workspaceService.workspace;\r\n      const isMulti = (stat) ? !stat.isDirectory : false;\r\n      const workspaceNode = isMulti\r\n          ? this.createMultipleRootNode()\r\n          : WorkspaceNode.createRoot();\r\n      const roots = await this.workspaceService.roots;\r\n      for (const root of roots) {\r\n        workspaceNode.children.push(\r\n            await this.fileNavigatorTree.createWorkspaceRoot(root, workspaceNode)\r\n        );\r\n      }\r\n      return workspaceNode;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create multiple root node used to display\r\n   * the multiple root workspace name.\r\n   *\r\n   * @returns `WorkspaceNode`\r\n   */\r\n  protected createMultipleRootNode(): WorkspaceNode {\r\n    const workspace = this.workspaceService.workspace;\r\n    let name = workspace\r\n        ? workspace.resource.path.name\r\n        : 'untitled';\r\n    name += ' (Workspace)';\r\n    return WorkspaceNode.createRoot(name);\r\n  }\r\n\r\n  protected getNodeClosestToRootByUri(uri: URI): TreeNode | undefined {\r\n    const nodes = [...this.getNodesByUri(uri)];\r\n    return nodes.length > 0\r\n        ? nodes.reduce((node1, node2) => // return the node closest to the workspace root\r\n            node1.id.length >= node2.id.length ? node1 : node2\r\n        ) : undefined;\r\n  }\r\n\r\n}\r\n"]}