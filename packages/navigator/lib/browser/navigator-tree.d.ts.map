{"version":3,"sources":["browser/navigator-tree.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,OAAO,EAAC,iBAAiB,EAAE,kBAAkB,EAAE,QAAQ,EAAC,MAAM,YAAY,CAAC;AAC3E,OAAO,EAAC,OAAO,EAAE,QAAQ,EAAC,MAAM,kBAAkB,CAAC;AAEnD,OAAO,GAAG,MAAM,2BAA2B,CAAC;AAC5C,OAAO,EAAC,QAAQ,EAAC,MAAM,mCAAmC,CAAC;AAC3D,OAAO,EAAC,mBAAmB,EAAC,MAAM,oBAAoB,CAAC;AAEvD,qBACa,iBAAkB,SAAQ,QAAQ;IAEhB,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,mBAAmB,CAAC;IAEtE,eAAe,CAAC,MAAM,EAAE,iBAAiB,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;IAOrE,QAAQ,CAAC,IAAI,EAAE,iBAAiB,EAAE,GAAG,EAAE,GAAG,GAAG,MAAM;IAK7C,mBAAmB,CAAC,UAAU,EAAE,QAAQ,EAAE,aAAa,EAAE,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC;IASzG,SAAS,CAAC,IAAI,IAAI,IAAI;IAItB,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,iBAAiB,GAAG,MAAM;CAOhE;AAED;;GAEG;AACH,MAAM,WAAW,aAAc,SAAQ,iBAAiB,EAAE,kBAAkB;IAC1E,QAAQ,EAAE,iBAAiB,EAAE,CAAC;CAC/B;AAED,yBAAiB,aAAa,CAAC;IAEtB,MAAM,EAAE,oBAAoB,CAAC;IAC7B,MAAM,IAAI,kBAAkB,CAAC;IAEpC,SAAgB,EAAE,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,IAAI,IAAI,aAAa,CAEpE;IAED;;OAEG;IACH,SAAgB,UAAU,CAAC,aAAa,CAAC,EAAE,MAAM,GAAG,aAAa,CAShE;CAEF;AAED;;GAEG;AACH,MAAM,WAAW,iBAAkB,SAAQ,OAAO;IAChD,MAAM,EAAE,aAAa,CAAC;CACvB;AAED,yBAAiB,iBAAiB,CAAC;IAEjC,SAAgB,EAAE,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,GAAG,IAAI,IAAI,iBAAiB,CAEtE;IAED,SAAgB,IAAI,CAAC,IAAI,EAAE,QAAQ,GAAG,SAAS,GAAG,iBAAiB,GAAG,SAAS,CAO9E;CACF","file":"../../src/browser/navigator-tree.d.ts","sourcesContent":["/**\r\n * File tree root node for multi-root workspaces.\r\n */\r\nimport {CompositeTreeNode, SelectableTreeNode, TreeNode} from '@tart/core';\r\nimport {DirNode, FileTree} from '@tart/filesystem';\r\nimport {inject, injectable, postConstruct} from 'inversify';\r\nimport URI from '@tart/core/lib/common/uri';\r\nimport {FileStat} from '@tart/filesystem/lib/common/files';\r\nimport {FileNavigatorFilter} from './navigator-filter';\r\n\r\n@injectable()\r\nexport class FileNavigatorTree extends FileTree {\r\n\r\n  @inject(FileNavigatorFilter) protected readonly filter: FileNavigatorFilter;\r\n\r\n  async resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]> {\r\n    if (WorkspaceNode.is(parent)) {\r\n      return parent.children;\r\n    }\r\n    return this.filter.filter(super.resolveChildren(parent));\r\n  }\r\n\r\n  createId(root: WorkspaceRootNode, uri: URI): string {\r\n    const id = super.toNodeId(uri, root);\r\n    return id === root.id ? id : `${root.id}:${id}`;\r\n  }\r\n\r\n  async createWorkspaceRoot(rootFolder: FileStat, workspaceNode: WorkspaceNode): Promise<WorkspaceRootNode> {\r\n    const node = this.toNode(rootFolder, workspaceNode) as WorkspaceRootNode;\r\n    Object.assign(node, {\r\n      visible: workspaceNode.name !== WorkspaceNode.name,\r\n    });\r\n    return node;\r\n  }\r\n\r\n  @postConstruct()\r\n  protected init(): void {\r\n    this.toDispose.push(this.filter.onFilterChanged(() => this.refresh()));\r\n  }\r\n\r\n  protected toNodeId(uri: URI, parent: CompositeTreeNode): string {\r\n    const workspaceRootNode = WorkspaceRootNode.find(parent);\r\n    if (workspaceRootNode) {\r\n      return this.createId(workspaceRootNode, uri);\r\n    }\r\n    return super.toNodeId(uri, parent);\r\n  }\r\n}\r\n\r\n/**\r\n * File tree root node for multi-root workspaces.\r\n */\r\nexport interface WorkspaceNode extends CompositeTreeNode, SelectableTreeNode {\r\n  children: WorkspaceRootNode[];\r\n}\r\n\r\nexport namespace WorkspaceNode {\r\n\r\n  export const id = 'WorkspaceNodeId';\r\n  export const name = 'WorkspaceNode';\r\n\r\n  export function is(node: TreeNode | undefined): node is WorkspaceNode {\r\n    return CompositeTreeNode.is(node) && node.id === WorkspaceNode.id;\r\n  }\r\n\r\n  /**\r\n   * Create a `WorkspaceNode` that can be used as a `Tree` root.\r\n   */\r\n  export function createRoot(multiRootName?: string): WorkspaceNode {\r\n    return {\r\n      id: WorkspaceNode.id,\r\n      name: multiRootName || WorkspaceNode.name,\r\n      parent: undefined,\r\n      children: [],\r\n      visible: false,\r\n      selected: false\r\n    };\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * A node representing a folder from a multi-root workspace.\r\n */\r\nexport interface WorkspaceRootNode extends DirNode {\r\n  parent: WorkspaceNode;\r\n}\r\n\r\nexport namespace WorkspaceRootNode {\r\n\r\n  export function is(node: Object | undefined): node is WorkspaceRootNode {\r\n    return DirNode.is(node) && WorkspaceNode.is(node.parent);\r\n  }\r\n\r\n  export function find(node: TreeNode | undefined): WorkspaceRootNode | undefined {\r\n    if (node) {\r\n      if (is(node)) {\r\n        return node;\r\n      }\r\n      return find(node.parent);\r\n    }\r\n  }\r\n}\r\n"]}