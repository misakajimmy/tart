{"version":3,"sources":["browser/navigator-filter.ts"],"names":[],"mappings":"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","file":"../../src/browser/navigator-filter.js","sourcesContent":["/**\r\n * Filter for omitting elements from the navigator. For more details on the exclusion patterns,\r\n * one should check either the manual with `man 5 gitignore` or just [here](https://git-scm.com/docs/gitignore).\r\n */\r\nimport {inject, injectable, postConstruct} from 'inversify';\r\nimport {Minimatch} from 'minimatch';\r\nimport {Emitter, Event, MaybePromise} from '@tart/core/lib/common';\r\nimport {FileSystemConfiguration, FileSystemPreferences} from '@tart/filesystem/lib/browser/filesystem-preferences';\r\nimport {FileNavigatorConfiguration, FileNavigatorPreferences} from './navigator-preferences';\r\nimport {PreferenceChangeEvent} from '@tart/core';\r\n\r\n@injectable()\r\nexport class FileNavigatorFilter {\r\n  protected readonly emitter: Emitter<void> = new Emitter<void>();\r\n\r\n  protected filterPredicate: FileNavigatorFilter.Predicate;\r\n  protected showHiddenFiles: boolean;\r\n\r\n  @inject(FileSystemPreferences)\r\n  protected readonly filesPreferences: FileSystemPreferences;\r\n\r\n  constructor(\r\n      @inject(FileNavigatorPreferences) protected readonly preferences: FileNavigatorPreferences\r\n  ) {\r\n  }\r\n\r\n  get onFilterChanged(): Event<void> {\r\n    return this.emitter.event;\r\n  }\r\n\r\n  async filter<T extends { id: string }>(items: MaybePromise<T[]>): Promise<T[]> {\r\n    return (await items).filter(item => this.filterItem(item));\r\n  }\r\n\r\n  toggleHiddenFiles(): void {\r\n    this.showHiddenFiles = !this.showHiddenFiles;\r\n    const filesExcludes = this.filesPreferences['files.exclude'];\r\n\r\n    this.filterPredicate = this.createFilterPredicate(filesExcludes || {});\r\n    this.fireFilterChanged();\r\n  }\r\n\r\n  @postConstruct()\r\n  protected async init(): Promise<void> {\r\n    this.filterPredicate = this.createFilterPredicate(this.filesPreferences['files.exclude']);\r\n    this.filesPreferences.onPreferenceChanged(event => this.onFilesPreferenceChanged(event));\r\n    this.preferences.onPreferenceChanged(event => this.onPreferenceChanged(event));\r\n  }\r\n\r\n  protected filterItem(item: { id: string }): boolean {\r\n    return this.filterPredicate.filter(item);\r\n  }\r\n\r\n  protected fireFilterChanged(): void {\r\n    this.emitter.fire(undefined);\r\n  }\r\n\r\n  protected onFilesPreferenceChanged(event: PreferenceChangeEvent<FileSystemConfiguration>): void {\r\n    const {preferenceName, newValue} = event;\r\n    if (preferenceName === 'files.exclude') {\r\n      this.filterPredicate = this.createFilterPredicate(newValue as FileNavigatorFilter.Exclusions | undefined || {});\r\n      this.fireFilterChanged();\r\n    }\r\n  }\r\n\r\n  protected onPreferenceChanged(event: PreferenceChangeEvent<FileNavigatorConfiguration>): void {\r\n  }\r\n\r\n  protected createFilterPredicate(exclusions: FileNavigatorFilter.Exclusions): FileNavigatorFilter.Predicate {\r\n    return new FileNavigatorFilterPredicate(this.interceptExclusions(exclusions));\r\n  }\r\n\r\n  protected interceptExclusions(exclusions: FileNavigatorFilter.Exclusions): FileNavigatorFilter.Exclusions {\r\n    return {\r\n      ...exclusions,\r\n      '**/.*': this.showHiddenFiles\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport namespace FileNavigatorFilter {\r\n\r\n  /**\r\n   * File navigator filter predicate.\r\n   */\r\n  export interface Predicate {\r\n\r\n    /**\r\n     * Returns `true` if the item should filtered our from the navigator. Otherwise, `true`.\r\n     *\r\n     * @param item the identifier of a tree node.\r\n     */\r\n    filter(item: { id: string }): boolean;\r\n\r\n  }\r\n\r\n  export namespace Predicate {\r\n\r\n    /**\r\n     * Wraps a bunch of predicates and returns with a new one that evaluates to `true` if\r\n     * each of the wrapped predicates evaluates to `true`. Otherwise, `false`.\r\n     */\r\n    export function and(...predicates: Predicate[]): Predicate {\r\n      return {\r\n        filter: id => predicates.every(predicate => predicate.filter(id))\r\n      };\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Type for the exclusion patterns. The property keys are the patterns, values are whether the exclusion is enabled or not.\r\n   */\r\n  export interface Exclusions {\r\n    [key: string]: boolean;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Concrete filter navigator filter predicate that is decoupled from the preferences.\r\n */\r\nexport class FileNavigatorFilterPredicate implements FileNavigatorFilter.Predicate {\r\n\r\n  private readonly delegate: FileNavigatorFilter.Predicate;\r\n\r\n  constructor(exclusions: FileNavigatorFilter.Exclusions) {\r\n    const patterns = Object.keys(exclusions).map(pattern => ({\r\n      pattern,\r\n      enabled: exclusions[pattern]\r\n    })).filter(object => object.enabled).map(object => object.pattern);\r\n    this.delegate = FileNavigatorFilter.Predicate.and(...patterns.map(pattern => this.createDelegate(pattern)));\r\n  }\r\n\r\n  filter(item: { id: string }): boolean {\r\n    return this.delegate.filter(item);\r\n  }\r\n\r\n  protected createDelegate(pattern: string): FileNavigatorFilter.Predicate {\r\n    const delegate = new Minimatch(pattern, {matchBase: true});\r\n    return {\r\n      filter: item => !delegate.match(item.id)\r\n    };\r\n  }\r\n\r\n}\r\n"]}