{"version":3,"sources":["browser/open-editors-widget/navigator-open-editors-widget.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAC,SAAS,EAAsB,UAAU,EAAgB,MAAM,WAAW,CAAC;AACnF,OAAO,EAA0B,cAAc,EAAC,MAAM,kBAAkB,CAAC;AAEzE,OAAO,EACL,gBAAgB,EAChB,mBAAmB,EAEnB,iBAAiB,EACjB,SAAS,EAET,MAAM,EAKN,SAAS,EACT,UAAU,EACV,MAAM,EACP,MAAM,YAAY,CAAC;AACpB,OAAO,EAAC,cAAc,EAAE,gBAAgB,EAAC,MAAM,qCAAqC,CAAC;AAErF,OAAO,EAAC,cAAc,EAAC,MAAM,uBAAuB,CAAC;AAIrD,eAAO,MAAM,kBAAkB,EAAE,SAIhC,CAAC;AAEF,MAAM,WAAW,kBAAmB,SAAQ,UAAU,CAAC,OAAO;IAC5D,IAAI,EAAE,cAAc,CAAC;CACtB;AAED,qBACa,iBAAkB,SAAQ,cAAc;IAU5B,QAAQ,CAAC,KAAK,EAAE,SAAS;IAClB,QAAQ,CAAC,KAAK,EAAE,gBAAgB;IAC7B,SAAS,CAAC,QAAQ,CAAC,mBAAmB,EAAE,mBAAmB;IAX5F,MAAM,CAAC,EAAE,SAA4B;IACrC,MAAM,CAAC,KAAK,SAAyC;IAE3B,SAAS,CAAC,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;IACxD,SAAS,CAAC,QAAQ,CAAC,cAAc,EAAE,cAAc,CAAC;IAE1E,SAAS,CAAC,2BAA2B,EAAE,MAAM,GAAG,SAAS,GAAG,IAAI,CAAC;gBAGjC,KAAK,EAAE,SAAS,EACT,KAAK,EAAE,gBAAgB,EACV,mBAAmB,EAAE,mBAAmB;IAK5F,IAAI,aAAa,IAAI,iBAAiB,EAAE,CAEvC;IAED,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,SAAS,GAAG,SAAS;IAc/D,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,SAAS,GAAG,iBAAiB;IAKpE,IAAI,IAAI,IAAI;IAQZ,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,SAAS,GAAG,KAAK,CAAC,SAAS;IAmB7E,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,cAAc,GAAG,OAAO;IAIpD,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,cAAc,GAAG,OAAO;IAInD,SAAS,CAAC,eAAe,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,EAAE,kBAAkB,GAAG,KAAK,CAAC,SAAS;IAa7E,SAAS,CAAC,mBAAmB,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,SAAS,GAAG,KAAK,CAAC,SAAS;IAsBtF,SAAS,CAAC,kBAAkB,CAAC,IAAI,EAAE,cAAc,GAAG,MAAM;IAQ1D,SAAS,CAAC,4BAA4B,MAAa,gBAAgB,CAAC,iBAAiB,CAAC,mBAA4C;cAElH,8BAA8B,CAAC,CAAC,EAAE,KAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IAarG,SAAS,CAAC,6BAA6B,CAAC,eAAe,CAAC,EAAE,MAAM,GAAG,gBAAgB,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,SAAS;IAerH,SAAS,CAAC,gBAAgB,CAAC,IAAI,EAAE,cAAc,GAAG,KAAK,CAAC,SAAS;IAajE,SAAS,CAAC,WAAW,MAAa,gBAAgB,CAAC,cAAc,CAAC,mBAEhE;cAEc,aAAa,CAAC,CAAC,EAAE,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;CAMlF","file":"../../../src/browser/open-editors-widget/navigator-open-editors-widget.d.ts","sourcesContent":["import React from 'react';\r\nimport {Container, inject, injectable, interfaces, postConstruct} from 'inversify';\r\nimport {createFileTreeContainer, FileTreeWidget} from '@tart/filesystem';\r\nimport {nls} from '@tart/core/lib/common/nls';\r\nimport {\r\n  ApplicationShell,\r\n  ContextMenuRenderer,\r\n  defaultTreeProps,\r\n  NavigatableWidget,\r\n  NodeProps,\r\n  Saveable,\r\n  TabBar,\r\n  TREE_NODE_CONTENT_CLASS,\r\n  TreeDecoratorService,\r\n  TreeModel,\r\n  TreeNode,\r\n  TreeProps,\r\n  TreeWidget,\r\n  Widget\r\n} from '@tart/core';\r\nimport {OpenEditorNode, OpenEditorsModel} from './navigator-open-editors-tree-model';\r\nimport {OpenEditorsCommands} from './navigator-open-editors-commands';\r\nimport {CommandService} from '@tart/core/lib/common';\r\nimport {OpenEditorsTreeDecoratorService} from './navigator-open-editors-decorator-service';\r\nimport {OPEN_EDITORS_CONTEXT_MENU} from './navigator-open-editors-menus';\r\n\r\nexport const OPEN_EDITORS_PROPS: TreeProps = {\r\n  ...defaultTreeProps,\r\n  virtualized: false,\r\n  contextMenuPath: OPEN_EDITORS_CONTEXT_MENU,\r\n};\r\n\r\nexport interface OpenEditorsNodeRow extends TreeWidget.NodeRow {\r\n  node: OpenEditorNode;\r\n}\r\n\r\n@injectable()\r\nexport class OpenEditorsWidget extends FileTreeWidget {\r\n  static ID = 'wm-open-editors-widget';\r\n  static LABEL = nls.localizeByDefault('Open Editors');\r\n\r\n  @inject(ApplicationShell) protected readonly applicationShell: ApplicationShell;\r\n  @inject(CommandService) protected readonly commandService: CommandService;\r\n  // eslint-disable-next-line no-null/no-null\r\n  protected activeTreeNodePrefixElement: string | undefined | null;\r\n\r\n  constructor(\r\n      @inject(TreeProps) readonly props: TreeProps,\r\n      @inject(OpenEditorsModel) readonly model: OpenEditorsModel,\r\n      @inject(ContextMenuRenderer) protected readonly contextMenuRenderer: ContextMenuRenderer\r\n  ) {\r\n    super(props, model, contextMenuRenderer);\r\n  }\r\n\r\n  get editorWidgets(): NavigatableWidget[] {\r\n    return this.model.editorWidgets;\r\n  }\r\n\r\n  static createContainer(parent: interfaces.Container): Container {\r\n    const child = createFileTreeContainer(parent);\r\n\r\n    child.bind(OpenEditorsModel).toSelf();\r\n    child.rebind(TreeModel).toService(OpenEditorsModel);\r\n\r\n    child.bind(OpenEditorsWidget).toSelf();\r\n    child.rebind(TreeProps).toConstantValue(OPEN_EDITORS_PROPS);\r\n\r\n    child.bind(OpenEditorsTreeDecoratorService).toSelf().inSingletonScope();\r\n    child.rebind(TreeDecoratorService).toService(OpenEditorsTreeDecoratorService);\r\n    return child;\r\n  }\r\n\r\n  static createWidget(parent: interfaces.Container): OpenEditorsWidget {\r\n    return OpenEditorsWidget.createContainer(parent).get(OpenEditorsWidget);\r\n  }\r\n\r\n  @postConstruct()\r\n  init(): void {\r\n    super.init();\r\n    this.id = OpenEditorsWidget.ID;\r\n    this.title.label = OpenEditorsWidget.LABEL;\r\n    this.addClass(OpenEditorsWidget.ID);\r\n    this.update();\r\n  }\r\n\r\n  protected renderNode(node: OpenEditorNode, props: NodeProps): React.ReactNode {\r\n    if (!TreeNode.isVisible(node)) {\r\n      return undefined;\r\n    }\r\n    const attributes = this.createNodeAttributes(node, props);\r\n    const isEditorNode = !(node.id.startsWith(OpenEditorsModel.GROUP_NODE_ID_PREFIX) || node.id.startsWith(OpenEditorsModel.AREA_NODE_ID_PREFIX));\r\n    const content = <div className={`${TREE_NODE_CONTENT_CLASS}`}>\r\n      {this.renderExpansionToggle(node, props)}\r\n      {isEditorNode && this.renderPrefixIcon(node)}\r\n      {this.decorateIcon(node, this.renderIcon(node, props))}\r\n      {this.renderCaptionAffixes(node, props, 'captionPrefixes')}\r\n      {this.renderCaption(node, props)}\r\n      {this.renderCaptionAffixes(node, props, 'captionSuffixes')}\r\n      {this.renderTailDecorations(node, props)}\r\n      {(this.isGroupNode(node) || this.isAreaNode(node)) && this.renderInteractables(node, props)}\r\n    </div>;\r\n    return React.createElement('div', attributes, content);\r\n  }\r\n\r\n  protected isGroupNode(node: OpenEditorNode): boolean {\r\n    return node.id.startsWith(OpenEditorsModel.GROUP_NODE_ID_PREFIX);\r\n  }\r\n\r\n  protected isAreaNode(node: OpenEditorNode): boolean {\r\n    return node.id.startsWith(OpenEditorsModel.AREA_NODE_ID_PREFIX);\r\n  }\r\n\r\n  protected doRenderNodeRow({node, depth}: OpenEditorsNodeRow): React.ReactNode {\r\n    let groupClass = '';\r\n    if (this.isGroupNode(node)) {\r\n      groupClass = 'group-node';\r\n    } else if (this.isAreaNode(node)) {\r\n      groupClass = 'area-node';\r\n    }\r\n    return <div className={`open-editors-node-row ${this.getPrefixIconClass(node)}${groupClass}`}>\r\n      {this.renderNode(node, {depth})}\r\n    </div>;\r\n  }\r\n\r\n\r\n  protected renderInteractables(node: OpenEditorNode, props: NodeProps): React.ReactNode {\r\n    return (<div className='open-editors-inline-actions-container'>\r\n          <div className='open-editors-inline-action'>\r\n            <a className='codicon codicon-save-all'\r\n               title={OpenEditorsCommands.SAVE_ALL_IN_GROUP_FROM_ICON.label}\r\n               onClick={this.handleGroupActionIconClicked}\r\n               data-id={node.id}\r\n               id={OpenEditorsCommands.SAVE_ALL_IN_GROUP_FROM_ICON.id}\r\n            />\r\n          </div>\r\n          <div className='open-editors-inline-action'>\r\n            <a className='codicon codicon-close-all'\r\n               title={OpenEditorsCommands.CLOSE_ALL_EDITORS_IN_GROUP_FROM_ICON.label}\r\n               onClick={this.handleGroupActionIconClicked}\r\n               data-id={node.id}\r\n               id={OpenEditorsCommands.CLOSE_ALL_EDITORS_IN_GROUP_FROM_ICON.id}\r\n            />\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  protected getPrefixIconClass(node: OpenEditorNode): string {\r\n    const saveable = Saveable.get(node.widget);\r\n    if (saveable) {\r\n      return saveable.dirty ? 'dirty' : '';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  protected handleGroupActionIconClicked = async (e: React.MouseEvent<HTMLAnchorElement>) => this.doHandleGroupActionIconClicked(e);\r\n\r\n  protected async doHandleGroupActionIconClicked(e: React.MouseEvent<HTMLAnchorElement>): Promise<void> {\r\n    e.stopPropagation();\r\n    const groupName = e.currentTarget.getAttribute('data-id');\r\n    const command = e.currentTarget.id;\r\n    if (groupName && command) {\r\n      const groupFromTarget: string | number | undefined = groupName.split(':').pop();\r\n      const areaOrTabBar = this.sanitizeInputFromClickHandler(groupFromTarget);\r\n      if (areaOrTabBar) {\r\n        return this.commandService.executeCommand(command, areaOrTabBar);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected sanitizeInputFromClickHandler(groupFromTarget?: string): ApplicationShell.Area | TabBar<Widget> | undefined {\r\n    let areaOrTabBar: ApplicationShell.Area | TabBar<Widget> | undefined;\r\n    if (groupFromTarget) {\r\n      if (ApplicationShell.isValidArea(groupFromTarget)) {\r\n        areaOrTabBar = groupFromTarget;\r\n      } else {\r\n        const groupAsNum = parseInt(groupFromTarget);\r\n        if (!isNaN(groupAsNum)) {\r\n          areaOrTabBar = this.model.getTabBarForGroup(groupAsNum);\r\n        }\r\n      }\r\n    }\r\n    return areaOrTabBar;\r\n  }\r\n\r\n  protected renderPrefixIcon(node: OpenEditorNode): React.ReactNode {\r\n    return (\r\n        <div className='open-editors-prefix-icon-container'>\r\n          <div data-id={node.id}\r\n               className='open-editors-prefix-icon dirty codicon codicon-circle-filled'\r\n          />\r\n          <div data-id={node.id}\r\n               onClick={this.closeEditor}\r\n               className='open-editors-prefix-icon close codicon codicon-close'\r\n          />\r\n        </div>);\r\n  }\r\n\r\n  protected closeEditor = async (e: React.MouseEvent<HTMLDivElement>) => {\r\n    this.doCloseEditor(e)\r\n  };\r\n\r\n  protected async doCloseEditor(e: React.MouseEvent<HTMLDivElement>): Promise<void> {\r\n    const widgetId = e.currentTarget.getAttribute('data-id');\r\n    if (widgetId) {\r\n      await this.applicationShell.closeWidget(widgetId);\r\n    }\r\n  }\r\n}\r\n"]}